// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf/Models/state.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protobuf_2fModels_2fstate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protobuf_2fModels_2fstate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "protobuf/Models/server_settings.pb.h"
#include "protobuf/Models/player.pb.h"
#include "protobuf/Models/coordinator.pb.h"
#include "protobuf/Models/match.pb.h"
#include "protobuf/Models/qualifier_event.pb.h"
#include "protobuf/Models/core_server.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protobuf_2fModels_2fstate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protobuf_2fModels_2fstate_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protobuf_2fModels_2fstate_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_protobuf_2fModels_2fstate_2eproto_metadata_getter(int index);
namespace TournamentAssistantShared {
namespace Models {
class State;
struct StateDefaultTypeInternal;
extern StateDefaultTypeInternal _State_default_instance_;
}  // namespace Models
}  // namespace TournamentAssistantShared
PROTOBUF_NAMESPACE_OPEN
template<> ::TournamentAssistantShared::Models::State* Arena::CreateMaybeMessage<::TournamentAssistantShared::Models::State>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TournamentAssistantShared {
namespace Models {

// ===================================================================

class State PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TournamentAssistantShared.Models.State) */ {
 public:
  inline State() : State(nullptr) {}
  virtual ~State();
  explicit constexpr State(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  State(const State& from);
  State(State&& from) noexcept
    : State() {
    *this = ::std::move(from);
  }

  inline State& operator=(const State& from) {
    CopyFrom(from);
    return *this;
  }
  inline State& operator=(State&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const State& default_instance() {
    return *internal_default_instance();
  }
  static inline const State* internal_default_instance() {
    return reinterpret_cast<const State*>(
               &_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(State& a, State& b) {
    a.Swap(&b);
  }
  inline void Swap(State* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(State* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline State* New() const final {
    return CreateMaybeMessage<State>(nullptr);
  }

  State* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<State>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const State& from);
  void MergeFrom(const State& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(State* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TournamentAssistantShared.Models.State";
  }
  protected:
  explicit State(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_protobuf_2fModels_2fstate_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 2,
    kCoordinatorsFieldNumber = 3,
    kMatchesFieldNumber = 4,
    kEventsFieldNumber = 5,
    kKnownHostsFieldNumber = 6,
    kServerSettingsFieldNumber = 1,
  };
  // repeated .TournamentAssistantShared.Models.Player players = 2;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::TournamentAssistantShared::Models::Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentAssistantShared::Models::Player >*
      mutable_players();
  private:
  const ::TournamentAssistantShared::Models::Player& _internal_players(int index) const;
  ::TournamentAssistantShared::Models::Player* _internal_add_players();
  public:
  const ::TournamentAssistantShared::Models::Player& players(int index) const;
  ::TournamentAssistantShared::Models::Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentAssistantShared::Models::Player >&
      players() const;

  // repeated .TournamentAssistantShared.Models.Coordinator coordinators = 3;
  int coordinators_size() const;
  private:
  int _internal_coordinators_size() const;
  public:
  void clear_coordinators();
  ::TournamentAssistantShared::Models::Coordinator* mutable_coordinators(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentAssistantShared::Models::Coordinator >*
      mutable_coordinators();
  private:
  const ::TournamentAssistantShared::Models::Coordinator& _internal_coordinators(int index) const;
  ::TournamentAssistantShared::Models::Coordinator* _internal_add_coordinators();
  public:
  const ::TournamentAssistantShared::Models::Coordinator& coordinators(int index) const;
  ::TournamentAssistantShared::Models::Coordinator* add_coordinators();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentAssistantShared::Models::Coordinator >&
      coordinators() const;

  // repeated .TournamentAssistantShared.Models.Match matches = 4;
  int matches_size() const;
  private:
  int _internal_matches_size() const;
  public:
  void clear_matches();
  ::TournamentAssistantShared::Models::Match* mutable_matches(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentAssistantShared::Models::Match >*
      mutable_matches();
  private:
  const ::TournamentAssistantShared::Models::Match& _internal_matches(int index) const;
  ::TournamentAssistantShared::Models::Match* _internal_add_matches();
  public:
  const ::TournamentAssistantShared::Models::Match& matches(int index) const;
  ::TournamentAssistantShared::Models::Match* add_matches();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentAssistantShared::Models::Match >&
      matches() const;

  // repeated .TournamentAssistantShared.Models.QualifierEvent events = 5;
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  ::TournamentAssistantShared::Models::QualifierEvent* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentAssistantShared::Models::QualifierEvent >*
      mutable_events();
  private:
  const ::TournamentAssistantShared::Models::QualifierEvent& _internal_events(int index) const;
  ::TournamentAssistantShared::Models::QualifierEvent* _internal_add_events();
  public:
  const ::TournamentAssistantShared::Models::QualifierEvent& events(int index) const;
  ::TournamentAssistantShared::Models::QualifierEvent* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentAssistantShared::Models::QualifierEvent >&
      events() const;

  // repeated .TournamentAssistantShared.Models.CoreServer known_hosts = 6;
  int known_hosts_size() const;
  private:
  int _internal_known_hosts_size() const;
  public:
  void clear_known_hosts();
  ::TournamentAssistantShared::Models::CoreServer* mutable_known_hosts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentAssistantShared::Models::CoreServer >*
      mutable_known_hosts();
  private:
  const ::TournamentAssistantShared::Models::CoreServer& _internal_known_hosts(int index) const;
  ::TournamentAssistantShared::Models::CoreServer* _internal_add_known_hosts();
  public:
  const ::TournamentAssistantShared::Models::CoreServer& known_hosts(int index) const;
  ::TournamentAssistantShared::Models::CoreServer* add_known_hosts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentAssistantShared::Models::CoreServer >&
      known_hosts() const;

  // .TournamentAssistantShared.Models.ServerSettings server_settings = 1;
  bool has_server_settings() const;
  private:
  bool _internal_has_server_settings() const;
  public:
  void clear_server_settings();
  const ::TournamentAssistantShared::Models::ServerSettings& server_settings() const;
  ::TournamentAssistantShared::Models::ServerSettings* release_server_settings();
  ::TournamentAssistantShared::Models::ServerSettings* mutable_server_settings();
  void set_allocated_server_settings(::TournamentAssistantShared::Models::ServerSettings* server_settings);
  private:
  const ::TournamentAssistantShared::Models::ServerSettings& _internal_server_settings() const;
  ::TournamentAssistantShared::Models::ServerSettings* _internal_mutable_server_settings();
  public:
  void unsafe_arena_set_allocated_server_settings(
      ::TournamentAssistantShared::Models::ServerSettings* server_settings);
  ::TournamentAssistantShared::Models::ServerSettings* unsafe_arena_release_server_settings();

  // @@protoc_insertion_point(class_scope:TournamentAssistantShared.Models.State)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentAssistantShared::Models::Player > players_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentAssistantShared::Models::Coordinator > coordinators_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentAssistantShared::Models::Match > matches_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentAssistantShared::Models::QualifierEvent > events_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentAssistantShared::Models::CoreServer > known_hosts_;
  ::TournamentAssistantShared::Models::ServerSettings* server_settings_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protobuf_2fModels_2fstate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// State

// .TournamentAssistantShared.Models.ServerSettings server_settings = 1;
inline bool State::_internal_has_server_settings() const {
  return this != internal_default_instance() && server_settings_ != nullptr;
}
inline bool State::has_server_settings() const {
  return _internal_has_server_settings();
}
inline const ::TournamentAssistantShared::Models::ServerSettings& State::_internal_server_settings() const {
  const ::TournamentAssistantShared::Models::ServerSettings* p = server_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::TournamentAssistantShared::Models::ServerSettings&>(
      ::TournamentAssistantShared::Models::_ServerSettings_default_instance_);
}
inline const ::TournamentAssistantShared::Models::ServerSettings& State::server_settings() const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.State.server_settings)
  return _internal_server_settings();
}
inline void State::unsafe_arena_set_allocated_server_settings(
    ::TournamentAssistantShared::Models::ServerSettings* server_settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_settings_);
  }
  server_settings_ = server_settings;
  if (server_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TournamentAssistantShared.Models.State.server_settings)
}
inline ::TournamentAssistantShared::Models::ServerSettings* State::release_server_settings() {
  
  ::TournamentAssistantShared::Models::ServerSettings* temp = server_settings_;
  server_settings_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TournamentAssistantShared::Models::ServerSettings* State::unsafe_arena_release_server_settings() {
  // @@protoc_insertion_point(field_release:TournamentAssistantShared.Models.State.server_settings)
  
  ::TournamentAssistantShared::Models::ServerSettings* temp = server_settings_;
  server_settings_ = nullptr;
  return temp;
}
inline ::TournamentAssistantShared::Models::ServerSettings* State::_internal_mutable_server_settings() {
  
  if (server_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::TournamentAssistantShared::Models::ServerSettings>(GetArena());
    server_settings_ = p;
  }
  return server_settings_;
}
inline ::TournamentAssistantShared::Models::ServerSettings* State::mutable_server_settings() {
  // @@protoc_insertion_point(field_mutable:TournamentAssistantShared.Models.State.server_settings)
  return _internal_mutable_server_settings();
}
inline void State::set_allocated_server_settings(::TournamentAssistantShared::Models::ServerSettings* server_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_settings_);
  }
  if (server_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_settings)->GetArena();
    if (message_arena != submessage_arena) {
      server_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server_settings, submessage_arena);
    }
    
  } else {
    
  }
  server_settings_ = server_settings;
  // @@protoc_insertion_point(field_set_allocated:TournamentAssistantShared.Models.State.server_settings)
}

// repeated .TournamentAssistantShared.Models.Player players = 2;
inline int State::_internal_players_size() const {
  return players_.size();
}
inline int State::players_size() const {
  return _internal_players_size();
}
inline ::TournamentAssistantShared::Models::Player* State::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:TournamentAssistantShared.Models.State.players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentAssistantShared::Models::Player >*
State::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:TournamentAssistantShared.Models.State.players)
  return &players_;
}
inline const ::TournamentAssistantShared::Models::Player& State::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::TournamentAssistantShared::Models::Player& State::players(int index) const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.State.players)
  return _internal_players(index);
}
inline ::TournamentAssistantShared::Models::Player* State::_internal_add_players() {
  return players_.Add();
}
inline ::TournamentAssistantShared::Models::Player* State::add_players() {
  // @@protoc_insertion_point(field_add:TournamentAssistantShared.Models.State.players)
  return _internal_add_players();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentAssistantShared::Models::Player >&
State::players() const {
  // @@protoc_insertion_point(field_list:TournamentAssistantShared.Models.State.players)
  return players_;
}

// repeated .TournamentAssistantShared.Models.Coordinator coordinators = 3;
inline int State::_internal_coordinators_size() const {
  return coordinators_.size();
}
inline int State::coordinators_size() const {
  return _internal_coordinators_size();
}
inline ::TournamentAssistantShared::Models::Coordinator* State::mutable_coordinators(int index) {
  // @@protoc_insertion_point(field_mutable:TournamentAssistantShared.Models.State.coordinators)
  return coordinators_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentAssistantShared::Models::Coordinator >*
State::mutable_coordinators() {
  // @@protoc_insertion_point(field_mutable_list:TournamentAssistantShared.Models.State.coordinators)
  return &coordinators_;
}
inline const ::TournamentAssistantShared::Models::Coordinator& State::_internal_coordinators(int index) const {
  return coordinators_.Get(index);
}
inline const ::TournamentAssistantShared::Models::Coordinator& State::coordinators(int index) const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.State.coordinators)
  return _internal_coordinators(index);
}
inline ::TournamentAssistantShared::Models::Coordinator* State::_internal_add_coordinators() {
  return coordinators_.Add();
}
inline ::TournamentAssistantShared::Models::Coordinator* State::add_coordinators() {
  // @@protoc_insertion_point(field_add:TournamentAssistantShared.Models.State.coordinators)
  return _internal_add_coordinators();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentAssistantShared::Models::Coordinator >&
State::coordinators() const {
  // @@protoc_insertion_point(field_list:TournamentAssistantShared.Models.State.coordinators)
  return coordinators_;
}

// repeated .TournamentAssistantShared.Models.Match matches = 4;
inline int State::_internal_matches_size() const {
  return matches_.size();
}
inline int State::matches_size() const {
  return _internal_matches_size();
}
inline ::TournamentAssistantShared::Models::Match* State::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:TournamentAssistantShared.Models.State.matches)
  return matches_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentAssistantShared::Models::Match >*
State::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:TournamentAssistantShared.Models.State.matches)
  return &matches_;
}
inline const ::TournamentAssistantShared::Models::Match& State::_internal_matches(int index) const {
  return matches_.Get(index);
}
inline const ::TournamentAssistantShared::Models::Match& State::matches(int index) const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.State.matches)
  return _internal_matches(index);
}
inline ::TournamentAssistantShared::Models::Match* State::_internal_add_matches() {
  return matches_.Add();
}
inline ::TournamentAssistantShared::Models::Match* State::add_matches() {
  // @@protoc_insertion_point(field_add:TournamentAssistantShared.Models.State.matches)
  return _internal_add_matches();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentAssistantShared::Models::Match >&
State::matches() const {
  // @@protoc_insertion_point(field_list:TournamentAssistantShared.Models.State.matches)
  return matches_;
}

// repeated .TournamentAssistantShared.Models.QualifierEvent events = 5;
inline int State::_internal_events_size() const {
  return events_.size();
}
inline int State::events_size() const {
  return _internal_events_size();
}
inline ::TournamentAssistantShared::Models::QualifierEvent* State::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:TournamentAssistantShared.Models.State.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentAssistantShared::Models::QualifierEvent >*
State::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:TournamentAssistantShared.Models.State.events)
  return &events_;
}
inline const ::TournamentAssistantShared::Models::QualifierEvent& State::_internal_events(int index) const {
  return events_.Get(index);
}
inline const ::TournamentAssistantShared::Models::QualifierEvent& State::events(int index) const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.State.events)
  return _internal_events(index);
}
inline ::TournamentAssistantShared::Models::QualifierEvent* State::_internal_add_events() {
  return events_.Add();
}
inline ::TournamentAssistantShared::Models::QualifierEvent* State::add_events() {
  // @@protoc_insertion_point(field_add:TournamentAssistantShared.Models.State.events)
  return _internal_add_events();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentAssistantShared::Models::QualifierEvent >&
State::events() const {
  // @@protoc_insertion_point(field_list:TournamentAssistantShared.Models.State.events)
  return events_;
}

// repeated .TournamentAssistantShared.Models.CoreServer known_hosts = 6;
inline int State::_internal_known_hosts_size() const {
  return known_hosts_.size();
}
inline int State::known_hosts_size() const {
  return _internal_known_hosts_size();
}
inline ::TournamentAssistantShared::Models::CoreServer* State::mutable_known_hosts(int index) {
  // @@protoc_insertion_point(field_mutable:TournamentAssistantShared.Models.State.known_hosts)
  return known_hosts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentAssistantShared::Models::CoreServer >*
State::mutable_known_hosts() {
  // @@protoc_insertion_point(field_mutable_list:TournamentAssistantShared.Models.State.known_hosts)
  return &known_hosts_;
}
inline const ::TournamentAssistantShared::Models::CoreServer& State::_internal_known_hosts(int index) const {
  return known_hosts_.Get(index);
}
inline const ::TournamentAssistantShared::Models::CoreServer& State::known_hosts(int index) const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.State.known_hosts)
  return _internal_known_hosts(index);
}
inline ::TournamentAssistantShared::Models::CoreServer* State::_internal_add_known_hosts() {
  return known_hosts_.Add();
}
inline ::TournamentAssistantShared::Models::CoreServer* State::add_known_hosts() {
  // @@protoc_insertion_point(field_add:TournamentAssistantShared.Models.State.known_hosts)
  return _internal_add_known_hosts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentAssistantShared::Models::CoreServer >&
State::known_hosts() const {
  // @@protoc_insertion_point(field_list:TournamentAssistantShared.Models.State.known_hosts)
  return known_hosts_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Models
}  // namespace TournamentAssistantShared

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protobuf_2fModels_2fstate_2eproto
