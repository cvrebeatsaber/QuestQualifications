// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf/Models/qualifier_event.proto

#include "protobuf/Models/qualifier_event.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protobuf_2fModels_2fDiscord_2fchannel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Channel_protobuf_2fModels_2fDiscord_2fchannel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_2fModels_2fDiscord_2fguild_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Guild_protobuf_2fModels_2fDiscord_2fguild_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_2fModels_2fgameplay_5fparameters_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GameplayParameters_protobuf_2fModels_2fgameplay_5fparameters_2eproto;
namespace TournamentAssistantShared {
namespace Models {
class QualifierEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QualifierEvent> _instance;
} _QualifierEvent_default_instance_;
}  // namespace Models
}  // namespace TournamentAssistantShared
static void InitDefaultsscc_info_QualifierEvent_protobuf_2fModels_2fqualifier_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TournamentAssistantShared::Models::_QualifierEvent_default_instance_;
    new (ptr) ::TournamentAssistantShared::Models::QualifierEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_QualifierEvent_protobuf_2fModels_2fqualifier_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_QualifierEvent_protobuf_2fModels_2fqualifier_5fevent_2eproto}, {
      &scc_info_Guild_protobuf_2fModels_2fDiscord_2fguild_2eproto.base,
      &scc_info_Channel_protobuf_2fModels_2fDiscord_2fchannel_2eproto.base,
      &scc_info_GameplayParameters_protobuf_2fModels_2fgameplay_5fparameters_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_protobuf_2fModels_2fqualifier_5fevent_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_protobuf_2fModels_2fqualifier_5fevent_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_protobuf_2fModels_2fqualifier_5fevent_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_protobuf_2fModels_2fqualifier_5fevent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::QualifierEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::QualifierEvent, event_id_),
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::QualifierEvent, name_),
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::QualifierEvent, guild_),
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::QualifierEvent, info_channel_),
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::QualifierEvent, qualifier_maps_),
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::QualifierEvent, send_scores_to_info_channel_),
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::QualifierEvent, flags_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::TournamentAssistantShared::Models::QualifierEvent)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TournamentAssistantShared::Models::_QualifierEvent_default_instance_),
};

const char descriptor_table_protodef_protobuf_2fModels_2fqualifier_5fevent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%protobuf/Models/qualifier_event.proto\022"
  " TournamentAssistantShared.Models\032#proto"
  "buf/Models/Discord/guild.proto\032%protobuf"
  "/Models/Discord/channel.proto\032)protobuf/"
  "Models/gameplay_parameters.proto\"\222\003\n\016Qua"
  "lifierEvent\022\020\n\010event_id\030\001 \001(\t\022\014\n\004name\030\002 "
  "\001(\t\022>\n\005guild\030\003 \001(\0132/.TournamentAssistant"
  "Shared.Models.Discord.Guild\022G\n\014info_chan"
  "nel\030\004 \001(\01321.TournamentAssistantShared.Mo"
  "dels.Discord.Channel\022L\n\016qualifier_maps\030\005"
  " \003(\01324.TournamentAssistantShared.Models."
  "GameplayParameters\022#\n\033send_scores_to_inf"
  "o_channel\030\006 \001(\010\022\r\n\005flags\030\007 \001(\005\"U\n\rEventS"
  "ettings\022\010\n\004None\020\000\022\031\n\025HideScoresFromPlaye"
  "rs\020\001\022\037\n\033DisableScoresaberSubmission\020\002B#\252"
  "\002 TournamentAssistantShared.Modelsb\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_protobuf_2fModels_2fqualifier_5fevent_2eproto_deps[3] = {
  &::descriptor_table_protobuf_2fModels_2fDiscord_2fchannel_2eproto,
  &::descriptor_table_protobuf_2fModels_2fDiscord_2fguild_2eproto,
  &::descriptor_table_protobuf_2fModels_2fgameplay_5fparameters_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_protobuf_2fModels_2fqualifier_5fevent_2eproto_sccs[1] = {
  &scc_info_QualifierEvent_protobuf_2fModels_2fqualifier_5fevent_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_protobuf_2fModels_2fqualifier_5fevent_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protobuf_2fModels_2fqualifier_5fevent_2eproto = {
  false, false, descriptor_table_protodef_protobuf_2fModels_2fqualifier_5fevent_2eproto, "protobuf/Models/qualifier_event.proto", 642,
  &descriptor_table_protobuf_2fModels_2fqualifier_5fevent_2eproto_once, descriptor_table_protobuf_2fModels_2fqualifier_5fevent_2eproto_sccs, descriptor_table_protobuf_2fModels_2fqualifier_5fevent_2eproto_deps, 1, 3,
  schemas, file_default_instances, TableStruct_protobuf_2fModels_2fqualifier_5fevent_2eproto::offsets,
  file_level_metadata_protobuf_2fModels_2fqualifier_5fevent_2eproto, 1, file_level_enum_descriptors_protobuf_2fModels_2fqualifier_5fevent_2eproto, file_level_service_descriptors_protobuf_2fModels_2fqualifier_5fevent_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_protobuf_2fModels_2fqualifier_5fevent_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_protobuf_2fModels_2fqualifier_5fevent_2eproto)), true);
namespace TournamentAssistantShared {
namespace Models {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QualifierEvent_EventSettings_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protobuf_2fModels_2fqualifier_5fevent_2eproto);
  return file_level_enum_descriptors_protobuf_2fModels_2fqualifier_5fevent_2eproto[0];
}
bool QualifierEvent_EventSettings_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr QualifierEvent_EventSettings QualifierEvent::None;
constexpr QualifierEvent_EventSettings QualifierEvent::HideScoresFromPlayers;
constexpr QualifierEvent_EventSettings QualifierEvent::DisableScoresaberSubmission;
constexpr QualifierEvent_EventSettings QualifierEvent::EventSettings_MIN;
constexpr QualifierEvent_EventSettings QualifierEvent::EventSettings_MAX;
constexpr int QualifierEvent::EventSettings_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class QualifierEvent::_Internal {
 public:
  static const ::TournamentAssistantShared::Models::Discord::Guild& guild(const QualifierEvent* msg);
  static const ::TournamentAssistantShared::Models::Discord::Channel& info_channel(const QualifierEvent* msg);
};

const ::TournamentAssistantShared::Models::Discord::Guild&
QualifierEvent::_Internal::guild(const QualifierEvent* msg) {
  return *msg->guild_;
}
const ::TournamentAssistantShared::Models::Discord::Channel&
QualifierEvent::_Internal::info_channel(const QualifierEvent* msg) {
  return *msg->info_channel_;
}
void QualifierEvent::clear_guild() {
  if (GetArena() == nullptr && guild_ != nullptr) {
    delete guild_;
  }
  guild_ = nullptr;
}
void QualifierEvent::clear_info_channel() {
  if (GetArena() == nullptr && info_channel_ != nullptr) {
    delete info_channel_;
  }
  info_channel_ = nullptr;
}
void QualifierEvent::clear_qualifier_maps() {
  qualifier_maps_.Clear();
}
QualifierEvent::QualifierEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  qualifier_maps_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TournamentAssistantShared.Models.QualifierEvent)
}
QualifierEvent::QualifierEvent(const QualifierEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      qualifier_maps_(from.qualifier_maps_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_event_id().empty()) {
    event_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_event_id(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_guild()) {
    guild_ = new ::TournamentAssistantShared::Models::Discord::Guild(*from.guild_);
  } else {
    guild_ = nullptr;
  }
  if (from._internal_has_info_channel()) {
    info_channel_ = new ::TournamentAssistantShared::Models::Discord::Channel(*from.info_channel_);
  } else {
    info_channel_ = nullptr;
  }
  ::memcpy(&send_scores_to_info_channel_, &from.send_scores_to_info_channel_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&send_scores_to_info_channel_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:TournamentAssistantShared.Models.QualifierEvent)
}

void QualifierEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QualifierEvent_protobuf_2fModels_2fqualifier_5fevent_2eproto.base);
  event_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&guild_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&guild_)) + sizeof(flags_));
}

QualifierEvent::~QualifierEvent() {
  // @@protoc_insertion_point(destructor:TournamentAssistantShared.Models.QualifierEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QualifierEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  event_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete guild_;
  if (this != internal_default_instance()) delete info_channel_;
}

void QualifierEvent::ArenaDtor(void* object) {
  QualifierEvent* _this = reinterpret_cast< QualifierEvent* >(object);
  (void)_this;
}
void QualifierEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QualifierEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QualifierEvent& QualifierEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QualifierEvent_protobuf_2fModels_2fqualifier_5fevent_2eproto.base);
  return *internal_default_instance();
}


void QualifierEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:TournamentAssistantShared.Models.QualifierEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  qualifier_maps_.Clear();
  event_id_.ClearToEmpty();
  name_.ClearToEmpty();
  if (GetArena() == nullptr && guild_ != nullptr) {
    delete guild_;
  }
  guild_ = nullptr;
  if (GetArena() == nullptr && info_channel_ != nullptr) {
    delete info_channel_;
  }
  info_channel_ = nullptr;
  ::memset(&send_scores_to_info_channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&send_scores_to_info_channel_)) + sizeof(flags_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QualifierEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_event_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TournamentAssistantShared.Models.QualifierEvent.event_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TournamentAssistantShared.Models.QualifierEvent.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TournamentAssistantShared.Models.Discord.Guild guild = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_guild(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TournamentAssistantShared.Models.Discord.Channel info_channel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_info_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TournamentAssistantShared.Models.GameplayParameters qualifier_maps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_qualifier_maps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // bool send_scores_to_info_channel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          send_scores_to_info_channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 flags = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QualifierEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TournamentAssistantShared.Models.QualifierEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string event_id = 1;
  if (this->event_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_event_id().data(), static_cast<int>(this->_internal_event_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TournamentAssistantShared.Models.QualifierEvent.event_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_event_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TournamentAssistantShared.Models.QualifierEvent.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .TournamentAssistantShared.Models.Discord.Guild guild = 3;
  if (this->has_guild()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::guild(this), target, stream);
  }

  // .TournamentAssistantShared.Models.Discord.Channel info_channel = 4;
  if (this->has_info_channel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::info_channel(this), target, stream);
  }

  // repeated .TournamentAssistantShared.Models.GameplayParameters qualifier_maps = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_qualifier_maps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_qualifier_maps(i), target, stream);
  }

  // bool send_scores_to_info_channel = 6;
  if (this->send_scores_to_info_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_send_scores_to_info_channel(), target);
  }

  // int32 flags = 7;
  if (this->flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TournamentAssistantShared.Models.QualifierEvent)
  return target;
}

size_t QualifierEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TournamentAssistantShared.Models.QualifierEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TournamentAssistantShared.Models.GameplayParameters qualifier_maps = 5;
  total_size += 1UL * this->_internal_qualifier_maps_size();
  for (const auto& msg : this->qualifier_maps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string event_id = 1;
  if (this->event_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_event_id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .TournamentAssistantShared.Models.Discord.Guild guild = 3;
  if (this->has_guild()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *guild_);
  }

  // .TournamentAssistantShared.Models.Discord.Channel info_channel = 4;
  if (this->has_info_channel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_channel_);
  }

  // bool send_scores_to_info_channel = 6;
  if (this->send_scores_to_info_channel() != 0) {
    total_size += 1 + 1;
  }

  // int32 flags = 7;
  if (this->flags() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_flags());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QualifierEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TournamentAssistantShared.Models.QualifierEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const QualifierEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QualifierEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TournamentAssistantShared.Models.QualifierEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TournamentAssistantShared.Models.QualifierEvent)
    MergeFrom(*source);
  }
}

void QualifierEvent::MergeFrom(const QualifierEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TournamentAssistantShared.Models.QualifierEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  qualifier_maps_.MergeFrom(from.qualifier_maps_);
  if (from.event_id().size() > 0) {
    _internal_set_event_id(from._internal_event_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_guild()) {
    _internal_mutable_guild()->::TournamentAssistantShared::Models::Discord::Guild::MergeFrom(from._internal_guild());
  }
  if (from.has_info_channel()) {
    _internal_mutable_info_channel()->::TournamentAssistantShared::Models::Discord::Channel::MergeFrom(from._internal_info_channel());
  }
  if (from.send_scores_to_info_channel() != 0) {
    _internal_set_send_scores_to_info_channel(from._internal_send_scores_to_info_channel());
  }
  if (from.flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
}

void QualifierEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TournamentAssistantShared.Models.QualifierEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QualifierEvent::CopyFrom(const QualifierEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TournamentAssistantShared.Models.QualifierEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QualifierEvent::IsInitialized() const {
  return true;
}

void QualifierEvent::InternalSwap(QualifierEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  qualifier_maps_.InternalSwap(&other->qualifier_maps_);
  event_id_.Swap(&other->event_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QualifierEvent, flags_)
      + sizeof(QualifierEvent::flags_)
      - PROTOBUF_FIELD_OFFSET(QualifierEvent, guild_)>(
          reinterpret_cast<char*>(&guild_),
          reinterpret_cast<char*>(&other->guild_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QualifierEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Models
}  // namespace TournamentAssistantShared
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TournamentAssistantShared::Models::QualifierEvent* Arena::CreateMaybeMessage< ::TournamentAssistantShared::Models::QualifierEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TournamentAssistantShared::Models::QualifierEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
