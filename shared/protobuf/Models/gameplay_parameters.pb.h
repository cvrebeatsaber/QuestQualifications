// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf/Models/gameplay_parameters.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protobuf_2fModels_2fgameplay_5fparameters_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protobuf_2fModels_2fgameplay_5fparameters_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "protobuf/Models/beatmap.pb.h"
#include "protobuf/Models/player_specific_settings.pb.h"
#include "protobuf/Models/gameplay_modifiers.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protobuf_2fModels_2fgameplay_5fparameters_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protobuf_2fModels_2fgameplay_5fparameters_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protobuf_2fModels_2fgameplay_5fparameters_2eproto;
namespace TournamentAssistantShared {
namespace Models {
class GameplayParameters;
class GameplayParametersDefaultTypeInternal;
extern GameplayParametersDefaultTypeInternal _GameplayParameters_default_instance_;
}  // namespace Models
}  // namespace TournamentAssistantShared
PROTOBUF_NAMESPACE_OPEN
template<> ::TournamentAssistantShared::Models::GameplayParameters* Arena::CreateMaybeMessage<::TournamentAssistantShared::Models::GameplayParameters>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TournamentAssistantShared {
namespace Models {

// ===================================================================

class GameplayParameters PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TournamentAssistantShared.Models.GameplayParameters) */ {
 public:
  inline GameplayParameters() : GameplayParameters(nullptr) {}
  virtual ~GameplayParameters();

  GameplayParameters(const GameplayParameters& from);
  GameplayParameters(GameplayParameters&& from) noexcept
    : GameplayParameters() {
    *this = ::std::move(from);
  }

  inline GameplayParameters& operator=(const GameplayParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameplayParameters& operator=(GameplayParameters&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameplayParameters& default_instance();

  static inline const GameplayParameters* internal_default_instance() {
    return reinterpret_cast<const GameplayParameters*>(
               &_GameplayParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GameplayParameters& a, GameplayParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(GameplayParameters* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameplayParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameplayParameters* New() const final {
    return CreateMaybeMessage<GameplayParameters>(nullptr);
  }

  GameplayParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameplayParameters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameplayParameters& from);
  void MergeFrom(const GameplayParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameplayParameters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TournamentAssistantShared.Models.GameplayParameters";
  }
  protected:
  explicit GameplayParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protobuf_2fModels_2fgameplay_5fparameters_2eproto);
    return ::descriptor_table_protobuf_2fModels_2fgameplay_5fparameters_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBeatmapFieldNumber = 1,
    kPlayerSettingsFieldNumber = 2,
    kGameplayModifiersFieldNumber = 3,
  };
  // .TournamentAssistantShared.Models.Beatmap beatmap = 1;
  bool has_beatmap() const;
  private:
  bool _internal_has_beatmap() const;
  public:
  void clear_beatmap();
  const ::TournamentAssistantShared::Models::Beatmap& beatmap() const;
  ::TournamentAssistantShared::Models::Beatmap* release_beatmap();
  ::TournamentAssistantShared::Models::Beatmap* mutable_beatmap();
  void set_allocated_beatmap(::TournamentAssistantShared::Models::Beatmap* beatmap);
  private:
  const ::TournamentAssistantShared::Models::Beatmap& _internal_beatmap() const;
  ::TournamentAssistantShared::Models::Beatmap* _internal_mutable_beatmap();
  public:
  void unsafe_arena_set_allocated_beatmap(
      ::TournamentAssistantShared::Models::Beatmap* beatmap);
  ::TournamentAssistantShared::Models::Beatmap* unsafe_arena_release_beatmap();

  // .TournamentAssistantShared.Models.PlayerSpecificSettings player_settings = 2;
  bool has_player_settings() const;
  private:
  bool _internal_has_player_settings() const;
  public:
  void clear_player_settings();
  const ::TournamentAssistantShared::Models::PlayerSpecificSettings& player_settings() const;
  ::TournamentAssistantShared::Models::PlayerSpecificSettings* release_player_settings();
  ::TournamentAssistantShared::Models::PlayerSpecificSettings* mutable_player_settings();
  void set_allocated_player_settings(::TournamentAssistantShared::Models::PlayerSpecificSettings* player_settings);
  private:
  const ::TournamentAssistantShared::Models::PlayerSpecificSettings& _internal_player_settings() const;
  ::TournamentAssistantShared::Models::PlayerSpecificSettings* _internal_mutable_player_settings();
  public:
  void unsafe_arena_set_allocated_player_settings(
      ::TournamentAssistantShared::Models::PlayerSpecificSettings* player_settings);
  ::TournamentAssistantShared::Models::PlayerSpecificSettings* unsafe_arena_release_player_settings();

  // .TournamentAssistantShared.Models.GameplayModifiers gameplay_modifiers = 3;
  bool has_gameplay_modifiers() const;
  private:
  bool _internal_has_gameplay_modifiers() const;
  public:
  void clear_gameplay_modifiers();
  const ::TournamentAssistantShared::Models::GameplayModifiers& gameplay_modifiers() const;
  ::TournamentAssistantShared::Models::GameplayModifiers* release_gameplay_modifiers();
  ::TournamentAssistantShared::Models::GameplayModifiers* mutable_gameplay_modifiers();
  void set_allocated_gameplay_modifiers(::TournamentAssistantShared::Models::GameplayModifiers* gameplay_modifiers);
  private:
  const ::TournamentAssistantShared::Models::GameplayModifiers& _internal_gameplay_modifiers() const;
  ::TournamentAssistantShared::Models::GameplayModifiers* _internal_mutable_gameplay_modifiers();
  public:
  void unsafe_arena_set_allocated_gameplay_modifiers(
      ::TournamentAssistantShared::Models::GameplayModifiers* gameplay_modifiers);
  ::TournamentAssistantShared::Models::GameplayModifiers* unsafe_arena_release_gameplay_modifiers();

  // @@protoc_insertion_point(class_scope:TournamentAssistantShared.Models.GameplayParameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::TournamentAssistantShared::Models::Beatmap* beatmap_;
  ::TournamentAssistantShared::Models::PlayerSpecificSettings* player_settings_;
  ::TournamentAssistantShared::Models::GameplayModifiers* gameplay_modifiers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protobuf_2fModels_2fgameplay_5fparameters_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GameplayParameters

// .TournamentAssistantShared.Models.Beatmap beatmap = 1;
inline bool GameplayParameters::_internal_has_beatmap() const {
  return this != internal_default_instance() && beatmap_ != nullptr;
}
inline bool GameplayParameters::has_beatmap() const {
  return _internal_has_beatmap();
}
inline const ::TournamentAssistantShared::Models::Beatmap& GameplayParameters::_internal_beatmap() const {
  const ::TournamentAssistantShared::Models::Beatmap* p = beatmap_;
  return p != nullptr ? *p : reinterpret_cast<const ::TournamentAssistantShared::Models::Beatmap&>(
      ::TournamentAssistantShared::Models::_Beatmap_default_instance_);
}
inline const ::TournamentAssistantShared::Models::Beatmap& GameplayParameters::beatmap() const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.GameplayParameters.beatmap)
  return _internal_beatmap();
}
inline void GameplayParameters::unsafe_arena_set_allocated_beatmap(
    ::TournamentAssistantShared::Models::Beatmap* beatmap) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(beatmap_);
  }
  beatmap_ = beatmap;
  if (beatmap) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TournamentAssistantShared.Models.GameplayParameters.beatmap)
}
inline ::TournamentAssistantShared::Models::Beatmap* GameplayParameters::release_beatmap() {
  
  ::TournamentAssistantShared::Models::Beatmap* temp = beatmap_;
  beatmap_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TournamentAssistantShared::Models::Beatmap* GameplayParameters::unsafe_arena_release_beatmap() {
  // @@protoc_insertion_point(field_release:TournamentAssistantShared.Models.GameplayParameters.beatmap)
  
  ::TournamentAssistantShared::Models::Beatmap* temp = beatmap_;
  beatmap_ = nullptr;
  return temp;
}
inline ::TournamentAssistantShared::Models::Beatmap* GameplayParameters::_internal_mutable_beatmap() {
  
  if (beatmap_ == nullptr) {
    auto* p = CreateMaybeMessage<::TournamentAssistantShared::Models::Beatmap>(GetArena());
    beatmap_ = p;
  }
  return beatmap_;
}
inline ::TournamentAssistantShared::Models::Beatmap* GameplayParameters::mutable_beatmap() {
  // @@protoc_insertion_point(field_mutable:TournamentAssistantShared.Models.GameplayParameters.beatmap)
  return _internal_mutable_beatmap();
}
inline void GameplayParameters::set_allocated_beatmap(::TournamentAssistantShared::Models::Beatmap* beatmap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(beatmap_);
  }
  if (beatmap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(beatmap)->GetArena();
    if (message_arena != submessage_arena) {
      beatmap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, beatmap, submessage_arena);
    }
    
  } else {
    
  }
  beatmap_ = beatmap;
  // @@protoc_insertion_point(field_set_allocated:TournamentAssistantShared.Models.GameplayParameters.beatmap)
}

// .TournamentAssistantShared.Models.PlayerSpecificSettings player_settings = 2;
inline bool GameplayParameters::_internal_has_player_settings() const {
  return this != internal_default_instance() && player_settings_ != nullptr;
}
inline bool GameplayParameters::has_player_settings() const {
  return _internal_has_player_settings();
}
inline const ::TournamentAssistantShared::Models::PlayerSpecificSettings& GameplayParameters::_internal_player_settings() const {
  const ::TournamentAssistantShared::Models::PlayerSpecificSettings* p = player_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::TournamentAssistantShared::Models::PlayerSpecificSettings&>(
      ::TournamentAssistantShared::Models::_PlayerSpecificSettings_default_instance_);
}
inline const ::TournamentAssistantShared::Models::PlayerSpecificSettings& GameplayParameters::player_settings() const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.GameplayParameters.player_settings)
  return _internal_player_settings();
}
inline void GameplayParameters::unsafe_arena_set_allocated_player_settings(
    ::TournamentAssistantShared::Models::PlayerSpecificSettings* player_settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_settings_);
  }
  player_settings_ = player_settings;
  if (player_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TournamentAssistantShared.Models.GameplayParameters.player_settings)
}
inline ::TournamentAssistantShared::Models::PlayerSpecificSettings* GameplayParameters::release_player_settings() {
  
  ::TournamentAssistantShared::Models::PlayerSpecificSettings* temp = player_settings_;
  player_settings_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TournamentAssistantShared::Models::PlayerSpecificSettings* GameplayParameters::unsafe_arena_release_player_settings() {
  // @@protoc_insertion_point(field_release:TournamentAssistantShared.Models.GameplayParameters.player_settings)
  
  ::TournamentAssistantShared::Models::PlayerSpecificSettings* temp = player_settings_;
  player_settings_ = nullptr;
  return temp;
}
inline ::TournamentAssistantShared::Models::PlayerSpecificSettings* GameplayParameters::_internal_mutable_player_settings() {
  
  if (player_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::TournamentAssistantShared::Models::PlayerSpecificSettings>(GetArena());
    player_settings_ = p;
  }
  return player_settings_;
}
inline ::TournamentAssistantShared::Models::PlayerSpecificSettings* GameplayParameters::mutable_player_settings() {
  // @@protoc_insertion_point(field_mutable:TournamentAssistantShared.Models.GameplayParameters.player_settings)
  return _internal_mutable_player_settings();
}
inline void GameplayParameters::set_allocated_player_settings(::TournamentAssistantShared::Models::PlayerSpecificSettings* player_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_settings_);
  }
  if (player_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_settings)->GetArena();
    if (message_arena != submessage_arena) {
      player_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_settings, submessage_arena);
    }
    
  } else {
    
  }
  player_settings_ = player_settings;
  // @@protoc_insertion_point(field_set_allocated:TournamentAssistantShared.Models.GameplayParameters.player_settings)
}

// .TournamentAssistantShared.Models.GameplayModifiers gameplay_modifiers = 3;
inline bool GameplayParameters::_internal_has_gameplay_modifiers() const {
  return this != internal_default_instance() && gameplay_modifiers_ != nullptr;
}
inline bool GameplayParameters::has_gameplay_modifiers() const {
  return _internal_has_gameplay_modifiers();
}
inline const ::TournamentAssistantShared::Models::GameplayModifiers& GameplayParameters::_internal_gameplay_modifiers() const {
  const ::TournamentAssistantShared::Models::GameplayModifiers* p = gameplay_modifiers_;
  return p != nullptr ? *p : reinterpret_cast<const ::TournamentAssistantShared::Models::GameplayModifiers&>(
      ::TournamentAssistantShared::Models::_GameplayModifiers_default_instance_);
}
inline const ::TournamentAssistantShared::Models::GameplayModifiers& GameplayParameters::gameplay_modifiers() const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.GameplayParameters.gameplay_modifiers)
  return _internal_gameplay_modifiers();
}
inline void GameplayParameters::unsafe_arena_set_allocated_gameplay_modifiers(
    ::TournamentAssistantShared::Models::GameplayModifiers* gameplay_modifiers) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gameplay_modifiers_);
  }
  gameplay_modifiers_ = gameplay_modifiers;
  if (gameplay_modifiers) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TournamentAssistantShared.Models.GameplayParameters.gameplay_modifiers)
}
inline ::TournamentAssistantShared::Models::GameplayModifiers* GameplayParameters::release_gameplay_modifiers() {
  
  ::TournamentAssistantShared::Models::GameplayModifiers* temp = gameplay_modifiers_;
  gameplay_modifiers_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TournamentAssistantShared::Models::GameplayModifiers* GameplayParameters::unsafe_arena_release_gameplay_modifiers() {
  // @@protoc_insertion_point(field_release:TournamentAssistantShared.Models.GameplayParameters.gameplay_modifiers)
  
  ::TournamentAssistantShared::Models::GameplayModifiers* temp = gameplay_modifiers_;
  gameplay_modifiers_ = nullptr;
  return temp;
}
inline ::TournamentAssistantShared::Models::GameplayModifiers* GameplayParameters::_internal_mutable_gameplay_modifiers() {
  
  if (gameplay_modifiers_ == nullptr) {
    auto* p = CreateMaybeMessage<::TournamentAssistantShared::Models::GameplayModifiers>(GetArena());
    gameplay_modifiers_ = p;
  }
  return gameplay_modifiers_;
}
inline ::TournamentAssistantShared::Models::GameplayModifiers* GameplayParameters::mutable_gameplay_modifiers() {
  // @@protoc_insertion_point(field_mutable:TournamentAssistantShared.Models.GameplayParameters.gameplay_modifiers)
  return _internal_mutable_gameplay_modifiers();
}
inline void GameplayParameters::set_allocated_gameplay_modifiers(::TournamentAssistantShared::Models::GameplayModifiers* gameplay_modifiers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gameplay_modifiers_);
  }
  if (gameplay_modifiers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gameplay_modifiers)->GetArena();
    if (message_arena != submessage_arena) {
      gameplay_modifiers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gameplay_modifiers, submessage_arena);
    }
    
  } else {
    
  }
  gameplay_modifiers_ = gameplay_modifiers;
  // @@protoc_insertion_point(field_set_allocated:TournamentAssistantShared.Models.GameplayParameters.gameplay_modifiers)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Models
}  // namespace TournamentAssistantShared

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protobuf_2fModels_2fgameplay_5fparameters_2eproto
