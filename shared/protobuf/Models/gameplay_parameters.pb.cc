// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf/Models/gameplay_parameters.proto

#include "protobuf/Models/gameplay_parameters.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace TournamentAssistantShared {
namespace Models {
constexpr GameplayParameters::GameplayParameters(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : beatmap_(nullptr)
  , player_settings_(nullptr)
  , gameplay_modifiers_(nullptr){}
struct GameplayParametersDefaultTypeInternal {
  constexpr GameplayParametersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameplayParametersDefaultTypeInternal() {}
  union {
    GameplayParameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameplayParametersDefaultTypeInternal _GameplayParameters_default_instance_;
}  // namespace Models
}  // namespace TournamentAssistantShared
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_protobuf_2fModels_2fgameplay_5fparameters_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_protobuf_2fModels_2fgameplay_5fparameters_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_protobuf_2fModels_2fgameplay_5fparameters_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_protobuf_2fModels_2fgameplay_5fparameters_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::GameplayParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::GameplayParameters, beatmap_),
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::GameplayParameters, player_settings_),
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::GameplayParameters, gameplay_modifiers_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::TournamentAssistantShared::Models::GameplayParameters)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TournamentAssistantShared::Models::_GameplayParameters_default_instance_),
};

const char descriptor_table_protodef_protobuf_2fModels_2fgameplay_5fparameters_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)protobuf/Models/gameplay_parameters.pr"
  "oto\022 TournamentAssistantShared.Models\032\035p"
  "rotobuf/Models/beatmap.proto\032.protobuf/M"
  "odels/player_specific_settings.proto\032(pr"
  "otobuf/Models/gameplay_modifiers.proto\"\364"
  "\001\n\022GameplayParameters\022:\n\007beatmap\030\001 \001(\0132)"
  ".TournamentAssistantShared.Models.Beatma"
  "p\022Q\n\017player_settings\030\002 \001(\01328.TournamentA"
  "ssistantShared.Models.PlayerSpecificSett"
  "ings\022O\n\022gameplay_modifiers\030\003 \001(\01323.Tourn"
  "amentAssistantShared.Models.GameplayModi"
  "fiersB#\252\002 TournamentAssistantShared.Mode"
  "lsb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_protobuf_2fModels_2fgameplay_5fparameters_2eproto_deps[3] = {
  &::descriptor_table_protobuf_2fModels_2fbeatmap_2eproto,
  &::descriptor_table_protobuf_2fModels_2fgameplay_5fmodifiers_2eproto,
  &::descriptor_table_protobuf_2fModels_2fplayer_5fspecific_5fsettings_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_protobuf_2fModels_2fgameplay_5fparameters_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protobuf_2fModels_2fgameplay_5fparameters_2eproto = {
  false, false, 490, descriptor_table_protodef_protobuf_2fModels_2fgameplay_5fparameters_2eproto, "protobuf/Models/gameplay_parameters.proto", 
  &descriptor_table_protobuf_2fModels_2fgameplay_5fparameters_2eproto_once, descriptor_table_protobuf_2fModels_2fgameplay_5fparameters_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_protobuf_2fModels_2fgameplay_5fparameters_2eproto::offsets,
  file_level_metadata_protobuf_2fModels_2fgameplay_5fparameters_2eproto, file_level_enum_descriptors_protobuf_2fModels_2fgameplay_5fparameters_2eproto, file_level_service_descriptors_protobuf_2fModels_2fgameplay_5fparameters_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_protobuf_2fModels_2fgameplay_5fparameters_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protobuf_2fModels_2fgameplay_5fparameters_2eproto);
  return descriptor_table_protobuf_2fModels_2fgameplay_5fparameters_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_protobuf_2fModels_2fgameplay_5fparameters_2eproto(&descriptor_table_protobuf_2fModels_2fgameplay_5fparameters_2eproto);
namespace TournamentAssistantShared {
namespace Models {

// ===================================================================

class GameplayParameters::_Internal {
 public:
  static const ::TournamentAssistantShared::Models::Beatmap& beatmap(const GameplayParameters* msg);
  static const ::TournamentAssistantShared::Models::PlayerSpecificSettings& player_settings(const GameplayParameters* msg);
  static const ::TournamentAssistantShared::Models::GameplayModifiers& gameplay_modifiers(const GameplayParameters* msg);
};

const ::TournamentAssistantShared::Models::Beatmap&
GameplayParameters::_Internal::beatmap(const GameplayParameters* msg) {
  return *msg->beatmap_;
}
const ::TournamentAssistantShared::Models::PlayerSpecificSettings&
GameplayParameters::_Internal::player_settings(const GameplayParameters* msg) {
  return *msg->player_settings_;
}
const ::TournamentAssistantShared::Models::GameplayModifiers&
GameplayParameters::_Internal::gameplay_modifiers(const GameplayParameters* msg) {
  return *msg->gameplay_modifiers_;
}
void GameplayParameters::clear_beatmap() {
  if (GetArena() == nullptr && beatmap_ != nullptr) {
    delete beatmap_;
  }
  beatmap_ = nullptr;
}
void GameplayParameters::clear_player_settings() {
  if (GetArena() == nullptr && player_settings_ != nullptr) {
    delete player_settings_;
  }
  player_settings_ = nullptr;
}
void GameplayParameters::clear_gameplay_modifiers() {
  if (GetArena() == nullptr && gameplay_modifiers_ != nullptr) {
    delete gameplay_modifiers_;
  }
  gameplay_modifiers_ = nullptr;
}
GameplayParameters::GameplayParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TournamentAssistantShared.Models.GameplayParameters)
}
GameplayParameters::GameplayParameters(const GameplayParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_beatmap()) {
    beatmap_ = new ::TournamentAssistantShared::Models::Beatmap(*from.beatmap_);
  } else {
    beatmap_ = nullptr;
  }
  if (from._internal_has_player_settings()) {
    player_settings_ = new ::TournamentAssistantShared::Models::PlayerSpecificSettings(*from.player_settings_);
  } else {
    player_settings_ = nullptr;
  }
  if (from._internal_has_gameplay_modifiers()) {
    gameplay_modifiers_ = new ::TournamentAssistantShared::Models::GameplayModifiers(*from.gameplay_modifiers_);
  } else {
    gameplay_modifiers_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TournamentAssistantShared.Models.GameplayParameters)
}

void GameplayParameters::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&beatmap_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&gameplay_modifiers_) -
    reinterpret_cast<char*>(&beatmap_)) + sizeof(gameplay_modifiers_));
}

GameplayParameters::~GameplayParameters() {
  // @@protoc_insertion_point(destructor:TournamentAssistantShared.Models.GameplayParameters)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameplayParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete beatmap_;
  if (this != internal_default_instance()) delete player_settings_;
  if (this != internal_default_instance()) delete gameplay_modifiers_;
}

void GameplayParameters::ArenaDtor(void* object) {
  GameplayParameters* _this = reinterpret_cast< GameplayParameters* >(object);
  (void)_this;
}
void GameplayParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameplayParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameplayParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:TournamentAssistantShared.Models.GameplayParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && beatmap_ != nullptr) {
    delete beatmap_;
  }
  beatmap_ = nullptr;
  if (GetArena() == nullptr && player_settings_ != nullptr) {
    delete player_settings_;
  }
  player_settings_ = nullptr;
  if (GetArena() == nullptr && gameplay_modifiers_ != nullptr) {
    delete gameplay_modifiers_;
  }
  gameplay_modifiers_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameplayParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TournamentAssistantShared.Models.Beatmap beatmap = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_beatmap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TournamentAssistantShared.Models.PlayerSpecificSettings player_settings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TournamentAssistantShared.Models.GameplayModifiers gameplay_modifiers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_gameplay_modifiers(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameplayParameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TournamentAssistantShared.Models.GameplayParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TournamentAssistantShared.Models.Beatmap beatmap = 1;
  if (this->has_beatmap()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::beatmap(this), target, stream);
  }

  // .TournamentAssistantShared.Models.PlayerSpecificSettings player_settings = 2;
  if (this->has_player_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::player_settings(this), target, stream);
  }

  // .TournamentAssistantShared.Models.GameplayModifiers gameplay_modifiers = 3;
  if (this->has_gameplay_modifiers()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::gameplay_modifiers(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TournamentAssistantShared.Models.GameplayParameters)
  return target;
}

size_t GameplayParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TournamentAssistantShared.Models.GameplayParameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TournamentAssistantShared.Models.Beatmap beatmap = 1;
  if (this->has_beatmap()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *beatmap_);
  }

  // .TournamentAssistantShared.Models.PlayerSpecificSettings player_settings = 2;
  if (this->has_player_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_settings_);
  }

  // .TournamentAssistantShared.Models.GameplayModifiers gameplay_modifiers = 3;
  if (this->has_gameplay_modifiers()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gameplay_modifiers_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameplayParameters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TournamentAssistantShared.Models.GameplayParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const GameplayParameters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameplayParameters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TournamentAssistantShared.Models.GameplayParameters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TournamentAssistantShared.Models.GameplayParameters)
    MergeFrom(*source);
  }
}

void GameplayParameters::MergeFrom(const GameplayParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TournamentAssistantShared.Models.GameplayParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_beatmap()) {
    _internal_mutable_beatmap()->::TournamentAssistantShared::Models::Beatmap::MergeFrom(from._internal_beatmap());
  }
  if (from.has_player_settings()) {
    _internal_mutable_player_settings()->::TournamentAssistantShared::Models::PlayerSpecificSettings::MergeFrom(from._internal_player_settings());
  }
  if (from.has_gameplay_modifiers()) {
    _internal_mutable_gameplay_modifiers()->::TournamentAssistantShared::Models::GameplayModifiers::MergeFrom(from._internal_gameplay_modifiers());
  }
}

void GameplayParameters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TournamentAssistantShared.Models.GameplayParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameplayParameters::CopyFrom(const GameplayParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TournamentAssistantShared.Models.GameplayParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameplayParameters::IsInitialized() const {
  return true;
}

void GameplayParameters::InternalSwap(GameplayParameters* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameplayParameters, gameplay_modifiers_)
      + sizeof(GameplayParameters::gameplay_modifiers_)
      - PROTOBUF_FIELD_OFFSET(GameplayParameters, beatmap_)>(
          reinterpret_cast<char*>(&beatmap_),
          reinterpret_cast<char*>(&other->beatmap_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameplayParameters::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Models
}  // namespace TournamentAssistantShared
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TournamentAssistantShared::Models::GameplayParameters* Arena::CreateMaybeMessage< ::TournamentAssistantShared::Models::GameplayParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TournamentAssistantShared::Models::GameplayParameters >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
