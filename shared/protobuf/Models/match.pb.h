// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf/Models/match.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protobuf_2fModels_2fmatch_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protobuf_2fModels_2fmatch_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "protobuf/Models/player.pb.h"
#include "protobuf/Models/coordinator.pb.h"
#include "protobuf/Models/preview_beatmap_level.pb.h"
#include "protobuf/Models/characteristic.pb.h"
#include "protobuf/Models/beatmap_difficulty.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protobuf_2fModels_2fmatch_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protobuf_2fModels_2fmatch_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protobuf_2fModels_2fmatch_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_protobuf_2fModels_2fmatch_2eproto_metadata_getter(int index);
namespace TournamentAssistantShared {
namespace Models {
class Match;
struct MatchDefaultTypeInternal;
extern MatchDefaultTypeInternal _Match_default_instance_;
}  // namespace Models
}  // namespace TournamentAssistantShared
PROTOBUF_NAMESPACE_OPEN
template<> ::TournamentAssistantShared::Models::Match* Arena::CreateMaybeMessage<::TournamentAssistantShared::Models::Match>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TournamentAssistantShared {
namespace Models {

// ===================================================================

class Match PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TournamentAssistantShared.Models.Match) */ {
 public:
  inline Match() : Match(nullptr) {}
  virtual ~Match();
  explicit constexpr Match(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Match(const Match& from);
  Match(Match&& from) noexcept
    : Match() {
    *this = ::std::move(from);
  }

  inline Match& operator=(const Match& from) {
    CopyFrom(from);
    return *this;
  }
  inline Match& operator=(Match&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Match& default_instance() {
    return *internal_default_instance();
  }
  enum LeaderCase {
    kCoordinator = 3,
    kPlayer = 4,
    LEADER_NOT_SET = 0,
  };

  static inline const Match* internal_default_instance() {
    return reinterpret_cast<const Match*>(
               &_Match_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Match& a, Match& b) {
    a.Swap(&b);
  }
  inline void Swap(Match* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Match* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Match* New() const final {
    return CreateMaybeMessage<Match>(nullptr);
  }

  Match* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Match>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Match& from);
  void MergeFrom(const Match& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Match* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TournamentAssistantShared.Models.Match";
  }
  protected:
  explicit Match(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_protobuf_2fModels_2fmatch_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 2,
    kGuidFieldNumber = 1,
    kSelectedLevelFieldNumber = 5,
    kSelectedCharacteristicFieldNumber = 6,
    kSelectedDifficultyFieldNumber = 7,
    kCoordinatorFieldNumber = 3,
    kPlayerFieldNumber = 4,
  };
  // repeated .TournamentAssistantShared.Models.Player players = 2;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::TournamentAssistantShared::Models::Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentAssistantShared::Models::Player >*
      mutable_players();
  private:
  const ::TournamentAssistantShared::Models::Player& _internal_players(int index) const;
  ::TournamentAssistantShared::Models::Player* _internal_add_players();
  public:
  const ::TournamentAssistantShared::Models::Player& players(int index) const;
  ::TournamentAssistantShared::Models::Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentAssistantShared::Models::Player >&
      players() const;

  // string guid = 1;
  void clear_guid();
  const std::string& guid() const;
  void set_guid(const std::string& value);
  void set_guid(std::string&& value);
  void set_guid(const char* value);
  void set_guid(const char* value, size_t size);
  std::string* mutable_guid();
  std::string* release_guid();
  void set_allocated_guid(std::string* guid);
  private:
  const std::string& _internal_guid() const;
  void _internal_set_guid(const std::string& value);
  std::string* _internal_mutable_guid();
  public:

  // .TournamentAssistantShared.Models.PreviewBeatmapLevel selected_level = 5;
  bool has_selected_level() const;
  private:
  bool _internal_has_selected_level() const;
  public:
  void clear_selected_level();
  const ::TournamentAssistantShared::Models::PreviewBeatmapLevel& selected_level() const;
  ::TournamentAssistantShared::Models::PreviewBeatmapLevel* release_selected_level();
  ::TournamentAssistantShared::Models::PreviewBeatmapLevel* mutable_selected_level();
  void set_allocated_selected_level(::TournamentAssistantShared::Models::PreviewBeatmapLevel* selected_level);
  private:
  const ::TournamentAssistantShared::Models::PreviewBeatmapLevel& _internal_selected_level() const;
  ::TournamentAssistantShared::Models::PreviewBeatmapLevel* _internal_mutable_selected_level();
  public:
  void unsafe_arena_set_allocated_selected_level(
      ::TournamentAssistantShared::Models::PreviewBeatmapLevel* selected_level);
  ::TournamentAssistantShared::Models::PreviewBeatmapLevel* unsafe_arena_release_selected_level();

  // .TournamentAssistantShared.Models.Characteristic selected_characteristic = 6;
  bool has_selected_characteristic() const;
  private:
  bool _internal_has_selected_characteristic() const;
  public:
  void clear_selected_characteristic();
  const ::TournamentAssistantShared::Models::Characteristic& selected_characteristic() const;
  ::TournamentAssistantShared::Models::Characteristic* release_selected_characteristic();
  ::TournamentAssistantShared::Models::Characteristic* mutable_selected_characteristic();
  void set_allocated_selected_characteristic(::TournamentAssistantShared::Models::Characteristic* selected_characteristic);
  private:
  const ::TournamentAssistantShared::Models::Characteristic& _internal_selected_characteristic() const;
  ::TournamentAssistantShared::Models::Characteristic* _internal_mutable_selected_characteristic();
  public:
  void unsafe_arena_set_allocated_selected_characteristic(
      ::TournamentAssistantShared::Models::Characteristic* selected_characteristic);
  ::TournamentAssistantShared::Models::Characteristic* unsafe_arena_release_selected_characteristic();

  // .TournamentAssistantShared.Models.BeatmapDifficulty selected_difficulty = 7;
  void clear_selected_difficulty();
  ::TournamentAssistantShared::Models::BeatmapDifficulty selected_difficulty() const;
  void set_selected_difficulty(::TournamentAssistantShared::Models::BeatmapDifficulty value);
  private:
  ::TournamentAssistantShared::Models::BeatmapDifficulty _internal_selected_difficulty() const;
  void _internal_set_selected_difficulty(::TournamentAssistantShared::Models::BeatmapDifficulty value);
  public:

  // .TournamentAssistantShared.Models.Coordinator coordinator = 3;
  bool has_coordinator() const;
  private:
  bool _internal_has_coordinator() const;
  public:
  void clear_coordinator();
  const ::TournamentAssistantShared::Models::Coordinator& coordinator() const;
  ::TournamentAssistantShared::Models::Coordinator* release_coordinator();
  ::TournamentAssistantShared::Models::Coordinator* mutable_coordinator();
  void set_allocated_coordinator(::TournamentAssistantShared::Models::Coordinator* coordinator);
  private:
  const ::TournamentAssistantShared::Models::Coordinator& _internal_coordinator() const;
  ::TournamentAssistantShared::Models::Coordinator* _internal_mutable_coordinator();
  public:
  void unsafe_arena_set_allocated_coordinator(
      ::TournamentAssistantShared::Models::Coordinator* coordinator);
  ::TournamentAssistantShared::Models::Coordinator* unsafe_arena_release_coordinator();

  // .TournamentAssistantShared.Models.Player player = 4;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::TournamentAssistantShared::Models::Player& player() const;
  ::TournamentAssistantShared::Models::Player* release_player();
  ::TournamentAssistantShared::Models::Player* mutable_player();
  void set_allocated_player(::TournamentAssistantShared::Models::Player* player);
  private:
  const ::TournamentAssistantShared::Models::Player& _internal_player() const;
  ::TournamentAssistantShared::Models::Player* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::TournamentAssistantShared::Models::Player* player);
  ::TournamentAssistantShared::Models::Player* unsafe_arena_release_player();

  void clear_leader();
  LeaderCase leader_case() const;
  // @@protoc_insertion_point(class_scope:TournamentAssistantShared.Models.Match)
 private:
  class _Internal;
  void set_has_coordinator();
  void set_has_player();

  inline bool has_leader() const;
  inline void clear_has_leader();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentAssistantShared::Models::Player > players_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guid_;
  ::TournamentAssistantShared::Models::PreviewBeatmapLevel* selected_level_;
  ::TournamentAssistantShared::Models::Characteristic* selected_characteristic_;
  int selected_difficulty_;
  union LeaderUnion {
    constexpr LeaderUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::TournamentAssistantShared::Models::Coordinator* coordinator_;
    ::TournamentAssistantShared::Models::Player* player_;
  } leader_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_protobuf_2fModels_2fmatch_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Match

// string guid = 1;
inline void Match::clear_guid() {
  guid_.ClearToEmpty();
}
inline const std::string& Match::guid() const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.Match.guid)
  return _internal_guid();
}
inline void Match::set_guid(const std::string& value) {
  _internal_set_guid(value);
  // @@protoc_insertion_point(field_set:TournamentAssistantShared.Models.Match.guid)
}
inline std::string* Match::mutable_guid() {
  // @@protoc_insertion_point(field_mutable:TournamentAssistantShared.Models.Match.guid)
  return _internal_mutable_guid();
}
inline const std::string& Match::_internal_guid() const {
  return guid_.Get();
}
inline void Match::_internal_set_guid(const std::string& value) {
  
  guid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Match::set_guid(std::string&& value) {
  
  guid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TournamentAssistantShared.Models.Match.guid)
}
inline void Match::set_guid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  guid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TournamentAssistantShared.Models.Match.guid)
}
inline void Match::set_guid(const char* value,
    size_t size) {
  
  guid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TournamentAssistantShared.Models.Match.guid)
}
inline std::string* Match::_internal_mutable_guid() {
  
  return guid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Match::release_guid() {
  // @@protoc_insertion_point(field_release:TournamentAssistantShared.Models.Match.guid)
  return guid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Match::set_allocated_guid(std::string* guid) {
  if (guid != nullptr) {
    
  } else {
    
  }
  guid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), guid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TournamentAssistantShared.Models.Match.guid)
}

// repeated .TournamentAssistantShared.Models.Player players = 2;
inline int Match::_internal_players_size() const {
  return players_.size();
}
inline int Match::players_size() const {
  return _internal_players_size();
}
inline ::TournamentAssistantShared::Models::Player* Match::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:TournamentAssistantShared.Models.Match.players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentAssistantShared::Models::Player >*
Match::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:TournamentAssistantShared.Models.Match.players)
  return &players_;
}
inline const ::TournamentAssistantShared::Models::Player& Match::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::TournamentAssistantShared::Models::Player& Match::players(int index) const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.Match.players)
  return _internal_players(index);
}
inline ::TournamentAssistantShared::Models::Player* Match::_internal_add_players() {
  return players_.Add();
}
inline ::TournamentAssistantShared::Models::Player* Match::add_players() {
  // @@protoc_insertion_point(field_add:TournamentAssistantShared.Models.Match.players)
  return _internal_add_players();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentAssistantShared::Models::Player >&
Match::players() const {
  // @@protoc_insertion_point(field_list:TournamentAssistantShared.Models.Match.players)
  return players_;
}

// .TournamentAssistantShared.Models.Coordinator coordinator = 3;
inline bool Match::_internal_has_coordinator() const {
  return leader_case() == kCoordinator;
}
inline bool Match::has_coordinator() const {
  return _internal_has_coordinator();
}
inline void Match::set_has_coordinator() {
  _oneof_case_[0] = kCoordinator;
}
inline ::TournamentAssistantShared::Models::Coordinator* Match::release_coordinator() {
  // @@protoc_insertion_point(field_release:TournamentAssistantShared.Models.Match.coordinator)
  if (_internal_has_coordinator()) {
    clear_has_leader();
      ::TournamentAssistantShared::Models::Coordinator* temp = leader_.coordinator_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    leader_.coordinator_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TournamentAssistantShared::Models::Coordinator& Match::_internal_coordinator() const {
  return _internal_has_coordinator()
      ? *leader_.coordinator_
      : reinterpret_cast< ::TournamentAssistantShared::Models::Coordinator&>(::TournamentAssistantShared::Models::_Coordinator_default_instance_);
}
inline const ::TournamentAssistantShared::Models::Coordinator& Match::coordinator() const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.Match.coordinator)
  return _internal_coordinator();
}
inline ::TournamentAssistantShared::Models::Coordinator* Match::unsafe_arena_release_coordinator() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TournamentAssistantShared.Models.Match.coordinator)
  if (_internal_has_coordinator()) {
    clear_has_leader();
    ::TournamentAssistantShared::Models::Coordinator* temp = leader_.coordinator_;
    leader_.coordinator_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Match::unsafe_arena_set_allocated_coordinator(::TournamentAssistantShared::Models::Coordinator* coordinator) {
  clear_leader();
  if (coordinator) {
    set_has_coordinator();
    leader_.coordinator_ = coordinator;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TournamentAssistantShared.Models.Match.coordinator)
}
inline ::TournamentAssistantShared::Models::Coordinator* Match::_internal_mutable_coordinator() {
  if (!_internal_has_coordinator()) {
    clear_leader();
    set_has_coordinator();
    leader_.coordinator_ = CreateMaybeMessage< ::TournamentAssistantShared::Models::Coordinator >(GetArena());
  }
  return leader_.coordinator_;
}
inline ::TournamentAssistantShared::Models::Coordinator* Match::mutable_coordinator() {
  // @@protoc_insertion_point(field_mutable:TournamentAssistantShared.Models.Match.coordinator)
  return _internal_mutable_coordinator();
}

// .TournamentAssistantShared.Models.Player player = 4;
inline bool Match::_internal_has_player() const {
  return leader_case() == kPlayer;
}
inline bool Match::has_player() const {
  return _internal_has_player();
}
inline void Match::set_has_player() {
  _oneof_case_[0] = kPlayer;
}
inline ::TournamentAssistantShared::Models::Player* Match::release_player() {
  // @@protoc_insertion_point(field_release:TournamentAssistantShared.Models.Match.player)
  if (_internal_has_player()) {
    clear_has_leader();
      ::TournamentAssistantShared::Models::Player* temp = leader_.player_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    leader_.player_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TournamentAssistantShared::Models::Player& Match::_internal_player() const {
  return _internal_has_player()
      ? *leader_.player_
      : reinterpret_cast< ::TournamentAssistantShared::Models::Player&>(::TournamentAssistantShared::Models::_Player_default_instance_);
}
inline const ::TournamentAssistantShared::Models::Player& Match::player() const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.Match.player)
  return _internal_player();
}
inline ::TournamentAssistantShared::Models::Player* Match::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TournamentAssistantShared.Models.Match.player)
  if (_internal_has_player()) {
    clear_has_leader();
    ::TournamentAssistantShared::Models::Player* temp = leader_.player_;
    leader_.player_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Match::unsafe_arena_set_allocated_player(::TournamentAssistantShared::Models::Player* player) {
  clear_leader();
  if (player) {
    set_has_player();
    leader_.player_ = player;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TournamentAssistantShared.Models.Match.player)
}
inline ::TournamentAssistantShared::Models::Player* Match::_internal_mutable_player() {
  if (!_internal_has_player()) {
    clear_leader();
    set_has_player();
    leader_.player_ = CreateMaybeMessage< ::TournamentAssistantShared::Models::Player >(GetArena());
  }
  return leader_.player_;
}
inline ::TournamentAssistantShared::Models::Player* Match::mutable_player() {
  // @@protoc_insertion_point(field_mutable:TournamentAssistantShared.Models.Match.player)
  return _internal_mutable_player();
}

// .TournamentAssistantShared.Models.PreviewBeatmapLevel selected_level = 5;
inline bool Match::_internal_has_selected_level() const {
  return this != internal_default_instance() && selected_level_ != nullptr;
}
inline bool Match::has_selected_level() const {
  return _internal_has_selected_level();
}
inline const ::TournamentAssistantShared::Models::PreviewBeatmapLevel& Match::_internal_selected_level() const {
  const ::TournamentAssistantShared::Models::PreviewBeatmapLevel* p = selected_level_;
  return p != nullptr ? *p : reinterpret_cast<const ::TournamentAssistantShared::Models::PreviewBeatmapLevel&>(
      ::TournamentAssistantShared::Models::_PreviewBeatmapLevel_default_instance_);
}
inline const ::TournamentAssistantShared::Models::PreviewBeatmapLevel& Match::selected_level() const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.Match.selected_level)
  return _internal_selected_level();
}
inline void Match::unsafe_arena_set_allocated_selected_level(
    ::TournamentAssistantShared::Models::PreviewBeatmapLevel* selected_level) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selected_level_);
  }
  selected_level_ = selected_level;
  if (selected_level) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TournamentAssistantShared.Models.Match.selected_level)
}
inline ::TournamentAssistantShared::Models::PreviewBeatmapLevel* Match::release_selected_level() {
  
  ::TournamentAssistantShared::Models::PreviewBeatmapLevel* temp = selected_level_;
  selected_level_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TournamentAssistantShared::Models::PreviewBeatmapLevel* Match::unsafe_arena_release_selected_level() {
  // @@protoc_insertion_point(field_release:TournamentAssistantShared.Models.Match.selected_level)
  
  ::TournamentAssistantShared::Models::PreviewBeatmapLevel* temp = selected_level_;
  selected_level_ = nullptr;
  return temp;
}
inline ::TournamentAssistantShared::Models::PreviewBeatmapLevel* Match::_internal_mutable_selected_level() {
  
  if (selected_level_ == nullptr) {
    auto* p = CreateMaybeMessage<::TournamentAssistantShared::Models::PreviewBeatmapLevel>(GetArena());
    selected_level_ = p;
  }
  return selected_level_;
}
inline ::TournamentAssistantShared::Models::PreviewBeatmapLevel* Match::mutable_selected_level() {
  // @@protoc_insertion_point(field_mutable:TournamentAssistantShared.Models.Match.selected_level)
  return _internal_mutable_selected_level();
}
inline void Match::set_allocated_selected_level(::TournamentAssistantShared::Models::PreviewBeatmapLevel* selected_level) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(selected_level_);
  }
  if (selected_level) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selected_level)->GetArena();
    if (message_arena != submessage_arena) {
      selected_level = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selected_level, submessage_arena);
    }
    
  } else {
    
  }
  selected_level_ = selected_level;
  // @@protoc_insertion_point(field_set_allocated:TournamentAssistantShared.Models.Match.selected_level)
}

// .TournamentAssistantShared.Models.Characteristic selected_characteristic = 6;
inline bool Match::_internal_has_selected_characteristic() const {
  return this != internal_default_instance() && selected_characteristic_ != nullptr;
}
inline bool Match::has_selected_characteristic() const {
  return _internal_has_selected_characteristic();
}
inline const ::TournamentAssistantShared::Models::Characteristic& Match::_internal_selected_characteristic() const {
  const ::TournamentAssistantShared::Models::Characteristic* p = selected_characteristic_;
  return p != nullptr ? *p : reinterpret_cast<const ::TournamentAssistantShared::Models::Characteristic&>(
      ::TournamentAssistantShared::Models::_Characteristic_default_instance_);
}
inline const ::TournamentAssistantShared::Models::Characteristic& Match::selected_characteristic() const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.Match.selected_characteristic)
  return _internal_selected_characteristic();
}
inline void Match::unsafe_arena_set_allocated_selected_characteristic(
    ::TournamentAssistantShared::Models::Characteristic* selected_characteristic) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selected_characteristic_);
  }
  selected_characteristic_ = selected_characteristic;
  if (selected_characteristic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TournamentAssistantShared.Models.Match.selected_characteristic)
}
inline ::TournamentAssistantShared::Models::Characteristic* Match::release_selected_characteristic() {
  
  ::TournamentAssistantShared::Models::Characteristic* temp = selected_characteristic_;
  selected_characteristic_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TournamentAssistantShared::Models::Characteristic* Match::unsafe_arena_release_selected_characteristic() {
  // @@protoc_insertion_point(field_release:TournamentAssistantShared.Models.Match.selected_characteristic)
  
  ::TournamentAssistantShared::Models::Characteristic* temp = selected_characteristic_;
  selected_characteristic_ = nullptr;
  return temp;
}
inline ::TournamentAssistantShared::Models::Characteristic* Match::_internal_mutable_selected_characteristic() {
  
  if (selected_characteristic_ == nullptr) {
    auto* p = CreateMaybeMessage<::TournamentAssistantShared::Models::Characteristic>(GetArena());
    selected_characteristic_ = p;
  }
  return selected_characteristic_;
}
inline ::TournamentAssistantShared::Models::Characteristic* Match::mutable_selected_characteristic() {
  // @@protoc_insertion_point(field_mutable:TournamentAssistantShared.Models.Match.selected_characteristic)
  return _internal_mutable_selected_characteristic();
}
inline void Match::set_allocated_selected_characteristic(::TournamentAssistantShared::Models::Characteristic* selected_characteristic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(selected_characteristic_);
  }
  if (selected_characteristic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selected_characteristic)->GetArena();
    if (message_arena != submessage_arena) {
      selected_characteristic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selected_characteristic, submessage_arena);
    }
    
  } else {
    
  }
  selected_characteristic_ = selected_characteristic;
  // @@protoc_insertion_point(field_set_allocated:TournamentAssistantShared.Models.Match.selected_characteristic)
}

// .TournamentAssistantShared.Models.BeatmapDifficulty selected_difficulty = 7;
inline void Match::clear_selected_difficulty() {
  selected_difficulty_ = 0;
}
inline ::TournamentAssistantShared::Models::BeatmapDifficulty Match::_internal_selected_difficulty() const {
  return static_cast< ::TournamentAssistantShared::Models::BeatmapDifficulty >(selected_difficulty_);
}
inline ::TournamentAssistantShared::Models::BeatmapDifficulty Match::selected_difficulty() const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.Match.selected_difficulty)
  return _internal_selected_difficulty();
}
inline void Match::_internal_set_selected_difficulty(::TournamentAssistantShared::Models::BeatmapDifficulty value) {
  
  selected_difficulty_ = value;
}
inline void Match::set_selected_difficulty(::TournamentAssistantShared::Models::BeatmapDifficulty value) {
  _internal_set_selected_difficulty(value);
  // @@protoc_insertion_point(field_set:TournamentAssistantShared.Models.Match.selected_difficulty)
}

inline bool Match::has_leader() const {
  return leader_case() != LEADER_NOT_SET;
}
inline void Match::clear_has_leader() {
  _oneof_case_[0] = LEADER_NOT_SET;
}
inline Match::LeaderCase Match::leader_case() const {
  return Match::LeaderCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Models
}  // namespace TournamentAssistantShared

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protobuf_2fModels_2fmatch_2eproto
