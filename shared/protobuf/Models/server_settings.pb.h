// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf/Models/server_settings.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protobuf_2fModels_2fserver_5fsettings_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protobuf_2fModels_2fserver_5fsettings_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "protobuf/Models/team.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protobuf_2fModels_2fserver_5fsettings_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protobuf_2fModels_2fserver_5fsettings_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protobuf_2fModels_2fserver_5fsettings_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_protobuf_2fModels_2fserver_5fsettings_2eproto_metadata_getter(int index);
namespace TournamentAssistantShared {
namespace Models {
class ServerSettings;
struct ServerSettingsDefaultTypeInternal;
extern ServerSettingsDefaultTypeInternal _ServerSettings_default_instance_;
}  // namespace Models
}  // namespace TournamentAssistantShared
PROTOBUF_NAMESPACE_OPEN
template<> ::TournamentAssistantShared::Models::ServerSettings* Arena::CreateMaybeMessage<::TournamentAssistantShared::Models::ServerSettings>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TournamentAssistantShared {
namespace Models {

// ===================================================================

class ServerSettings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TournamentAssistantShared.Models.ServerSettings) */ {
 public:
  inline ServerSettings() : ServerSettings(nullptr) {}
  virtual ~ServerSettings();
  explicit constexpr ServerSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerSettings(const ServerSettings& from);
  ServerSettings(ServerSettings&& from) noexcept
    : ServerSettings() {
    *this = ::std::move(from);
  }

  inline ServerSettings& operator=(const ServerSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerSettings& operator=(ServerSettings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerSettings* internal_default_instance() {
    return reinterpret_cast<const ServerSettings*>(
               &_ServerSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ServerSettings& a, ServerSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerSettings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerSettings* New() const final {
    return CreateMaybeMessage<ServerSettings>(nullptr);
  }

  ServerSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerSettings& from);
  void MergeFrom(const ServerSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TournamentAssistantShared.Models.ServerSettings";
  }
  protected:
  explicit ServerSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_protobuf_2fModels_2fserver_5fsettings_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamsFieldNumber = 4,
    kBannedModsFieldNumber = 6,
    kServerNameFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kEnableTeamsFieldNumber = 3,
    kScoreUpdateFrequencyFieldNumber = 5,
  };
  // repeated .TournamentAssistantShared.Models.Team teams = 4;
  int teams_size() const;
  private:
  int _internal_teams_size() const;
  public:
  void clear_teams();
  ::TournamentAssistantShared::Models::Team* mutable_teams(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentAssistantShared::Models::Team >*
      mutable_teams();
  private:
  const ::TournamentAssistantShared::Models::Team& _internal_teams(int index) const;
  ::TournamentAssistantShared::Models::Team* _internal_add_teams();
  public:
  const ::TournamentAssistantShared::Models::Team& teams(int index) const;
  ::TournamentAssistantShared::Models::Team* add_teams();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentAssistantShared::Models::Team >&
      teams() const;

  // repeated string banned_mods = 6;
  int banned_mods_size() const;
  private:
  int _internal_banned_mods_size() const;
  public:
  void clear_banned_mods();
  const std::string& banned_mods(int index) const;
  std::string* mutable_banned_mods(int index);
  void set_banned_mods(int index, const std::string& value);
  void set_banned_mods(int index, std::string&& value);
  void set_banned_mods(int index, const char* value);
  void set_banned_mods(int index, const char* value, size_t size);
  std::string* add_banned_mods();
  void add_banned_mods(const std::string& value);
  void add_banned_mods(std::string&& value);
  void add_banned_mods(const char* value);
  void add_banned_mods(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& banned_mods() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_banned_mods();
  private:
  const std::string& _internal_banned_mods(int index) const;
  std::string* _internal_add_banned_mods();
  public:

  // string server_name = 1;
  void clear_server_name();
  const std::string& server_name() const;
  void set_server_name(const std::string& value);
  void set_server_name(std::string&& value);
  void set_server_name(const char* value);
  void set_server_name(const char* value, size_t size);
  std::string* mutable_server_name();
  std::string* release_server_name();
  void set_allocated_server_name(std::string* server_name);
  private:
  const std::string& _internal_server_name() const;
  void _internal_set_server_name(const std::string& value);
  std::string* _internal_mutable_server_name();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // bool enable_teams = 3;
  void clear_enable_teams();
  bool enable_teams() const;
  void set_enable_teams(bool value);
  private:
  bool _internal_enable_teams() const;
  void _internal_set_enable_teams(bool value);
  public:

  // int32 score_update_frequency = 5;
  void clear_score_update_frequency();
  ::PROTOBUF_NAMESPACE_ID::int32 score_update_frequency() const;
  void set_score_update_frequency(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_score_update_frequency() const;
  void _internal_set_score_update_frequency(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TournamentAssistantShared.Models.ServerSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentAssistantShared::Models::Team > teams_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> banned_mods_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  bool enable_teams_;
  ::PROTOBUF_NAMESPACE_ID::int32 score_update_frequency_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protobuf_2fModels_2fserver_5fsettings_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServerSettings

// string server_name = 1;
inline void ServerSettings::clear_server_name() {
  server_name_.ClearToEmpty();
}
inline const std::string& ServerSettings::server_name() const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.ServerSettings.server_name)
  return _internal_server_name();
}
inline void ServerSettings::set_server_name(const std::string& value) {
  _internal_set_server_name(value);
  // @@protoc_insertion_point(field_set:TournamentAssistantShared.Models.ServerSettings.server_name)
}
inline std::string* ServerSettings::mutable_server_name() {
  // @@protoc_insertion_point(field_mutable:TournamentAssistantShared.Models.ServerSettings.server_name)
  return _internal_mutable_server_name();
}
inline const std::string& ServerSettings::_internal_server_name() const {
  return server_name_.Get();
}
inline void ServerSettings::_internal_set_server_name(const std::string& value) {
  
  server_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServerSettings::set_server_name(std::string&& value) {
  
  server_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TournamentAssistantShared.Models.ServerSettings.server_name)
}
inline void ServerSettings::set_server_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TournamentAssistantShared.Models.ServerSettings.server_name)
}
inline void ServerSettings::set_server_name(const char* value,
    size_t size) {
  
  server_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TournamentAssistantShared.Models.ServerSettings.server_name)
}
inline std::string* ServerSettings::_internal_mutable_server_name() {
  
  return server_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServerSettings::release_server_name() {
  // @@protoc_insertion_point(field_release:TournamentAssistantShared.Models.ServerSettings.server_name)
  return server_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerSettings::set_allocated_server_name(std::string* server_name) {
  if (server_name != nullptr) {
    
  } else {
    
  }
  server_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TournamentAssistantShared.Models.ServerSettings.server_name)
}

// string password = 2;
inline void ServerSettings::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& ServerSettings::password() const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.ServerSettings.password)
  return _internal_password();
}
inline void ServerSettings::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:TournamentAssistantShared.Models.ServerSettings.password)
}
inline std::string* ServerSettings::mutable_password() {
  // @@protoc_insertion_point(field_mutable:TournamentAssistantShared.Models.ServerSettings.password)
  return _internal_mutable_password();
}
inline const std::string& ServerSettings::_internal_password() const {
  return password_.Get();
}
inline void ServerSettings::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServerSettings::set_password(std::string&& value) {
  
  password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TournamentAssistantShared.Models.ServerSettings.password)
}
inline void ServerSettings::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TournamentAssistantShared.Models.ServerSettings.password)
}
inline void ServerSettings::set_password(const char* value,
    size_t size) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TournamentAssistantShared.Models.ServerSettings.password)
}
inline std::string* ServerSettings::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServerSettings::release_password() {
  // @@protoc_insertion_point(field_release:TournamentAssistantShared.Models.ServerSettings.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerSettings::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TournamentAssistantShared.Models.ServerSettings.password)
}

// bool enable_teams = 3;
inline void ServerSettings::clear_enable_teams() {
  enable_teams_ = false;
}
inline bool ServerSettings::_internal_enable_teams() const {
  return enable_teams_;
}
inline bool ServerSettings::enable_teams() const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.ServerSettings.enable_teams)
  return _internal_enable_teams();
}
inline void ServerSettings::_internal_set_enable_teams(bool value) {
  
  enable_teams_ = value;
}
inline void ServerSettings::set_enable_teams(bool value) {
  _internal_set_enable_teams(value);
  // @@protoc_insertion_point(field_set:TournamentAssistantShared.Models.ServerSettings.enable_teams)
}

// repeated .TournamentAssistantShared.Models.Team teams = 4;
inline int ServerSettings::_internal_teams_size() const {
  return teams_.size();
}
inline int ServerSettings::teams_size() const {
  return _internal_teams_size();
}
inline ::TournamentAssistantShared::Models::Team* ServerSettings::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:TournamentAssistantShared.Models.ServerSettings.teams)
  return teams_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentAssistantShared::Models::Team >*
ServerSettings::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:TournamentAssistantShared.Models.ServerSettings.teams)
  return &teams_;
}
inline const ::TournamentAssistantShared::Models::Team& ServerSettings::_internal_teams(int index) const {
  return teams_.Get(index);
}
inline const ::TournamentAssistantShared::Models::Team& ServerSettings::teams(int index) const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.ServerSettings.teams)
  return _internal_teams(index);
}
inline ::TournamentAssistantShared::Models::Team* ServerSettings::_internal_add_teams() {
  return teams_.Add();
}
inline ::TournamentAssistantShared::Models::Team* ServerSettings::add_teams() {
  // @@protoc_insertion_point(field_add:TournamentAssistantShared.Models.ServerSettings.teams)
  return _internal_add_teams();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentAssistantShared::Models::Team >&
ServerSettings::teams() const {
  // @@protoc_insertion_point(field_list:TournamentAssistantShared.Models.ServerSettings.teams)
  return teams_;
}

// int32 score_update_frequency = 5;
inline void ServerSettings::clear_score_update_frequency() {
  score_update_frequency_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSettings::_internal_score_update_frequency() const {
  return score_update_frequency_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerSettings::score_update_frequency() const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.ServerSettings.score_update_frequency)
  return _internal_score_update_frequency();
}
inline void ServerSettings::_internal_set_score_update_frequency(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  score_update_frequency_ = value;
}
inline void ServerSettings::set_score_update_frequency(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_score_update_frequency(value);
  // @@protoc_insertion_point(field_set:TournamentAssistantShared.Models.ServerSettings.score_update_frequency)
}

// repeated string banned_mods = 6;
inline int ServerSettings::_internal_banned_mods_size() const {
  return banned_mods_.size();
}
inline int ServerSettings::banned_mods_size() const {
  return _internal_banned_mods_size();
}
inline void ServerSettings::clear_banned_mods() {
  banned_mods_.Clear();
}
inline std::string* ServerSettings::add_banned_mods() {
  // @@protoc_insertion_point(field_add_mutable:TournamentAssistantShared.Models.ServerSettings.banned_mods)
  return _internal_add_banned_mods();
}
inline const std::string& ServerSettings::_internal_banned_mods(int index) const {
  return banned_mods_.Get(index);
}
inline const std::string& ServerSettings::banned_mods(int index) const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.ServerSettings.banned_mods)
  return _internal_banned_mods(index);
}
inline std::string* ServerSettings::mutable_banned_mods(int index) {
  // @@protoc_insertion_point(field_mutable:TournamentAssistantShared.Models.ServerSettings.banned_mods)
  return banned_mods_.Mutable(index);
}
inline void ServerSettings::set_banned_mods(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TournamentAssistantShared.Models.ServerSettings.banned_mods)
  banned_mods_.Mutable(index)->assign(value);
}
inline void ServerSettings::set_banned_mods(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TournamentAssistantShared.Models.ServerSettings.banned_mods)
  banned_mods_.Mutable(index)->assign(std::move(value));
}
inline void ServerSettings::set_banned_mods(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  banned_mods_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TournamentAssistantShared.Models.ServerSettings.banned_mods)
}
inline void ServerSettings::set_banned_mods(int index, const char* value, size_t size) {
  banned_mods_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TournamentAssistantShared.Models.ServerSettings.banned_mods)
}
inline std::string* ServerSettings::_internal_add_banned_mods() {
  return banned_mods_.Add();
}
inline void ServerSettings::add_banned_mods(const std::string& value) {
  banned_mods_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TournamentAssistantShared.Models.ServerSettings.banned_mods)
}
inline void ServerSettings::add_banned_mods(std::string&& value) {
  banned_mods_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TournamentAssistantShared.Models.ServerSettings.banned_mods)
}
inline void ServerSettings::add_banned_mods(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  banned_mods_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TournamentAssistantShared.Models.ServerSettings.banned_mods)
}
inline void ServerSettings::add_banned_mods(const char* value, size_t size) {
  banned_mods_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TournamentAssistantShared.Models.ServerSettings.banned_mods)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ServerSettings::banned_mods() const {
  // @@protoc_insertion_point(field_list:TournamentAssistantShared.Models.ServerSettings.banned_mods)
  return banned_mods_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ServerSettings::mutable_banned_mods() {
  // @@protoc_insertion_point(field_mutable_list:TournamentAssistantShared.Models.ServerSettings.banned_mods)
  return &banned_mods_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Models
}  // namespace TournamentAssistantShared

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protobuf_2fModels_2fserver_5fsettings_2eproto
