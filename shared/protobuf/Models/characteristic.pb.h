// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf/Models/characteristic.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protobuf_2fModels_2fcharacteristic_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protobuf_2fModels_2fcharacteristic_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "protobuf/Models/beatmap_difficulty.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protobuf_2fModels_2fcharacteristic_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protobuf_2fModels_2fcharacteristic_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protobuf_2fModels_2fcharacteristic_2eproto;
namespace TournamentAssistantShared {
namespace Models {
class Characteristic;
class CharacteristicDefaultTypeInternal;
extern CharacteristicDefaultTypeInternal _Characteristic_default_instance_;
}  // namespace Models
}  // namespace TournamentAssistantShared
PROTOBUF_NAMESPACE_OPEN
template<> ::TournamentAssistantShared::Models::Characteristic* Arena::CreateMaybeMessage<::TournamentAssistantShared::Models::Characteristic>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TournamentAssistantShared {
namespace Models {

// ===================================================================

class Characteristic PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TournamentAssistantShared.Models.Characteristic) */ {
 public:
  inline Characteristic() : Characteristic(nullptr) {}
  virtual ~Characteristic();

  Characteristic(const Characteristic& from);
  Characteristic(Characteristic&& from) noexcept
    : Characteristic() {
    *this = ::std::move(from);
  }

  inline Characteristic& operator=(const Characteristic& from) {
    CopyFrom(from);
    return *this;
  }
  inline Characteristic& operator=(Characteristic&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Characteristic& default_instance();

  static inline const Characteristic* internal_default_instance() {
    return reinterpret_cast<const Characteristic*>(
               &_Characteristic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Characteristic& a, Characteristic& b) {
    a.Swap(&b);
  }
  inline void Swap(Characteristic* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Characteristic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Characteristic* New() const final {
    return CreateMaybeMessage<Characteristic>(nullptr);
  }

  Characteristic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Characteristic>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Characteristic& from);
  void MergeFrom(const Characteristic& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Characteristic* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TournamentAssistantShared.Models.Characteristic";
  }
  protected:
  explicit Characteristic(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protobuf_2fModels_2fcharacteristic_2eproto);
    return ::descriptor_table_protobuf_2fModels_2fcharacteristic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDifficultiesFieldNumber = 2,
    kSerializedNameFieldNumber = 1,
  };
  // repeated .TournamentAssistantShared.Models.BeatmapDifficulty difficulties = 2;
  int difficulties_size() const;
  private:
  int _internal_difficulties_size() const;
  public:
  void clear_difficulties();
  private:
  ::TournamentAssistantShared::Models::BeatmapDifficulty _internal_difficulties(int index) const;
  void _internal_add_difficulties(::TournamentAssistantShared::Models::BeatmapDifficulty value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_difficulties();
  public:
  ::TournamentAssistantShared::Models::BeatmapDifficulty difficulties(int index) const;
  void set_difficulties(int index, ::TournamentAssistantShared::Models::BeatmapDifficulty value);
  void add_difficulties(::TournamentAssistantShared::Models::BeatmapDifficulty value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& difficulties() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_difficulties();

  // string serialized_name = 1;
  void clear_serialized_name();
  const std::string& serialized_name() const;
  void set_serialized_name(const std::string& value);
  void set_serialized_name(std::string&& value);
  void set_serialized_name(const char* value);
  void set_serialized_name(const char* value, size_t size);
  std::string* mutable_serialized_name();
  std::string* release_serialized_name();
  void set_allocated_serialized_name(std::string* serialized_name);
  private:
  const std::string& _internal_serialized_name() const;
  void _internal_set_serialized_name(const std::string& value);
  std::string* _internal_mutable_serialized_name();
  public:

  // @@protoc_insertion_point(class_scope:TournamentAssistantShared.Models.Characteristic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> difficulties_;
  mutable std::atomic<int> _difficulties_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serialized_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protobuf_2fModels_2fcharacteristic_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Characteristic

// string serialized_name = 1;
inline void Characteristic::clear_serialized_name() {
  serialized_name_.ClearToEmpty();
}
inline const std::string& Characteristic::serialized_name() const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.Characteristic.serialized_name)
  return _internal_serialized_name();
}
inline void Characteristic::set_serialized_name(const std::string& value) {
  _internal_set_serialized_name(value);
  // @@protoc_insertion_point(field_set:TournamentAssistantShared.Models.Characteristic.serialized_name)
}
inline std::string* Characteristic::mutable_serialized_name() {
  // @@protoc_insertion_point(field_mutable:TournamentAssistantShared.Models.Characteristic.serialized_name)
  return _internal_mutable_serialized_name();
}
inline const std::string& Characteristic::_internal_serialized_name() const {
  return serialized_name_.Get();
}
inline void Characteristic::_internal_set_serialized_name(const std::string& value) {
  
  serialized_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Characteristic::set_serialized_name(std::string&& value) {
  
  serialized_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TournamentAssistantShared.Models.Characteristic.serialized_name)
}
inline void Characteristic::set_serialized_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serialized_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TournamentAssistantShared.Models.Characteristic.serialized_name)
}
inline void Characteristic::set_serialized_name(const char* value,
    size_t size) {
  
  serialized_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TournamentAssistantShared.Models.Characteristic.serialized_name)
}
inline std::string* Characteristic::_internal_mutable_serialized_name() {
  
  return serialized_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Characteristic::release_serialized_name() {
  // @@protoc_insertion_point(field_release:TournamentAssistantShared.Models.Characteristic.serialized_name)
  return serialized_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Characteristic::set_allocated_serialized_name(std::string* serialized_name) {
  if (serialized_name != nullptr) {
    
  } else {
    
  }
  serialized_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serialized_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TournamentAssistantShared.Models.Characteristic.serialized_name)
}

// repeated .TournamentAssistantShared.Models.BeatmapDifficulty difficulties = 2;
inline int Characteristic::_internal_difficulties_size() const {
  return difficulties_.size();
}
inline int Characteristic::difficulties_size() const {
  return _internal_difficulties_size();
}
inline void Characteristic::clear_difficulties() {
  difficulties_.Clear();
}
inline ::TournamentAssistantShared::Models::BeatmapDifficulty Characteristic::_internal_difficulties(int index) const {
  return static_cast< ::TournamentAssistantShared::Models::BeatmapDifficulty >(difficulties_.Get(index));
}
inline ::TournamentAssistantShared::Models::BeatmapDifficulty Characteristic::difficulties(int index) const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.Characteristic.difficulties)
  return _internal_difficulties(index);
}
inline void Characteristic::set_difficulties(int index, ::TournamentAssistantShared::Models::BeatmapDifficulty value) {
  difficulties_.Set(index, value);
  // @@protoc_insertion_point(field_set:TournamentAssistantShared.Models.Characteristic.difficulties)
}
inline void Characteristic::_internal_add_difficulties(::TournamentAssistantShared::Models::BeatmapDifficulty value) {
  difficulties_.Add(value);
}
inline void Characteristic::add_difficulties(::TournamentAssistantShared::Models::BeatmapDifficulty value) {
  // @@protoc_insertion_point(field_add:TournamentAssistantShared.Models.Characteristic.difficulties)
  _internal_add_difficulties(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Characteristic::difficulties() const {
  // @@protoc_insertion_point(field_list:TournamentAssistantShared.Models.Characteristic.difficulties)
  return difficulties_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Characteristic::_internal_mutable_difficulties() {
  return &difficulties_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Characteristic::mutable_difficulties() {
  // @@protoc_insertion_point(field_mutable_list:TournamentAssistantShared.Models.Characteristic.difficulties)
  return _internal_mutable_difficulties();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Models
}  // namespace TournamentAssistantShared

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protobuf_2fModels_2fcharacteristic_2eproto
