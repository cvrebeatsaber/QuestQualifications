// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf/Models/Packets/command.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protobuf_2fModels_2fPackets_2fcommand_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protobuf_2fModels_2fPackets_2fcommand_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protobuf_2fModels_2fPackets_2fcommand_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protobuf_2fModels_2fPackets_2fcommand_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protobuf_2fModels_2fPackets_2fcommand_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_protobuf_2fModels_2fPackets_2fcommand_2eproto_metadata_getter(int index);
namespace TournamentAssistantShared {
namespace Models {
namespace Packets {
class Command;
struct CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
}  // namespace Packets
}  // namespace Models
}  // namespace TournamentAssistantShared
PROTOBUF_NAMESPACE_OPEN
template<> ::TournamentAssistantShared::Models::Packets::Command* Arena::CreateMaybeMessage<::TournamentAssistantShared::Models::Packets::Command>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TournamentAssistantShared {
namespace Models {
namespace Packets {

enum Command_CommandTypes : int {
  Command_CommandTypes_Heartbeat = 0,
  Command_CommandTypes_ReturnToMenu = 1,
  Command_CommandTypes_ScreenOverlay_ShowPng = 2,
  Command_CommandTypes_ScreenOverlay_ShowGreen = 3,
  Command_CommandTypes_DelayTest_Finish = 4,
  Command_CommandTypes_Command_CommandTypes_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Command_CommandTypes_Command_CommandTypes_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Command_CommandTypes_IsValid(int value);
constexpr Command_CommandTypes Command_CommandTypes_CommandTypes_MIN = Command_CommandTypes_Heartbeat;
constexpr Command_CommandTypes Command_CommandTypes_CommandTypes_MAX = Command_CommandTypes_DelayTest_Finish;
constexpr int Command_CommandTypes_CommandTypes_ARRAYSIZE = Command_CommandTypes_CommandTypes_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Command_CommandTypes_descriptor();
template<typename T>
inline const std::string& Command_CommandTypes_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Command_CommandTypes>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Command_CommandTypes_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Command_CommandTypes_descriptor(), enum_t_value);
}
inline bool Command_CommandTypes_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Command_CommandTypes* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Command_CommandTypes>(
    Command_CommandTypes_descriptor(), name, value);
}
// ===================================================================

class Command PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TournamentAssistantShared.Models.Packets.Command) */ {
 public:
  inline Command() : Command(nullptr) {}
  virtual ~Command();
  explicit constexpr Command(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command(const Command& from);
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command& operator=(Command&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Command& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }
  inline void Swap(Command* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const final {
    return CreateMaybeMessage<Command>(nullptr);
  }

  Command* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TournamentAssistantShared.Models.Packets.Command";
  }
  protected:
  explicit Command(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_protobuf_2fModels_2fPackets_2fcommand_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Command_CommandTypes CommandTypes;
  static constexpr CommandTypes Heartbeat =
    Command_CommandTypes_Heartbeat;
  static constexpr CommandTypes ReturnToMenu =
    Command_CommandTypes_ReturnToMenu;
  static constexpr CommandTypes ScreenOverlay_ShowPng =
    Command_CommandTypes_ScreenOverlay_ShowPng;
  static constexpr CommandTypes ScreenOverlay_ShowGreen =
    Command_CommandTypes_ScreenOverlay_ShowGreen;
  static constexpr CommandTypes DelayTest_Finish =
    Command_CommandTypes_DelayTest_Finish;
  static inline bool CommandTypes_IsValid(int value) {
    return Command_CommandTypes_IsValid(value);
  }
  static constexpr CommandTypes CommandTypes_MIN =
    Command_CommandTypes_CommandTypes_MIN;
  static constexpr CommandTypes CommandTypes_MAX =
    Command_CommandTypes_CommandTypes_MAX;
  static constexpr int CommandTypes_ARRAYSIZE =
    Command_CommandTypes_CommandTypes_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CommandTypes_descriptor() {
    return Command_CommandTypes_descriptor();
  }
  template<typename T>
  static inline const std::string& CommandTypes_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CommandTypes>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CommandTypes_Name.");
    return Command_CommandTypes_Name(enum_t_value);
  }
  static inline bool CommandTypes_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CommandTypes* value) {
    return Command_CommandTypes_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCommandTypeFieldNumber = 1,
  };
  // .TournamentAssistantShared.Models.Packets.Command.CommandTypes command_type = 1;
  void clear_command_type();
  ::TournamentAssistantShared::Models::Packets::Command_CommandTypes command_type() const;
  void set_command_type(::TournamentAssistantShared::Models::Packets::Command_CommandTypes value);
  private:
  ::TournamentAssistantShared::Models::Packets::Command_CommandTypes _internal_command_type() const;
  void _internal_set_command_type(::TournamentAssistantShared::Models::Packets::Command_CommandTypes value);
  public:

  // @@protoc_insertion_point(class_scope:TournamentAssistantShared.Models.Packets.Command)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int command_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protobuf_2fModels_2fPackets_2fcommand_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Command

// .TournamentAssistantShared.Models.Packets.Command.CommandTypes command_type = 1;
inline void Command::clear_command_type() {
  command_type_ = 0;
}
inline ::TournamentAssistantShared::Models::Packets::Command_CommandTypes Command::_internal_command_type() const {
  return static_cast< ::TournamentAssistantShared::Models::Packets::Command_CommandTypes >(command_type_);
}
inline ::TournamentAssistantShared::Models::Packets::Command_CommandTypes Command::command_type() const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.Packets.Command.command_type)
  return _internal_command_type();
}
inline void Command::_internal_set_command_type(::TournamentAssistantShared::Models::Packets::Command_CommandTypes value) {
  
  command_type_ = value;
}
inline void Command::set_command_type(::TournamentAssistantShared::Models::Packets::Command_CommandTypes value) {
  _internal_set_command_type(value);
  // @@protoc_insertion_point(field_set:TournamentAssistantShared.Models.Packets.Command.command_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Packets
}  // namespace Models
}  // namespace TournamentAssistantShared

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TournamentAssistantShared::Models::Packets::Command_CommandTypes> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TournamentAssistantShared::Models::Packets::Command_CommandTypes>() {
  return ::TournamentAssistantShared::Models::Packets::Command_CommandTypes_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protobuf_2fModels_2fPackets_2fcommand_2eproto
