// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf/Models/Packets/connect_response.proto

#include "protobuf/Models/Packets/connect_response.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace TournamentAssistantShared {
namespace Models {
namespace Packets {
constexpr ConnectResponse::ConnectResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : response_(nullptr)
  , state_(nullptr)
  , server_version_(0)
  , _oneof_case_{}{}
struct ConnectResponseDefaultTypeInternal {
  constexpr ConnectResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConnectResponseDefaultTypeInternal() {}
  union {
    ConnectResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConnectResponseDefaultTypeInternal _ConnectResponse_default_instance_;
}  // namespace Packets
}  // namespace Models
}  // namespace TournamentAssistantShared
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_protobuf_2fModels_2fPackets_2fconnect_5fresponse_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_protobuf_2fModels_2fPackets_2fconnect_5fresponse_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_protobuf_2fModels_2fPackets_2fconnect_5fresponse_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_protobuf_2fModels_2fPackets_2fconnect_5fresponse_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::Packets::ConnectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::Packets::ConnectResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::Packets::ConnectResponse, response_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::Packets::ConnectResponse, state_),
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::Packets::ConnectResponse, server_version_),
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::Packets::ConnectResponse, user_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::TournamentAssistantShared::Models::Packets::ConnectResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TournamentAssistantShared::Models::Packets::_ConnectResponse_default_instance_),
};

const char descriptor_table_protodef_protobuf_2fModels_2fPackets_2fconnect_5fresponse_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n.protobuf/Models/Packets/connect_respon"
  "se.proto\022(TournamentAssistantShared.Mode"
  "ls.Packets\032&protobuf/Models/Packets/resp"
  "onse.proto\032!protobuf/Models/coordinator."
  "proto\032\034protobuf/Models/player.proto\032\033pro"
  "tobuf/Models/state.proto\"\261\002\n\017ConnectResp"
  "onse\022D\n\010response\030\001 \001(\01322.TournamentAssis"
  "tantShared.Models.Packets.Response\022D\n\013co"
  "ordinator\030\002 \001(\0132-.TournamentAssistantSha"
  "red.Models.CoordinatorH\000\022:\n\006player\030\003 \001(\013"
  "2(.TournamentAssistantShared.Models.Play"
  "erH\000\0226\n\005state\030\004 \001(\0132\'.TournamentAssistan"
  "tShared.Models.State\022\026\n\016server_version\030\005"
  " \001(\005B\006\n\004userB+\252\002(TournamentAssistantShar"
  "ed.Models.Packetsb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_protobuf_2fModels_2fPackets_2fconnect_5fresponse_2eproto_deps[4] = {
  &::descriptor_table_protobuf_2fModels_2fPackets_2fresponse_2eproto,
  &::descriptor_table_protobuf_2fModels_2fcoordinator_2eproto,
  &::descriptor_table_protobuf_2fModels_2fplayer_2eproto,
  &::descriptor_table_protobuf_2fModels_2fstate_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_protobuf_2fModels_2fPackets_2fconnect_5fresponse_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protobuf_2fModels_2fPackets_2fconnect_5fresponse_2eproto = {
  false, false, 585, descriptor_table_protodef_protobuf_2fModels_2fPackets_2fconnect_5fresponse_2eproto, "protobuf/Models/Packets/connect_response.proto", 
  &descriptor_table_protobuf_2fModels_2fPackets_2fconnect_5fresponse_2eproto_once, descriptor_table_protobuf_2fModels_2fPackets_2fconnect_5fresponse_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_protobuf_2fModels_2fPackets_2fconnect_5fresponse_2eproto::offsets,
  file_level_metadata_protobuf_2fModels_2fPackets_2fconnect_5fresponse_2eproto, file_level_enum_descriptors_protobuf_2fModels_2fPackets_2fconnect_5fresponse_2eproto, file_level_service_descriptors_protobuf_2fModels_2fPackets_2fconnect_5fresponse_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_protobuf_2fModels_2fPackets_2fconnect_5fresponse_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protobuf_2fModels_2fPackets_2fconnect_5fresponse_2eproto);
  return descriptor_table_protobuf_2fModels_2fPackets_2fconnect_5fresponse_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_protobuf_2fModels_2fPackets_2fconnect_5fresponse_2eproto(&descriptor_table_protobuf_2fModels_2fPackets_2fconnect_5fresponse_2eproto);
namespace TournamentAssistantShared {
namespace Models {
namespace Packets {

// ===================================================================

class ConnectResponse::_Internal {
 public:
  static const ::TournamentAssistantShared::Models::Packets::Response& response(const ConnectResponse* msg);
  static const ::TournamentAssistantShared::Models::Coordinator& coordinator(const ConnectResponse* msg);
  static const ::TournamentAssistantShared::Models::Player& player(const ConnectResponse* msg);
  static const ::TournamentAssistantShared::Models::State& state(const ConnectResponse* msg);
};

const ::TournamentAssistantShared::Models::Packets::Response&
ConnectResponse::_Internal::response(const ConnectResponse* msg) {
  return *msg->response_;
}
const ::TournamentAssistantShared::Models::Coordinator&
ConnectResponse::_Internal::coordinator(const ConnectResponse* msg) {
  return *msg->user_.coordinator_;
}
const ::TournamentAssistantShared::Models::Player&
ConnectResponse::_Internal::player(const ConnectResponse* msg) {
  return *msg->user_.player_;
}
const ::TournamentAssistantShared::Models::State&
ConnectResponse::_Internal::state(const ConnectResponse* msg) {
  return *msg->state_;
}
void ConnectResponse::clear_response() {
  if (GetArena() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
void ConnectResponse::set_allocated_coordinator(::TournamentAssistantShared::Models::Coordinator* coordinator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_user();
  if (coordinator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coordinator)->GetArena();
    if (message_arena != submessage_arena) {
      coordinator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coordinator, submessage_arena);
    }
    set_has_coordinator();
    user_.coordinator_ = coordinator;
  }
  // @@protoc_insertion_point(field_set_allocated:TournamentAssistantShared.Models.Packets.ConnectResponse.coordinator)
}
void ConnectResponse::clear_coordinator() {
  if (_internal_has_coordinator()) {
    if (GetArena() == nullptr) {
      delete user_.coordinator_;
    }
    clear_has_user();
  }
}
void ConnectResponse::set_allocated_player(::TournamentAssistantShared::Models::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_user();
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player)->GetArena();
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    set_has_player();
    user_.player_ = player;
  }
  // @@protoc_insertion_point(field_set_allocated:TournamentAssistantShared.Models.Packets.ConnectResponse.player)
}
void ConnectResponse::clear_player() {
  if (_internal_has_player()) {
    if (GetArena() == nullptr) {
      delete user_.player_;
    }
    clear_has_user();
  }
}
void ConnectResponse::clear_state() {
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
ConnectResponse::ConnectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TournamentAssistantShared.Models.Packets.ConnectResponse)
}
ConnectResponse::ConnectResponse(const ConnectResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_response()) {
    response_ = new ::TournamentAssistantShared::Models::Packets::Response(*from.response_);
  } else {
    response_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::TournamentAssistantShared::Models::State(*from.state_);
  } else {
    state_ = nullptr;
  }
  server_version_ = from.server_version_;
  clear_has_user();
  switch (from.user_case()) {
    case kCoordinator: {
      _internal_mutable_coordinator()->::TournamentAssistantShared::Models::Coordinator::MergeFrom(from._internal_coordinator());
      break;
    }
    case kPlayer: {
      _internal_mutable_player()->::TournamentAssistantShared::Models::Player::MergeFrom(from._internal_player());
      break;
    }
    case USER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TournamentAssistantShared.Models.Packets.ConnectResponse)
}

void ConnectResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&response_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&server_version_) -
    reinterpret_cast<char*>(&response_)) + sizeof(server_version_));
clear_has_user();
}

ConnectResponse::~ConnectResponse() {
  // @@protoc_insertion_point(destructor:TournamentAssistantShared.Models.Packets.ConnectResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConnectResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete response_;
  if (this != internal_default_instance()) delete state_;
  if (has_user()) {
    clear_user();
  }
}

void ConnectResponse::ArenaDtor(void* object) {
  ConnectResponse* _this = reinterpret_cast< ConnectResponse* >(object);
  (void)_this;
}
void ConnectResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConnectResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConnectResponse::clear_user() {
// @@protoc_insertion_point(one_of_clear_start:TournamentAssistantShared.Models.Packets.ConnectResponse)
  switch (user_case()) {
    case kCoordinator: {
      if (GetArena() == nullptr) {
        delete user_.coordinator_;
      }
      break;
    }
    case kPlayer: {
      if (GetArena() == nullptr) {
        delete user_.player_;
      }
      break;
    }
    case USER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = USER_NOT_SET;
}


void ConnectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:TournamentAssistantShared.Models.Packets.ConnectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  server_version_ = 0;
  clear_user();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TournamentAssistantShared.Models.Packets.Response response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TournamentAssistantShared.Models.Coordinator coordinator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_coordinator(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TournamentAssistantShared.Models.Player player = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TournamentAssistantShared.Models.State state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 server_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          server_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConnectResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TournamentAssistantShared.Models.Packets.ConnectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TournamentAssistantShared.Models.Packets.Response response = 1;
  if (this->has_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::response(this), target, stream);
  }

  // .TournamentAssistantShared.Models.Coordinator coordinator = 2;
  if (_internal_has_coordinator()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::coordinator(this), target, stream);
  }

  // .TournamentAssistantShared.Models.Player player = 3;
  if (_internal_has_player()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::player(this), target, stream);
  }

  // .TournamentAssistantShared.Models.State state = 4;
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::state(this), target, stream);
  }

  // int32 server_version = 5;
  if (this->server_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_server_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TournamentAssistantShared.Models.Packets.ConnectResponse)
  return target;
}

size_t ConnectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TournamentAssistantShared.Models.Packets.ConnectResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TournamentAssistantShared.Models.Packets.Response response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *response_);
  }

  // .TournamentAssistantShared.Models.State state = 4;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  // int32 server_version = 5;
  if (this->server_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_server_version());
  }

  switch (user_case()) {
    // .TournamentAssistantShared.Models.Coordinator coordinator = 2;
    case kCoordinator: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *user_.coordinator_);
      break;
    }
    // .TournamentAssistantShared.Models.Player player = 3;
    case kPlayer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *user_.player_);
      break;
    }
    case USER_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnectResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TournamentAssistantShared.Models.Packets.ConnectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConnectResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TournamentAssistantShared.Models.Packets.ConnectResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TournamentAssistantShared.Models.Packets.ConnectResponse)
    MergeFrom(*source);
  }
}

void ConnectResponse::MergeFrom(const ConnectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TournamentAssistantShared.Models.Packets.ConnectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_response()) {
    _internal_mutable_response()->::TournamentAssistantShared::Models::Packets::Response::MergeFrom(from._internal_response());
  }
  if (from.has_state()) {
    _internal_mutable_state()->::TournamentAssistantShared::Models::State::MergeFrom(from._internal_state());
  }
  if (from.server_version() != 0) {
    _internal_set_server_version(from._internal_server_version());
  }
  switch (from.user_case()) {
    case kCoordinator: {
      _internal_mutable_coordinator()->::TournamentAssistantShared::Models::Coordinator::MergeFrom(from._internal_coordinator());
      break;
    }
    case kPlayer: {
      _internal_mutable_player()->::TournamentAssistantShared::Models::Player::MergeFrom(from._internal_player());
      break;
    }
    case USER_NOT_SET: {
      break;
    }
  }
}

void ConnectResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TournamentAssistantShared.Models.Packets.ConnectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectResponse::CopyFrom(const ConnectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TournamentAssistantShared.Models.Packets.ConnectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectResponse::IsInitialized() const {
  return true;
}

void ConnectResponse::InternalSwap(ConnectResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConnectResponse, server_version_)
      + sizeof(ConnectResponse::server_version_)
      - PROTOBUF_FIELD_OFFSET(ConnectResponse, response_)>(
          reinterpret_cast<char*>(&response_),
          reinterpret_cast<char*>(&other->response_));
  swap(user_, other->user_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Packets
}  // namespace Models
}  // namespace TournamentAssistantShared
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TournamentAssistantShared::Models::Packets::ConnectResponse* Arena::CreateMaybeMessage< ::TournamentAssistantShared::Models::Packets::ConnectResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TournamentAssistantShared::Models::Packets::ConnectResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
