// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf/Models/Packets/song_finished.proto

#include "protobuf/Models/Packets/song_finished.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protobuf_2fModels_2fbeatmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Beatmap_protobuf_2fModels_2fbeatmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_2fModels_2fplayer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Player_protobuf_2fModels_2fplayer_2eproto;
namespace TournamentAssistantShared {
namespace Models {
namespace Packets {
class SongFinishedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SongFinished> _instance;
} _SongFinished_default_instance_;
}  // namespace Packets
}  // namespace Models
}  // namespace TournamentAssistantShared
static void InitDefaultsscc_info_SongFinished_protobuf_2fModels_2fPackets_2fsong_5ffinished_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TournamentAssistantShared::Models::Packets::_SongFinished_default_instance_;
    new (ptr) ::TournamentAssistantShared::Models::Packets::SongFinished();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SongFinished_protobuf_2fModels_2fPackets_2fsong_5ffinished_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SongFinished_protobuf_2fModels_2fPackets_2fsong_5ffinished_2eproto}, {
      &scc_info_Player_protobuf_2fModels_2fplayer_2eproto.base,
      &scc_info_Beatmap_protobuf_2fModels_2fbeatmap_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_protobuf_2fModels_2fPackets_2fsong_5ffinished_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_protobuf_2fModels_2fPackets_2fsong_5ffinished_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_protobuf_2fModels_2fPackets_2fsong_5ffinished_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_protobuf_2fModels_2fPackets_2fsong_5ffinished_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::Packets::SongFinished, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::Packets::SongFinished, user_),
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::Packets::SongFinished, beatmap_),
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::Packets::SongFinished, type_),
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::Packets::SongFinished, score_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::TournamentAssistantShared::Models::Packets::SongFinished)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TournamentAssistantShared::Models::Packets::_SongFinished_default_instance_),
};

const char descriptor_table_protodef_protobuf_2fModels_2fPackets_2fsong_5ffinished_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n+protobuf/Models/Packets/song_finished."
  "proto\022(TournamentAssistantShared.Models."
  "Packets\032\034protobuf/Models/player.proto\032\035p"
  "rotobuf/Models/beatmap.proto\"\232\002\n\014SongFin"
  "ished\0226\n\004user\030\001 \001(\0132(.TournamentAssistan"
  "tShared.Models.Player\022:\n\007beatmap\030\002 \001(\0132)"
  ".TournamentAssistantShared.Models.Beatma"
  "p\022S\n\004type\030\003 \001(\0162E.TournamentAssistantSha"
  "red.Models.Packets.SongFinished.Completi"
  "onType\022\r\n\005score\030\004 \001(\005\"2\n\016CompletionType\022"
  "\n\n\006Failed\020\000\022\n\n\006Passed\020\001\022\010\n\004Quit\020\002B+\252\002(To"
  "urnamentAssistantShared.Models.Packetsb\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_protobuf_2fModels_2fPackets_2fsong_5ffinished_2eproto_deps[2] = {
  &::descriptor_table_protobuf_2fModels_2fbeatmap_2eproto,
  &::descriptor_table_protobuf_2fModels_2fplayer_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_protobuf_2fModels_2fPackets_2fsong_5ffinished_2eproto_sccs[1] = {
  &scc_info_SongFinished_protobuf_2fModels_2fPackets_2fsong_5ffinished_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_protobuf_2fModels_2fPackets_2fsong_5ffinished_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protobuf_2fModels_2fPackets_2fsong_5ffinished_2eproto = {
  false, false, descriptor_table_protodef_protobuf_2fModels_2fPackets_2fsong_5ffinished_2eproto, "protobuf/Models/Packets/song_finished.proto", 486,
  &descriptor_table_protobuf_2fModels_2fPackets_2fsong_5ffinished_2eproto_once, descriptor_table_protobuf_2fModels_2fPackets_2fsong_5ffinished_2eproto_sccs, descriptor_table_protobuf_2fModels_2fPackets_2fsong_5ffinished_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_protobuf_2fModels_2fPackets_2fsong_5ffinished_2eproto::offsets,
  file_level_metadata_protobuf_2fModels_2fPackets_2fsong_5ffinished_2eproto, 1, file_level_enum_descriptors_protobuf_2fModels_2fPackets_2fsong_5ffinished_2eproto, file_level_service_descriptors_protobuf_2fModels_2fPackets_2fsong_5ffinished_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_protobuf_2fModels_2fPackets_2fsong_5ffinished_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_protobuf_2fModels_2fPackets_2fsong_5ffinished_2eproto)), true);
namespace TournamentAssistantShared {
namespace Models {
namespace Packets {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SongFinished_CompletionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protobuf_2fModels_2fPackets_2fsong_5ffinished_2eproto);
  return file_level_enum_descriptors_protobuf_2fModels_2fPackets_2fsong_5ffinished_2eproto[0];
}
bool SongFinished_CompletionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SongFinished_CompletionType SongFinished::Failed;
constexpr SongFinished_CompletionType SongFinished::Passed;
constexpr SongFinished_CompletionType SongFinished::Quit;
constexpr SongFinished_CompletionType SongFinished::CompletionType_MIN;
constexpr SongFinished_CompletionType SongFinished::CompletionType_MAX;
constexpr int SongFinished::CompletionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class SongFinished::_Internal {
 public:
  static const ::TournamentAssistantShared::Models::Player& user(const SongFinished* msg);
  static const ::TournamentAssistantShared::Models::Beatmap& beatmap(const SongFinished* msg);
};

const ::TournamentAssistantShared::Models::Player&
SongFinished::_Internal::user(const SongFinished* msg) {
  return *msg->user_;
}
const ::TournamentAssistantShared::Models::Beatmap&
SongFinished::_Internal::beatmap(const SongFinished* msg) {
  return *msg->beatmap_;
}
void SongFinished::clear_user() {
  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
void SongFinished::clear_beatmap() {
  if (GetArena() == nullptr && beatmap_ != nullptr) {
    delete beatmap_;
  }
  beatmap_ = nullptr;
}
SongFinished::SongFinished(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TournamentAssistantShared.Models.Packets.SongFinished)
}
SongFinished::SongFinished(const SongFinished& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user()) {
    user_ = new ::TournamentAssistantShared::Models::Player(*from.user_);
  } else {
    user_ = nullptr;
  }
  if (from._internal_has_beatmap()) {
    beatmap_ = new ::TournamentAssistantShared::Models::Beatmap(*from.beatmap_);
  } else {
    beatmap_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&type_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:TournamentAssistantShared.Models.Packets.SongFinished)
}

void SongFinished::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SongFinished_protobuf_2fModels_2fPackets_2fsong_5ffinished_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&user_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&user_)) + sizeof(score_));
}

SongFinished::~SongFinished() {
  // @@protoc_insertion_point(destructor:TournamentAssistantShared.Models.Packets.SongFinished)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SongFinished::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete user_;
  if (this != internal_default_instance()) delete beatmap_;
}

void SongFinished::ArenaDtor(void* object) {
  SongFinished* _this = reinterpret_cast< SongFinished* >(object);
  (void)_this;
}
void SongFinished::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SongFinished::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SongFinished& SongFinished::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SongFinished_protobuf_2fModels_2fPackets_2fsong_5ffinished_2eproto.base);
  return *internal_default_instance();
}


void SongFinished::Clear() {
// @@protoc_insertion_point(message_clear_start:TournamentAssistantShared.Models.Packets.SongFinished)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  if (GetArena() == nullptr && beatmap_ != nullptr) {
    delete beatmap_;
  }
  beatmap_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&type_)) + sizeof(score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SongFinished::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TournamentAssistantShared.Models.Player user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TournamentAssistantShared.Models.Beatmap beatmap = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_beatmap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TournamentAssistantShared.Models.Packets.SongFinished.CompletionType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::TournamentAssistantShared::Models::Packets::SongFinished_CompletionType>(val));
        } else goto handle_unusual;
        continue;
      // int32 score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SongFinished::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TournamentAssistantShared.Models.Packets.SongFinished)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TournamentAssistantShared.Models.Player user = 1;
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user(this), target, stream);
  }

  // .TournamentAssistantShared.Models.Beatmap beatmap = 2;
  if (this->has_beatmap()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::beatmap(this), target, stream);
  }

  // .TournamentAssistantShared.Models.Packets.SongFinished.CompletionType type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // int32 score = 4;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TournamentAssistantShared.Models.Packets.SongFinished)
  return target;
}

size_t SongFinished::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TournamentAssistantShared.Models.Packets.SongFinished)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TournamentAssistantShared.Models.Player user = 1;
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  // .TournamentAssistantShared.Models.Beatmap beatmap = 2;
  if (this->has_beatmap()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *beatmap_);
  }

  // .TournamentAssistantShared.Models.Packets.SongFinished.CompletionType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 score = 4;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SongFinished::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TournamentAssistantShared.Models.Packets.SongFinished)
  GOOGLE_DCHECK_NE(&from, this);
  const SongFinished* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SongFinished>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TournamentAssistantShared.Models.Packets.SongFinished)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TournamentAssistantShared.Models.Packets.SongFinished)
    MergeFrom(*source);
  }
}

void SongFinished::MergeFrom(const SongFinished& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TournamentAssistantShared.Models.Packets.SongFinished)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user()) {
    _internal_mutable_user()->::TournamentAssistantShared::Models::Player::MergeFrom(from._internal_user());
  }
  if (from.has_beatmap()) {
    _internal_mutable_beatmap()->::TournamentAssistantShared::Models::Beatmap::MergeFrom(from._internal_beatmap());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
}

void SongFinished::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TournamentAssistantShared.Models.Packets.SongFinished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SongFinished::CopyFrom(const SongFinished& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TournamentAssistantShared.Models.Packets.SongFinished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SongFinished::IsInitialized() const {
  return true;
}

void SongFinished::InternalSwap(SongFinished* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SongFinished, score_)
      + sizeof(SongFinished::score_)
      - PROTOBUF_FIELD_OFFSET(SongFinished, user_)>(
          reinterpret_cast<char*>(&user_),
          reinterpret_cast<char*>(&other->user_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SongFinished::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Packets
}  // namespace Models
}  // namespace TournamentAssistantShared
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TournamentAssistantShared::Models::Packets::SongFinished* Arena::CreateMaybeMessage< ::TournamentAssistantShared::Models::Packets::SongFinished >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TournamentAssistantShared::Models::Packets::SongFinished >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
