// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf/Models/Packets/submit_score.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protobuf_2fModels_2fPackets_2fsubmit_5fscore_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protobuf_2fModels_2fPackets_2fsubmit_5fscore_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "protobuf/Models/score.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protobuf_2fModels_2fPackets_2fsubmit_5fscore_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protobuf_2fModels_2fPackets_2fsubmit_5fscore_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protobuf_2fModels_2fPackets_2fsubmit_5fscore_2eproto;
namespace TournamentAssistantShared {
namespace Models {
namespace Packets {
class SubmitScore;
class SubmitScoreDefaultTypeInternal;
extern SubmitScoreDefaultTypeInternal _SubmitScore_default_instance_;
}  // namespace Packets
}  // namespace Models
}  // namespace TournamentAssistantShared
PROTOBUF_NAMESPACE_OPEN
template<> ::TournamentAssistantShared::Models::Packets::SubmitScore* Arena::CreateMaybeMessage<::TournamentAssistantShared::Models::Packets::SubmitScore>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TournamentAssistantShared {
namespace Models {
namespace Packets {

// ===================================================================

class SubmitScore PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TournamentAssistantShared.Models.Packets.SubmitScore) */ {
 public:
  inline SubmitScore() : SubmitScore(nullptr) {}
  virtual ~SubmitScore();

  SubmitScore(const SubmitScore& from);
  SubmitScore(SubmitScore&& from) noexcept
    : SubmitScore() {
    *this = ::std::move(from);
  }

  inline SubmitScore& operator=(const SubmitScore& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubmitScore& operator=(SubmitScore&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubmitScore& default_instance();

  static inline const SubmitScore* internal_default_instance() {
    return reinterpret_cast<const SubmitScore*>(
               &_SubmitScore_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SubmitScore& a, SubmitScore& b) {
    a.Swap(&b);
  }
  inline void Swap(SubmitScore* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubmitScore* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubmitScore* New() const final {
    return CreateMaybeMessage<SubmitScore>(nullptr);
  }

  SubmitScore* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubmitScore>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubmitScore& from);
  void MergeFrom(const SubmitScore& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubmitScore* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TournamentAssistantShared.Models.Packets.SubmitScore";
  }
  protected:
  explicit SubmitScore(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protobuf_2fModels_2fPackets_2fsubmit_5fscore_2eproto);
    return ::descriptor_table_protobuf_2fModels_2fPackets_2fsubmit_5fscore_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScoreFieldNumber = 1,
  };
  // .TournamentAssistantShared.Models.Score score = 1;
  bool has_score() const;
  private:
  bool _internal_has_score() const;
  public:
  void clear_score();
  const ::TournamentAssistantShared::Models::Score& score() const;
  ::TournamentAssistantShared::Models::Score* release_score();
  ::TournamentAssistantShared::Models::Score* mutable_score();
  void set_allocated_score(::TournamentAssistantShared::Models::Score* score);
  private:
  const ::TournamentAssistantShared::Models::Score& _internal_score() const;
  ::TournamentAssistantShared::Models::Score* _internal_mutable_score();
  public:
  void unsafe_arena_set_allocated_score(
      ::TournamentAssistantShared::Models::Score* score);
  ::TournamentAssistantShared::Models::Score* unsafe_arena_release_score();

  // @@protoc_insertion_point(class_scope:TournamentAssistantShared.Models.Packets.SubmitScore)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::TournamentAssistantShared::Models::Score* score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protobuf_2fModels_2fPackets_2fsubmit_5fscore_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SubmitScore

// .TournamentAssistantShared.Models.Score score = 1;
inline bool SubmitScore::_internal_has_score() const {
  return this != internal_default_instance() && score_ != nullptr;
}
inline bool SubmitScore::has_score() const {
  return _internal_has_score();
}
inline const ::TournamentAssistantShared::Models::Score& SubmitScore::_internal_score() const {
  const ::TournamentAssistantShared::Models::Score* p = score_;
  return p != nullptr ? *p : reinterpret_cast<const ::TournamentAssistantShared::Models::Score&>(
      ::TournamentAssistantShared::Models::_Score_default_instance_);
}
inline const ::TournamentAssistantShared::Models::Score& SubmitScore::score() const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.Packets.SubmitScore.score)
  return _internal_score();
}
inline void SubmitScore::unsafe_arena_set_allocated_score(
    ::TournamentAssistantShared::Models::Score* score) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(score_);
  }
  score_ = score;
  if (score) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TournamentAssistantShared.Models.Packets.SubmitScore.score)
}
inline ::TournamentAssistantShared::Models::Score* SubmitScore::release_score() {
  
  ::TournamentAssistantShared::Models::Score* temp = score_;
  score_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TournamentAssistantShared::Models::Score* SubmitScore::unsafe_arena_release_score() {
  // @@protoc_insertion_point(field_release:TournamentAssistantShared.Models.Packets.SubmitScore.score)
  
  ::TournamentAssistantShared::Models::Score* temp = score_;
  score_ = nullptr;
  return temp;
}
inline ::TournamentAssistantShared::Models::Score* SubmitScore::_internal_mutable_score() {
  
  if (score_ == nullptr) {
    auto* p = CreateMaybeMessage<::TournamentAssistantShared::Models::Score>(GetArena());
    score_ = p;
  }
  return score_;
}
inline ::TournamentAssistantShared::Models::Score* SubmitScore::mutable_score() {
  // @@protoc_insertion_point(field_mutable:TournamentAssistantShared.Models.Packets.SubmitScore.score)
  return _internal_mutable_score();
}
inline void SubmitScore::set_allocated_score(::TournamentAssistantShared::Models::Score* score) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(score_);
  }
  if (score) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(score)->GetArena();
    if (message_arena != submessage_arena) {
      score = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, score, submessage_arena);
    }
    
  } else {
    
  }
  score_ = score;
  // @@protoc_insertion_point(field_set_allocated:TournamentAssistantShared.Models.Packets.SubmitScore.score)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Packets
}  // namespace Models
}  // namespace TournamentAssistantShared

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protobuf_2fModels_2fPackets_2fsubmit_5fscore_2eproto
