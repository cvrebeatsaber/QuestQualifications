// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf/Models/Packets/acknowledgement.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protobuf_2fModels_2fPackets_2facknowledgement_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protobuf_2fModels_2fPackets_2facknowledgement_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protobuf_2fModels_2fPackets_2facknowledgement_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protobuf_2fModels_2fPackets_2facknowledgement_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protobuf_2fModels_2fPackets_2facknowledgement_2eproto;
namespace TournamentAssistantShared {
namespace Models {
namespace Packets {
class Acknowledgement;
class AcknowledgementDefaultTypeInternal;
extern AcknowledgementDefaultTypeInternal _Acknowledgement_default_instance_;
}  // namespace Packets
}  // namespace Models
}  // namespace TournamentAssistantShared
PROTOBUF_NAMESPACE_OPEN
template<> ::TournamentAssistantShared::Models::Packets::Acknowledgement* Arena::CreateMaybeMessage<::TournamentAssistantShared::Models::Packets::Acknowledgement>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TournamentAssistantShared {
namespace Models {
namespace Packets {

enum Acknowledgement_AcknowledgementType : int {
  Acknowledgement_AcknowledgementType_MessageReceived = 0,
  Acknowledgement_AcknowledgementType_FileDownloaded = 1,
  Acknowledgement_AcknowledgementType_Acknowledgement_AcknowledgementType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Acknowledgement_AcknowledgementType_Acknowledgement_AcknowledgementType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Acknowledgement_AcknowledgementType_IsValid(int value);
constexpr Acknowledgement_AcknowledgementType Acknowledgement_AcknowledgementType_AcknowledgementType_MIN = Acknowledgement_AcknowledgementType_MessageReceived;
constexpr Acknowledgement_AcknowledgementType Acknowledgement_AcknowledgementType_AcknowledgementType_MAX = Acknowledgement_AcknowledgementType_FileDownloaded;
constexpr int Acknowledgement_AcknowledgementType_AcknowledgementType_ARRAYSIZE = Acknowledgement_AcknowledgementType_AcknowledgementType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Acknowledgement_AcknowledgementType_descriptor();
template<typename T>
inline const std::string& Acknowledgement_AcknowledgementType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Acknowledgement_AcknowledgementType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Acknowledgement_AcknowledgementType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Acknowledgement_AcknowledgementType_descriptor(), enum_t_value);
}
inline bool Acknowledgement_AcknowledgementType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Acknowledgement_AcknowledgementType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Acknowledgement_AcknowledgementType>(
    Acknowledgement_AcknowledgementType_descriptor(), name, value);
}
// ===================================================================

class Acknowledgement PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TournamentAssistantShared.Models.Packets.Acknowledgement) */ {
 public:
  inline Acknowledgement() : Acknowledgement(nullptr) {}
  virtual ~Acknowledgement();

  Acknowledgement(const Acknowledgement& from);
  Acknowledgement(Acknowledgement&& from) noexcept
    : Acknowledgement() {
    *this = ::std::move(from);
  }

  inline Acknowledgement& operator=(const Acknowledgement& from) {
    CopyFrom(from);
    return *this;
  }
  inline Acknowledgement& operator=(Acknowledgement&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Acknowledgement& default_instance();

  static inline const Acknowledgement* internal_default_instance() {
    return reinterpret_cast<const Acknowledgement*>(
               &_Acknowledgement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Acknowledgement& a, Acknowledgement& b) {
    a.Swap(&b);
  }
  inline void Swap(Acknowledgement* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Acknowledgement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Acknowledgement* New() const final {
    return CreateMaybeMessage<Acknowledgement>(nullptr);
  }

  Acknowledgement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Acknowledgement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Acknowledgement& from);
  void MergeFrom(const Acknowledgement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Acknowledgement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TournamentAssistantShared.Models.Packets.Acknowledgement";
  }
  protected:
  explicit Acknowledgement(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protobuf_2fModels_2fPackets_2facknowledgement_2eproto);
    return ::descriptor_table_protobuf_2fModels_2fPackets_2facknowledgement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Acknowledgement_AcknowledgementType AcknowledgementType;
  static constexpr AcknowledgementType MessageReceived =
    Acknowledgement_AcknowledgementType_MessageReceived;
  static constexpr AcknowledgementType FileDownloaded =
    Acknowledgement_AcknowledgementType_FileDownloaded;
  static inline bool AcknowledgementType_IsValid(int value) {
    return Acknowledgement_AcknowledgementType_IsValid(value);
  }
  static constexpr AcknowledgementType AcknowledgementType_MIN =
    Acknowledgement_AcknowledgementType_AcknowledgementType_MIN;
  static constexpr AcknowledgementType AcknowledgementType_MAX =
    Acknowledgement_AcknowledgementType_AcknowledgementType_MAX;
  static constexpr int AcknowledgementType_ARRAYSIZE =
    Acknowledgement_AcknowledgementType_AcknowledgementType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AcknowledgementType_descriptor() {
    return Acknowledgement_AcknowledgementType_descriptor();
  }
  template<typename T>
  static inline const std::string& AcknowledgementType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AcknowledgementType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AcknowledgementType_Name.");
    return Acknowledgement_AcknowledgementType_Name(enum_t_value);
  }
  static inline bool AcknowledgementType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AcknowledgementType* value) {
    return Acknowledgement_AcknowledgementType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPacketIdFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string packet_id = 1;
  void clear_packet_id();
  const std::string& packet_id() const;
  void set_packet_id(const std::string& value);
  void set_packet_id(std::string&& value);
  void set_packet_id(const char* value);
  void set_packet_id(const char* value, size_t size);
  std::string* mutable_packet_id();
  std::string* release_packet_id();
  void set_allocated_packet_id(std::string* packet_id);
  private:
  const std::string& _internal_packet_id() const;
  void _internal_set_packet_id(const std::string& value);
  std::string* _internal_mutable_packet_id();
  public:

  // .TournamentAssistantShared.Models.Packets.Acknowledgement.AcknowledgementType type = 2;
  void clear_type();
  ::TournamentAssistantShared::Models::Packets::Acknowledgement_AcknowledgementType type() const;
  void set_type(::TournamentAssistantShared::Models::Packets::Acknowledgement_AcknowledgementType value);
  private:
  ::TournamentAssistantShared::Models::Packets::Acknowledgement_AcknowledgementType _internal_type() const;
  void _internal_set_type(::TournamentAssistantShared::Models::Packets::Acknowledgement_AcknowledgementType value);
  public:

  // @@protoc_insertion_point(class_scope:TournamentAssistantShared.Models.Packets.Acknowledgement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr packet_id_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protobuf_2fModels_2fPackets_2facknowledgement_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Acknowledgement

// string packet_id = 1;
inline void Acknowledgement::clear_packet_id() {
  packet_id_.ClearToEmpty();
}
inline const std::string& Acknowledgement::packet_id() const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.Packets.Acknowledgement.packet_id)
  return _internal_packet_id();
}
inline void Acknowledgement::set_packet_id(const std::string& value) {
  _internal_set_packet_id(value);
  // @@protoc_insertion_point(field_set:TournamentAssistantShared.Models.Packets.Acknowledgement.packet_id)
}
inline std::string* Acknowledgement::mutable_packet_id() {
  // @@protoc_insertion_point(field_mutable:TournamentAssistantShared.Models.Packets.Acknowledgement.packet_id)
  return _internal_mutable_packet_id();
}
inline const std::string& Acknowledgement::_internal_packet_id() const {
  return packet_id_.Get();
}
inline void Acknowledgement::_internal_set_packet_id(const std::string& value) {
  
  packet_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Acknowledgement::set_packet_id(std::string&& value) {
  
  packet_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TournamentAssistantShared.Models.Packets.Acknowledgement.packet_id)
}
inline void Acknowledgement::set_packet_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  packet_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TournamentAssistantShared.Models.Packets.Acknowledgement.packet_id)
}
inline void Acknowledgement::set_packet_id(const char* value,
    size_t size) {
  
  packet_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TournamentAssistantShared.Models.Packets.Acknowledgement.packet_id)
}
inline std::string* Acknowledgement::_internal_mutable_packet_id() {
  
  return packet_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Acknowledgement::release_packet_id() {
  // @@protoc_insertion_point(field_release:TournamentAssistantShared.Models.Packets.Acknowledgement.packet_id)
  return packet_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Acknowledgement::set_allocated_packet_id(std::string* packet_id) {
  if (packet_id != nullptr) {
    
  } else {
    
  }
  packet_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), packet_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TournamentAssistantShared.Models.Packets.Acknowledgement.packet_id)
}

// .TournamentAssistantShared.Models.Packets.Acknowledgement.AcknowledgementType type = 2;
inline void Acknowledgement::clear_type() {
  type_ = 0;
}
inline ::TournamentAssistantShared::Models::Packets::Acknowledgement_AcknowledgementType Acknowledgement::_internal_type() const {
  return static_cast< ::TournamentAssistantShared::Models::Packets::Acknowledgement_AcknowledgementType >(type_);
}
inline ::TournamentAssistantShared::Models::Packets::Acknowledgement_AcknowledgementType Acknowledgement::type() const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.Packets.Acknowledgement.type)
  return _internal_type();
}
inline void Acknowledgement::_internal_set_type(::TournamentAssistantShared::Models::Packets::Acknowledgement_AcknowledgementType value) {
  
  type_ = value;
}
inline void Acknowledgement::set_type(::TournamentAssistantShared::Models::Packets::Acknowledgement_AcknowledgementType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:TournamentAssistantShared.Models.Packets.Acknowledgement.type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Packets
}  // namespace Models
}  // namespace TournamentAssistantShared

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TournamentAssistantShared::Models::Packets::Acknowledgement_AcknowledgementType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TournamentAssistantShared::Models::Packets::Acknowledgement_AcknowledgementType>() {
  return ::TournamentAssistantShared::Models::Packets::Acknowledgement_AcknowledgementType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protobuf_2fModels_2fPackets_2facknowledgement_2eproto
