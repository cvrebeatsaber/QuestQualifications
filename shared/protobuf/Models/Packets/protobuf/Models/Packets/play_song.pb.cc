// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf/Models/Packets/play_song.proto

#include "protobuf/Models/Packets/play_song.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protobuf_2fModels_2fgameplay_5fparameters_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GameplayParameters_protobuf_2fModels_2fgameplay_5fparameters_2eproto;
namespace TournamentAssistantShared {
namespace Models {
namespace Packets {
class PlaySongDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlaySong> _instance;
} _PlaySong_default_instance_;
}  // namespace Packets
}  // namespace Models
}  // namespace TournamentAssistantShared
static void InitDefaultsscc_info_PlaySong_protobuf_2fModels_2fPackets_2fplay_5fsong_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TournamentAssistantShared::Models::Packets::_PlaySong_default_instance_;
    new (ptr) ::TournamentAssistantShared::Models::Packets::PlaySong();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlaySong_protobuf_2fModels_2fPackets_2fplay_5fsong_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PlaySong_protobuf_2fModels_2fPackets_2fplay_5fsong_2eproto}, {
      &scc_info_GameplayParameters_protobuf_2fModels_2fgameplay_5fparameters_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_protobuf_2fModels_2fPackets_2fplay_5fsong_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_protobuf_2fModels_2fPackets_2fplay_5fsong_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_protobuf_2fModels_2fPackets_2fplay_5fsong_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_protobuf_2fModels_2fPackets_2fplay_5fsong_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::Packets::PlaySong, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::Packets::PlaySong, gameplay_parameters_),
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::Packets::PlaySong, floating_scoreboard_),
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::Packets::PlaySong, stream_sync_),
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::Packets::PlaySong, disable_pause_),
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::Packets::PlaySong, disable_fail_),
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::Packets::PlaySong, disable_scoresaber_submission_),
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::Packets::PlaySong, show_normal_notes_on_stream_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::TournamentAssistantShared::Models::Packets::PlaySong)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TournamentAssistantShared::Models::Packets::_PlaySong_default_instance_),
};

const char descriptor_table_protodef_protobuf_2fModels_2fPackets_2fplay_5fsong_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'protobuf/Models/Packets/play_song.prot"
  "o\022(TournamentAssistantShared.Models.Pack"
  "ets\032)protobuf/Models/gameplay_parameters"
  ".proto\"\210\002\n\010PlaySong\022Q\n\023gameplay_paramete"
  "rs\030\001 \001(\01324.TournamentAssistantShared.Mod"
  "els.GameplayParameters\022\033\n\023floating_score"
  "board\030\002 \001(\010\022\023\n\013stream_sync\030\003 \001(\010\022\025\n\rdisa"
  "ble_pause\030\004 \001(\010\022\024\n\014disable_fail\030\005 \001(\010\022%\n"
  "\035disable_scoresaber_submission\030\006 \001(\010\022#\n\033"
  "show_normal_notes_on_stream\030\007 \001(\010B+\252\002(To"
  "urnamentAssistantShared.Models.Packetsb\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_protobuf_2fModels_2fPackets_2fplay_5fsong_2eproto_deps[1] = {
  &::descriptor_table_protobuf_2fModels_2fgameplay_5fparameters_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_protobuf_2fModels_2fPackets_2fplay_5fsong_2eproto_sccs[1] = {
  &scc_info_PlaySong_protobuf_2fModels_2fPackets_2fplay_5fsong_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_protobuf_2fModels_2fPackets_2fplay_5fsong_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protobuf_2fModels_2fPackets_2fplay_5fsong_2eproto = {
  false, false, descriptor_table_protodef_protobuf_2fModels_2fPackets_2fplay_5fsong_2eproto, "protobuf/Models/Packets/play_song.proto", 446,
  &descriptor_table_protobuf_2fModels_2fPackets_2fplay_5fsong_2eproto_once, descriptor_table_protobuf_2fModels_2fPackets_2fplay_5fsong_2eproto_sccs, descriptor_table_protobuf_2fModels_2fPackets_2fplay_5fsong_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_protobuf_2fModels_2fPackets_2fplay_5fsong_2eproto::offsets,
  file_level_metadata_protobuf_2fModels_2fPackets_2fplay_5fsong_2eproto, 1, file_level_enum_descriptors_protobuf_2fModels_2fPackets_2fplay_5fsong_2eproto, file_level_service_descriptors_protobuf_2fModels_2fPackets_2fplay_5fsong_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_protobuf_2fModels_2fPackets_2fplay_5fsong_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_protobuf_2fModels_2fPackets_2fplay_5fsong_2eproto)), true);
namespace TournamentAssistantShared {
namespace Models {
namespace Packets {

// ===================================================================

class PlaySong::_Internal {
 public:
  static const ::TournamentAssistantShared::Models::GameplayParameters& gameplay_parameters(const PlaySong* msg);
};

const ::TournamentAssistantShared::Models::GameplayParameters&
PlaySong::_Internal::gameplay_parameters(const PlaySong* msg) {
  return *msg->gameplay_parameters_;
}
void PlaySong::clear_gameplay_parameters() {
  if (GetArena() == nullptr && gameplay_parameters_ != nullptr) {
    delete gameplay_parameters_;
  }
  gameplay_parameters_ = nullptr;
}
PlaySong::PlaySong(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TournamentAssistantShared.Models.Packets.PlaySong)
}
PlaySong::PlaySong(const PlaySong& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gameplay_parameters()) {
    gameplay_parameters_ = new ::TournamentAssistantShared::Models::GameplayParameters(*from.gameplay_parameters_);
  } else {
    gameplay_parameters_ = nullptr;
  }
  ::memcpy(&floating_scoreboard_, &from.floating_scoreboard_,
    static_cast<size_t>(reinterpret_cast<char*>(&show_normal_notes_on_stream_) -
    reinterpret_cast<char*>(&floating_scoreboard_)) + sizeof(show_normal_notes_on_stream_));
  // @@protoc_insertion_point(copy_constructor:TournamentAssistantShared.Models.Packets.PlaySong)
}

void PlaySong::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlaySong_protobuf_2fModels_2fPackets_2fplay_5fsong_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&gameplay_parameters_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&show_normal_notes_on_stream_) -
      reinterpret_cast<char*>(&gameplay_parameters_)) + sizeof(show_normal_notes_on_stream_));
}

PlaySong::~PlaySong() {
  // @@protoc_insertion_point(destructor:TournamentAssistantShared.Models.Packets.PlaySong)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlaySong::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete gameplay_parameters_;
}

void PlaySong::ArenaDtor(void* object) {
  PlaySong* _this = reinterpret_cast< PlaySong* >(object);
  (void)_this;
}
void PlaySong::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlaySong::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlaySong& PlaySong::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlaySong_protobuf_2fModels_2fPackets_2fplay_5fsong_2eproto.base);
  return *internal_default_instance();
}


void PlaySong::Clear() {
// @@protoc_insertion_point(message_clear_start:TournamentAssistantShared.Models.Packets.PlaySong)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && gameplay_parameters_ != nullptr) {
    delete gameplay_parameters_;
  }
  gameplay_parameters_ = nullptr;
  ::memset(&floating_scoreboard_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&show_normal_notes_on_stream_) -
      reinterpret_cast<char*>(&floating_scoreboard_)) + sizeof(show_normal_notes_on_stream_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlaySong::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TournamentAssistantShared.Models.GameplayParameters gameplay_parameters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_gameplay_parameters(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool floating_scoreboard = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          floating_scoreboard_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool stream_sync = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          stream_sync_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool disable_pause = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          disable_pause_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool disable_fail = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          disable_fail_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool disable_scoresaber_submission = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          disable_scoresaber_submission_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool show_normal_notes_on_stream = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          show_normal_notes_on_stream_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlaySong::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TournamentAssistantShared.Models.Packets.PlaySong)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TournamentAssistantShared.Models.GameplayParameters gameplay_parameters = 1;
  if (this->has_gameplay_parameters()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::gameplay_parameters(this), target, stream);
  }

  // bool floating_scoreboard = 2;
  if (this->floating_scoreboard() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_floating_scoreboard(), target);
  }

  // bool stream_sync = 3;
  if (this->stream_sync() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_stream_sync(), target);
  }

  // bool disable_pause = 4;
  if (this->disable_pause() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_disable_pause(), target);
  }

  // bool disable_fail = 5;
  if (this->disable_fail() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_disable_fail(), target);
  }

  // bool disable_scoresaber_submission = 6;
  if (this->disable_scoresaber_submission() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_disable_scoresaber_submission(), target);
  }

  // bool show_normal_notes_on_stream = 7;
  if (this->show_normal_notes_on_stream() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_show_normal_notes_on_stream(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TournamentAssistantShared.Models.Packets.PlaySong)
  return target;
}

size_t PlaySong::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TournamentAssistantShared.Models.Packets.PlaySong)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TournamentAssistantShared.Models.GameplayParameters gameplay_parameters = 1;
  if (this->has_gameplay_parameters()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gameplay_parameters_);
  }

  // bool floating_scoreboard = 2;
  if (this->floating_scoreboard() != 0) {
    total_size += 1 + 1;
  }

  // bool stream_sync = 3;
  if (this->stream_sync() != 0) {
    total_size += 1 + 1;
  }

  // bool disable_pause = 4;
  if (this->disable_pause() != 0) {
    total_size += 1 + 1;
  }

  // bool disable_fail = 5;
  if (this->disable_fail() != 0) {
    total_size += 1 + 1;
  }

  // bool disable_scoresaber_submission = 6;
  if (this->disable_scoresaber_submission() != 0) {
    total_size += 1 + 1;
  }

  // bool show_normal_notes_on_stream = 7;
  if (this->show_normal_notes_on_stream() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlaySong::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TournamentAssistantShared.Models.Packets.PlaySong)
  GOOGLE_DCHECK_NE(&from, this);
  const PlaySong* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlaySong>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TournamentAssistantShared.Models.Packets.PlaySong)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TournamentAssistantShared.Models.Packets.PlaySong)
    MergeFrom(*source);
  }
}

void PlaySong::MergeFrom(const PlaySong& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TournamentAssistantShared.Models.Packets.PlaySong)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_gameplay_parameters()) {
    _internal_mutable_gameplay_parameters()->::TournamentAssistantShared::Models::GameplayParameters::MergeFrom(from._internal_gameplay_parameters());
  }
  if (from.floating_scoreboard() != 0) {
    _internal_set_floating_scoreboard(from._internal_floating_scoreboard());
  }
  if (from.stream_sync() != 0) {
    _internal_set_stream_sync(from._internal_stream_sync());
  }
  if (from.disable_pause() != 0) {
    _internal_set_disable_pause(from._internal_disable_pause());
  }
  if (from.disable_fail() != 0) {
    _internal_set_disable_fail(from._internal_disable_fail());
  }
  if (from.disable_scoresaber_submission() != 0) {
    _internal_set_disable_scoresaber_submission(from._internal_disable_scoresaber_submission());
  }
  if (from.show_normal_notes_on_stream() != 0) {
    _internal_set_show_normal_notes_on_stream(from._internal_show_normal_notes_on_stream());
  }
}

void PlaySong::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TournamentAssistantShared.Models.Packets.PlaySong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaySong::CopyFrom(const PlaySong& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TournamentAssistantShared.Models.Packets.PlaySong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaySong::IsInitialized() const {
  return true;
}

void PlaySong::InternalSwap(PlaySong* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlaySong, show_normal_notes_on_stream_)
      + sizeof(PlaySong::show_normal_notes_on_stream_)
      - PROTOBUF_FIELD_OFFSET(PlaySong, gameplay_parameters_)>(
          reinterpret_cast<char*>(&gameplay_parameters_),
          reinterpret_cast<char*>(&other->gameplay_parameters_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaySong::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Packets
}  // namespace Models
}  // namespace TournamentAssistantShared
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TournamentAssistantShared::Models::Packets::PlaySong* Arena::CreateMaybeMessage< ::TournamentAssistantShared::Models::Packets::PlaySong >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TournamentAssistantShared::Models::Packets::PlaySong >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
