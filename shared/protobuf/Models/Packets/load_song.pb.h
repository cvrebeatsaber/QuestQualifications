// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf/Models/Packets/load_song.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protobuf_2fModels_2fPackets_2fload_5fsong_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protobuf_2fModels_2fPackets_2fload_5fsong_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protobuf_2fModels_2fPackets_2fload_5fsong_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protobuf_2fModels_2fPackets_2fload_5fsong_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protobuf_2fModels_2fPackets_2fload_5fsong_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_protobuf_2fModels_2fPackets_2fload_5fsong_2eproto_metadata_getter(int index);
namespace TournamentAssistantShared {
namespace Models {
namespace Packets {
class LoadSong;
struct LoadSongDefaultTypeInternal;
extern LoadSongDefaultTypeInternal _LoadSong_default_instance_;
}  // namespace Packets
}  // namespace Models
}  // namespace TournamentAssistantShared
PROTOBUF_NAMESPACE_OPEN
template<> ::TournamentAssistantShared::Models::Packets::LoadSong* Arena::CreateMaybeMessage<::TournamentAssistantShared::Models::Packets::LoadSong>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TournamentAssistantShared {
namespace Models {
namespace Packets {

// ===================================================================

class LoadSong PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TournamentAssistantShared.Models.Packets.LoadSong) */ {
 public:
  inline LoadSong() : LoadSong(nullptr) {}
  virtual ~LoadSong();
  explicit constexpr LoadSong(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoadSong(const LoadSong& from);
  LoadSong(LoadSong&& from) noexcept
    : LoadSong() {
    *this = ::std::move(from);
  }

  inline LoadSong& operator=(const LoadSong& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadSong& operator=(LoadSong&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadSong& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoadSong* internal_default_instance() {
    return reinterpret_cast<const LoadSong*>(
               &_LoadSong_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LoadSong& a, LoadSong& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadSong* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadSong* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadSong* New() const final {
    return CreateMaybeMessage<LoadSong>(nullptr);
  }

  LoadSong* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadSong>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadSong& from);
  void MergeFrom(const LoadSong& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadSong* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TournamentAssistantShared.Models.Packets.LoadSong";
  }
  protected:
  explicit LoadSong(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_protobuf_2fModels_2fPackets_2fload_5fsong_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelIdFieldNumber = 1,
    kCustomHostUrlFieldNumber = 2,
  };
  // string level_id = 1;
  void clear_level_id();
  const std::string& level_id() const;
  void set_level_id(const std::string& value);
  void set_level_id(std::string&& value);
  void set_level_id(const char* value);
  void set_level_id(const char* value, size_t size);
  std::string* mutable_level_id();
  std::string* release_level_id();
  void set_allocated_level_id(std::string* level_id);
  private:
  const std::string& _internal_level_id() const;
  void _internal_set_level_id(const std::string& value);
  std::string* _internal_mutable_level_id();
  public:

  // string custom_host_url = 2;
  void clear_custom_host_url();
  const std::string& custom_host_url() const;
  void set_custom_host_url(const std::string& value);
  void set_custom_host_url(std::string&& value);
  void set_custom_host_url(const char* value);
  void set_custom_host_url(const char* value, size_t size);
  std::string* mutable_custom_host_url();
  std::string* release_custom_host_url();
  void set_allocated_custom_host_url(std::string* custom_host_url);
  private:
  const std::string& _internal_custom_host_url() const;
  void _internal_set_custom_host_url(const std::string& value);
  std::string* _internal_mutable_custom_host_url();
  public:

  // @@protoc_insertion_point(class_scope:TournamentAssistantShared.Models.Packets.LoadSong)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr level_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_host_url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protobuf_2fModels_2fPackets_2fload_5fsong_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoadSong

// string level_id = 1;
inline void LoadSong::clear_level_id() {
  level_id_.ClearToEmpty();
}
inline const std::string& LoadSong::level_id() const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.Packets.LoadSong.level_id)
  return _internal_level_id();
}
inline void LoadSong::set_level_id(const std::string& value) {
  _internal_set_level_id(value);
  // @@protoc_insertion_point(field_set:TournamentAssistantShared.Models.Packets.LoadSong.level_id)
}
inline std::string* LoadSong::mutable_level_id() {
  // @@protoc_insertion_point(field_mutable:TournamentAssistantShared.Models.Packets.LoadSong.level_id)
  return _internal_mutable_level_id();
}
inline const std::string& LoadSong::_internal_level_id() const {
  return level_id_.Get();
}
inline void LoadSong::_internal_set_level_id(const std::string& value) {
  
  level_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LoadSong::set_level_id(std::string&& value) {
  
  level_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TournamentAssistantShared.Models.Packets.LoadSong.level_id)
}
inline void LoadSong::set_level_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  level_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TournamentAssistantShared.Models.Packets.LoadSong.level_id)
}
inline void LoadSong::set_level_id(const char* value,
    size_t size) {
  
  level_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TournamentAssistantShared.Models.Packets.LoadSong.level_id)
}
inline std::string* LoadSong::_internal_mutable_level_id() {
  
  return level_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LoadSong::release_level_id() {
  // @@protoc_insertion_point(field_release:TournamentAssistantShared.Models.Packets.LoadSong.level_id)
  return level_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoadSong::set_allocated_level_id(std::string* level_id) {
  if (level_id != nullptr) {
    
  } else {
    
  }
  level_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), level_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TournamentAssistantShared.Models.Packets.LoadSong.level_id)
}

// string custom_host_url = 2;
inline void LoadSong::clear_custom_host_url() {
  custom_host_url_.ClearToEmpty();
}
inline const std::string& LoadSong::custom_host_url() const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.Packets.LoadSong.custom_host_url)
  return _internal_custom_host_url();
}
inline void LoadSong::set_custom_host_url(const std::string& value) {
  _internal_set_custom_host_url(value);
  // @@protoc_insertion_point(field_set:TournamentAssistantShared.Models.Packets.LoadSong.custom_host_url)
}
inline std::string* LoadSong::mutable_custom_host_url() {
  // @@protoc_insertion_point(field_mutable:TournamentAssistantShared.Models.Packets.LoadSong.custom_host_url)
  return _internal_mutable_custom_host_url();
}
inline const std::string& LoadSong::_internal_custom_host_url() const {
  return custom_host_url_.Get();
}
inline void LoadSong::_internal_set_custom_host_url(const std::string& value) {
  
  custom_host_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LoadSong::set_custom_host_url(std::string&& value) {
  
  custom_host_url_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TournamentAssistantShared.Models.Packets.LoadSong.custom_host_url)
}
inline void LoadSong::set_custom_host_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  custom_host_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TournamentAssistantShared.Models.Packets.LoadSong.custom_host_url)
}
inline void LoadSong::set_custom_host_url(const char* value,
    size_t size) {
  
  custom_host_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TournamentAssistantShared.Models.Packets.LoadSong.custom_host_url)
}
inline std::string* LoadSong::_internal_mutable_custom_host_url() {
  
  return custom_host_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LoadSong::release_custom_host_url() {
  // @@protoc_insertion_point(field_release:TournamentAssistantShared.Models.Packets.LoadSong.custom_host_url)
  return custom_host_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoadSong::set_allocated_custom_host_url(std::string* custom_host_url) {
  if (custom_host_url != nullptr) {
    
  } else {
    
  }
  custom_host_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), custom_host_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TournamentAssistantShared.Models.Packets.LoadSong.custom_host_url)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Packets
}  // namespace Models
}  // namespace TournamentAssistantShared

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protobuf_2fModels_2fPackets_2fload_5fsong_2eproto
