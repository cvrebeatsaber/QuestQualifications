// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf/Models/preview_beatmap_level.proto

#include "protobuf/Models/preview_beatmap_level.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protobuf_2fModels_2fcharacteristic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Characteristic_protobuf_2fModels_2fcharacteristic_2eproto;
namespace TournamentAssistantShared {
namespace Models {
class PreviewBeatmapLevelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PreviewBeatmapLevel> _instance;
} _PreviewBeatmapLevel_default_instance_;
}  // namespace Models
}  // namespace TournamentAssistantShared
static void InitDefaultsscc_info_PreviewBeatmapLevel_protobuf_2fModels_2fpreview_5fbeatmap_5flevel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TournamentAssistantShared::Models::_PreviewBeatmapLevel_default_instance_;
    new (ptr) ::TournamentAssistantShared::Models::PreviewBeatmapLevel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PreviewBeatmapLevel_protobuf_2fModels_2fpreview_5fbeatmap_5flevel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PreviewBeatmapLevel_protobuf_2fModels_2fpreview_5fbeatmap_5flevel_2eproto}, {
      &scc_info_Characteristic_protobuf_2fModels_2fcharacteristic_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_protobuf_2fModels_2fpreview_5fbeatmap_5flevel_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_protobuf_2fModels_2fpreview_5fbeatmap_5flevel_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_protobuf_2fModels_2fpreview_5fbeatmap_5flevel_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_protobuf_2fModels_2fpreview_5fbeatmap_5flevel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::PreviewBeatmapLevel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::PreviewBeatmapLevel, level_id_),
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::PreviewBeatmapLevel, name_),
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::PreviewBeatmapLevel, characteristics_),
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::PreviewBeatmapLevel, loaded_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::TournamentAssistantShared::Models::PreviewBeatmapLevel)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TournamentAssistantShared::Models::_PreviewBeatmapLevel_default_instance_),
};

const char descriptor_table_protodef_protobuf_2fModels_2fpreview_5fbeatmap_5flevel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n+protobuf/Models/preview_beatmap_level."
  "proto\022 TournamentAssistantShared.Models\032"
  "$protobuf/Models/characteristic.proto\"\220\001"
  "\n\023PreviewBeatmapLevel\022\020\n\010level_id\030\001 \001(\t\022"
  "\014\n\004name\030\002 \001(\t\022I\n\017characteristics\030\003 \003(\01320"
  ".TournamentAssistantShared.Models.Charac"
  "teristic\022\016\n\006loaded\030\004 \001(\010B#\252\002 TournamentA"
  "ssistantShared.Modelsb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_protobuf_2fModels_2fpreview_5fbeatmap_5flevel_2eproto_deps[1] = {
  &::descriptor_table_protobuf_2fModels_2fcharacteristic_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_protobuf_2fModels_2fpreview_5fbeatmap_5flevel_2eproto_sccs[1] = {
  &scc_info_PreviewBeatmapLevel_protobuf_2fModels_2fpreview_5fbeatmap_5flevel_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_protobuf_2fModels_2fpreview_5fbeatmap_5flevel_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protobuf_2fModels_2fpreview_5fbeatmap_5flevel_2eproto = {
  false, false, descriptor_table_protodef_protobuf_2fModels_2fpreview_5fbeatmap_5flevel_2eproto, "protobuf/Models/preview_beatmap_level.proto", 309,
  &descriptor_table_protobuf_2fModels_2fpreview_5fbeatmap_5flevel_2eproto_once, descriptor_table_protobuf_2fModels_2fpreview_5fbeatmap_5flevel_2eproto_sccs, descriptor_table_protobuf_2fModels_2fpreview_5fbeatmap_5flevel_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_protobuf_2fModels_2fpreview_5fbeatmap_5flevel_2eproto::offsets,
  file_level_metadata_protobuf_2fModels_2fpreview_5fbeatmap_5flevel_2eproto, 1, file_level_enum_descriptors_protobuf_2fModels_2fpreview_5fbeatmap_5flevel_2eproto, file_level_service_descriptors_protobuf_2fModels_2fpreview_5fbeatmap_5flevel_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_protobuf_2fModels_2fpreview_5fbeatmap_5flevel_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_protobuf_2fModels_2fpreview_5fbeatmap_5flevel_2eproto)), true);
namespace TournamentAssistantShared {
namespace Models {

// ===================================================================

class PreviewBeatmapLevel::_Internal {
 public:
};

void PreviewBeatmapLevel::clear_characteristics() {
  characteristics_.Clear();
}
PreviewBeatmapLevel::PreviewBeatmapLevel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  characteristics_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TournamentAssistantShared.Models.PreviewBeatmapLevel)
}
PreviewBeatmapLevel::PreviewBeatmapLevel(const PreviewBeatmapLevel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      characteristics_(from.characteristics_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  level_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_level_id().empty()) {
    level_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_level_id(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  loaded_ = from.loaded_;
  // @@protoc_insertion_point(copy_constructor:TournamentAssistantShared.Models.PreviewBeatmapLevel)
}

void PreviewBeatmapLevel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PreviewBeatmapLevel_protobuf_2fModels_2fpreview_5fbeatmap_5flevel_2eproto.base);
  level_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  loaded_ = false;
}

PreviewBeatmapLevel::~PreviewBeatmapLevel() {
  // @@protoc_insertion_point(destructor:TournamentAssistantShared.Models.PreviewBeatmapLevel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PreviewBeatmapLevel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  level_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PreviewBeatmapLevel::ArenaDtor(void* object) {
  PreviewBeatmapLevel* _this = reinterpret_cast< PreviewBeatmapLevel* >(object);
  (void)_this;
}
void PreviewBeatmapLevel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PreviewBeatmapLevel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PreviewBeatmapLevel& PreviewBeatmapLevel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PreviewBeatmapLevel_protobuf_2fModels_2fpreview_5fbeatmap_5flevel_2eproto.base);
  return *internal_default_instance();
}


void PreviewBeatmapLevel::Clear() {
// @@protoc_insertion_point(message_clear_start:TournamentAssistantShared.Models.PreviewBeatmapLevel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  characteristics_.Clear();
  level_id_.ClearToEmpty();
  name_.ClearToEmpty();
  loaded_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PreviewBeatmapLevel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string level_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_level_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TournamentAssistantShared.Models.PreviewBeatmapLevel.level_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TournamentAssistantShared.Models.PreviewBeatmapLevel.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TournamentAssistantShared.Models.Characteristic characteristics = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_characteristics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // bool loaded = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          loaded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PreviewBeatmapLevel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TournamentAssistantShared.Models.PreviewBeatmapLevel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string level_id = 1;
  if (this->level_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_level_id().data(), static_cast<int>(this->_internal_level_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TournamentAssistantShared.Models.PreviewBeatmapLevel.level_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_level_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TournamentAssistantShared.Models.PreviewBeatmapLevel.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated .TournamentAssistantShared.Models.Characteristic characteristics = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_characteristics_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_characteristics(i), target, stream);
  }

  // bool loaded = 4;
  if (this->loaded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_loaded(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TournamentAssistantShared.Models.PreviewBeatmapLevel)
  return target;
}

size_t PreviewBeatmapLevel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TournamentAssistantShared.Models.PreviewBeatmapLevel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TournamentAssistantShared.Models.Characteristic characteristics = 3;
  total_size += 1UL * this->_internal_characteristics_size();
  for (const auto& msg : this->characteristics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string level_id = 1;
  if (this->level_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_level_id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bool loaded = 4;
  if (this->loaded() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PreviewBeatmapLevel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TournamentAssistantShared.Models.PreviewBeatmapLevel)
  GOOGLE_DCHECK_NE(&from, this);
  const PreviewBeatmapLevel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PreviewBeatmapLevel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TournamentAssistantShared.Models.PreviewBeatmapLevel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TournamentAssistantShared.Models.PreviewBeatmapLevel)
    MergeFrom(*source);
  }
}

void PreviewBeatmapLevel::MergeFrom(const PreviewBeatmapLevel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TournamentAssistantShared.Models.PreviewBeatmapLevel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  characteristics_.MergeFrom(from.characteristics_);
  if (from.level_id().size() > 0) {
    _internal_set_level_id(from._internal_level_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.loaded() != 0) {
    _internal_set_loaded(from._internal_loaded());
  }
}

void PreviewBeatmapLevel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TournamentAssistantShared.Models.PreviewBeatmapLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreviewBeatmapLevel::CopyFrom(const PreviewBeatmapLevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TournamentAssistantShared.Models.PreviewBeatmapLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreviewBeatmapLevel::IsInitialized() const {
  return true;
}

void PreviewBeatmapLevel::InternalSwap(PreviewBeatmapLevel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  characteristics_.InternalSwap(&other->characteristics_);
  level_id_.Swap(&other->level_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(loaded_, other->loaded_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PreviewBeatmapLevel::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Models
}  // namespace TournamentAssistantShared
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TournamentAssistantShared::Models::PreviewBeatmapLevel* Arena::CreateMaybeMessage< ::TournamentAssistantShared::Models::PreviewBeatmapLevel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TournamentAssistantShared::Models::PreviewBeatmapLevel >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
