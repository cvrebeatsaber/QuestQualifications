// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf/Models/player_specific_settings.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protobuf_2fModels_2fplayer_5fspecific_5fsettings_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protobuf_2fModels_2fplayer_5fspecific_5fsettings_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protobuf_2fModels_2fplayer_5fspecific_5fsettings_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protobuf_2fModels_2fplayer_5fspecific_5fsettings_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protobuf_2fModels_2fplayer_5fspecific_5fsettings_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_protobuf_2fModels_2fplayer_5fspecific_5fsettings_2eproto_metadata_getter(int index);
namespace TournamentAssistantShared {
namespace Models {
class PlayerSpecificSettings;
struct PlayerSpecificSettingsDefaultTypeInternal;
extern PlayerSpecificSettingsDefaultTypeInternal _PlayerSpecificSettings_default_instance_;
}  // namespace Models
}  // namespace TournamentAssistantShared
PROTOBUF_NAMESPACE_OPEN
template<> ::TournamentAssistantShared::Models::PlayerSpecificSettings* Arena::CreateMaybeMessage<::TournamentAssistantShared::Models::PlayerSpecificSettings>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TournamentAssistantShared {
namespace Models {

enum PlayerSpecificSettings_PlayerOptions : int {
  PlayerSpecificSettings_PlayerOptions_None = 0,
  PlayerSpecificSettings_PlayerOptions_LeftHanded = 1,
  PlayerSpecificSettings_PlayerOptions_StaticLights = 2,
  PlayerSpecificSettings_PlayerOptions_NoHud = 4,
  PlayerSpecificSettings_PlayerOptions_AdvancedHud = 8,
  PlayerSpecificSettings_PlayerOptions_ReduceDebris = 16,
  PlayerSpecificSettings_PlayerOptions_AutoPlayerHeight = 32,
  PlayerSpecificSettings_PlayerOptions_NoFailEffects = 64,
  PlayerSpecificSettings_PlayerOptions_AutoRestart = 128,
  PlayerSpecificSettings_PlayerOptions_HideNoteSpawnEffect = 256,
  PlayerSpecificSettings_PlayerOptions_AdaptiveSfx = 512,
  PlayerSpecificSettings_PlayerOptions_PlayerSpecificSettings_PlayerOptions_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PlayerSpecificSettings_PlayerOptions_PlayerSpecificSettings_PlayerOptions_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PlayerSpecificSettings_PlayerOptions_IsValid(int value);
constexpr PlayerSpecificSettings_PlayerOptions PlayerSpecificSettings_PlayerOptions_PlayerOptions_MIN = PlayerSpecificSettings_PlayerOptions_None;
constexpr PlayerSpecificSettings_PlayerOptions PlayerSpecificSettings_PlayerOptions_PlayerOptions_MAX = PlayerSpecificSettings_PlayerOptions_AdaptiveSfx;
constexpr int PlayerSpecificSettings_PlayerOptions_PlayerOptions_ARRAYSIZE = PlayerSpecificSettings_PlayerOptions_PlayerOptions_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayerSpecificSettings_PlayerOptions_descriptor();
template<typename T>
inline const std::string& PlayerSpecificSettings_PlayerOptions_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PlayerSpecificSettings_PlayerOptions>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PlayerSpecificSettings_PlayerOptions_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PlayerSpecificSettings_PlayerOptions_descriptor(), enum_t_value);
}
inline bool PlayerSpecificSettings_PlayerOptions_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PlayerSpecificSettings_PlayerOptions* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PlayerSpecificSettings_PlayerOptions>(
    PlayerSpecificSettings_PlayerOptions_descriptor(), name, value);
}
// ===================================================================

class PlayerSpecificSettings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TournamentAssistantShared.Models.PlayerSpecificSettings) */ {
 public:
  inline PlayerSpecificSettings() : PlayerSpecificSettings(nullptr) {}
  virtual ~PlayerSpecificSettings();
  explicit constexpr PlayerSpecificSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerSpecificSettings(const PlayerSpecificSettings& from);
  PlayerSpecificSettings(PlayerSpecificSettings&& from) noexcept
    : PlayerSpecificSettings() {
    *this = ::std::move(from);
  }

  inline PlayerSpecificSettings& operator=(const PlayerSpecificSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerSpecificSettings& operator=(PlayerSpecificSettings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerSpecificSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerSpecificSettings* internal_default_instance() {
    return reinterpret_cast<const PlayerSpecificSettings*>(
               &_PlayerSpecificSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PlayerSpecificSettings& a, PlayerSpecificSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerSpecificSettings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerSpecificSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerSpecificSettings* New() const final {
    return CreateMaybeMessage<PlayerSpecificSettings>(nullptr);
  }

  PlayerSpecificSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerSpecificSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerSpecificSettings& from);
  void MergeFrom(const PlayerSpecificSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerSpecificSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TournamentAssistantShared.Models.PlayerSpecificSettings";
  }
  protected:
  explicit PlayerSpecificSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_protobuf_2fModels_2fplayer_5fspecific_5fsettings_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef PlayerSpecificSettings_PlayerOptions PlayerOptions;
  static constexpr PlayerOptions None =
    PlayerSpecificSettings_PlayerOptions_None;
  static constexpr PlayerOptions LeftHanded =
    PlayerSpecificSettings_PlayerOptions_LeftHanded;
  static constexpr PlayerOptions StaticLights =
    PlayerSpecificSettings_PlayerOptions_StaticLights;
  static constexpr PlayerOptions NoHud =
    PlayerSpecificSettings_PlayerOptions_NoHud;
  static constexpr PlayerOptions AdvancedHud =
    PlayerSpecificSettings_PlayerOptions_AdvancedHud;
  static constexpr PlayerOptions ReduceDebris =
    PlayerSpecificSettings_PlayerOptions_ReduceDebris;
  static constexpr PlayerOptions AutoPlayerHeight =
    PlayerSpecificSettings_PlayerOptions_AutoPlayerHeight;
  static constexpr PlayerOptions NoFailEffects =
    PlayerSpecificSettings_PlayerOptions_NoFailEffects;
  static constexpr PlayerOptions AutoRestart =
    PlayerSpecificSettings_PlayerOptions_AutoRestart;
  static constexpr PlayerOptions HideNoteSpawnEffect =
    PlayerSpecificSettings_PlayerOptions_HideNoteSpawnEffect;
  static constexpr PlayerOptions AdaptiveSfx =
    PlayerSpecificSettings_PlayerOptions_AdaptiveSfx;
  static inline bool PlayerOptions_IsValid(int value) {
    return PlayerSpecificSettings_PlayerOptions_IsValid(value);
  }
  static constexpr PlayerOptions PlayerOptions_MIN =
    PlayerSpecificSettings_PlayerOptions_PlayerOptions_MIN;
  static constexpr PlayerOptions PlayerOptions_MAX =
    PlayerSpecificSettings_PlayerOptions_PlayerOptions_MAX;
  static constexpr int PlayerOptions_ARRAYSIZE =
    PlayerSpecificSettings_PlayerOptions_PlayerOptions_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PlayerOptions_descriptor() {
    return PlayerSpecificSettings_PlayerOptions_descriptor();
  }
  template<typename T>
  static inline const std::string& PlayerOptions_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PlayerOptions>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PlayerOptions_Name.");
    return PlayerSpecificSettings_PlayerOptions_Name(enum_t_value);
  }
  static inline bool PlayerOptions_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PlayerOptions* value) {
    return PlayerSpecificSettings_PlayerOptions_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerHeightFieldNumber = 1,
    kSfxVolumeFieldNumber = 2,
    kSaberTrailIntensityFieldNumber = 3,
    kNoteJumpStartBeatOffsetFieldNumber = 4,
    kOptionsFieldNumber = 5,
  };
  // float player_height = 1;
  void clear_player_height();
  float player_height() const;
  void set_player_height(float value);
  private:
  float _internal_player_height() const;
  void _internal_set_player_height(float value);
  public:

  // float sfx_volume = 2;
  void clear_sfx_volume();
  float sfx_volume() const;
  void set_sfx_volume(float value);
  private:
  float _internal_sfx_volume() const;
  void _internal_set_sfx_volume(float value);
  public:

  // float saber_trail_intensity = 3;
  void clear_saber_trail_intensity();
  float saber_trail_intensity() const;
  void set_saber_trail_intensity(float value);
  private:
  float _internal_saber_trail_intensity() const;
  void _internal_set_saber_trail_intensity(float value);
  public:

  // float note_jump_start_beat_offset = 4;
  void clear_note_jump_start_beat_offset();
  float note_jump_start_beat_offset() const;
  void set_note_jump_start_beat_offset(float value);
  private:
  float _internal_note_jump_start_beat_offset() const;
  void _internal_set_note_jump_start_beat_offset(float value);
  public:

  // .TournamentAssistantShared.Models.PlayerSpecificSettings.PlayerOptions options = 5;
  void clear_options();
  ::TournamentAssistantShared::Models::PlayerSpecificSettings_PlayerOptions options() const;
  void set_options(::TournamentAssistantShared::Models::PlayerSpecificSettings_PlayerOptions value);
  private:
  ::TournamentAssistantShared::Models::PlayerSpecificSettings_PlayerOptions _internal_options() const;
  void _internal_set_options(::TournamentAssistantShared::Models::PlayerSpecificSettings_PlayerOptions value);
  public:

  // @@protoc_insertion_point(class_scope:TournamentAssistantShared.Models.PlayerSpecificSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float player_height_;
  float sfx_volume_;
  float saber_trail_intensity_;
  float note_jump_start_beat_offset_;
  int options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protobuf_2fModels_2fplayer_5fspecific_5fsettings_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlayerSpecificSettings

// float player_height = 1;
inline void PlayerSpecificSettings::clear_player_height() {
  player_height_ = 0;
}
inline float PlayerSpecificSettings::_internal_player_height() const {
  return player_height_;
}
inline float PlayerSpecificSettings::player_height() const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.PlayerSpecificSettings.player_height)
  return _internal_player_height();
}
inline void PlayerSpecificSettings::_internal_set_player_height(float value) {
  
  player_height_ = value;
}
inline void PlayerSpecificSettings::set_player_height(float value) {
  _internal_set_player_height(value);
  // @@protoc_insertion_point(field_set:TournamentAssistantShared.Models.PlayerSpecificSettings.player_height)
}

// float sfx_volume = 2;
inline void PlayerSpecificSettings::clear_sfx_volume() {
  sfx_volume_ = 0;
}
inline float PlayerSpecificSettings::_internal_sfx_volume() const {
  return sfx_volume_;
}
inline float PlayerSpecificSettings::sfx_volume() const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.PlayerSpecificSettings.sfx_volume)
  return _internal_sfx_volume();
}
inline void PlayerSpecificSettings::_internal_set_sfx_volume(float value) {
  
  sfx_volume_ = value;
}
inline void PlayerSpecificSettings::set_sfx_volume(float value) {
  _internal_set_sfx_volume(value);
  // @@protoc_insertion_point(field_set:TournamentAssistantShared.Models.PlayerSpecificSettings.sfx_volume)
}

// float saber_trail_intensity = 3;
inline void PlayerSpecificSettings::clear_saber_trail_intensity() {
  saber_trail_intensity_ = 0;
}
inline float PlayerSpecificSettings::_internal_saber_trail_intensity() const {
  return saber_trail_intensity_;
}
inline float PlayerSpecificSettings::saber_trail_intensity() const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.PlayerSpecificSettings.saber_trail_intensity)
  return _internal_saber_trail_intensity();
}
inline void PlayerSpecificSettings::_internal_set_saber_trail_intensity(float value) {
  
  saber_trail_intensity_ = value;
}
inline void PlayerSpecificSettings::set_saber_trail_intensity(float value) {
  _internal_set_saber_trail_intensity(value);
  // @@protoc_insertion_point(field_set:TournamentAssistantShared.Models.PlayerSpecificSettings.saber_trail_intensity)
}

// float note_jump_start_beat_offset = 4;
inline void PlayerSpecificSettings::clear_note_jump_start_beat_offset() {
  note_jump_start_beat_offset_ = 0;
}
inline float PlayerSpecificSettings::_internal_note_jump_start_beat_offset() const {
  return note_jump_start_beat_offset_;
}
inline float PlayerSpecificSettings::note_jump_start_beat_offset() const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.PlayerSpecificSettings.note_jump_start_beat_offset)
  return _internal_note_jump_start_beat_offset();
}
inline void PlayerSpecificSettings::_internal_set_note_jump_start_beat_offset(float value) {
  
  note_jump_start_beat_offset_ = value;
}
inline void PlayerSpecificSettings::set_note_jump_start_beat_offset(float value) {
  _internal_set_note_jump_start_beat_offset(value);
  // @@protoc_insertion_point(field_set:TournamentAssistantShared.Models.PlayerSpecificSettings.note_jump_start_beat_offset)
}

// .TournamentAssistantShared.Models.PlayerSpecificSettings.PlayerOptions options = 5;
inline void PlayerSpecificSettings::clear_options() {
  options_ = 0;
}
inline ::TournamentAssistantShared::Models::PlayerSpecificSettings_PlayerOptions PlayerSpecificSettings::_internal_options() const {
  return static_cast< ::TournamentAssistantShared::Models::PlayerSpecificSettings_PlayerOptions >(options_);
}
inline ::TournamentAssistantShared::Models::PlayerSpecificSettings_PlayerOptions PlayerSpecificSettings::options() const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.PlayerSpecificSettings.options)
  return _internal_options();
}
inline void PlayerSpecificSettings::_internal_set_options(::TournamentAssistantShared::Models::PlayerSpecificSettings_PlayerOptions value) {
  
  options_ = value;
}
inline void PlayerSpecificSettings::set_options(::TournamentAssistantShared::Models::PlayerSpecificSettings_PlayerOptions value) {
  _internal_set_options(value);
  // @@protoc_insertion_point(field_set:TournamentAssistantShared.Models.PlayerSpecificSettings.options)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Models
}  // namespace TournamentAssistantShared

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TournamentAssistantShared::Models::PlayerSpecificSettings_PlayerOptions> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TournamentAssistantShared::Models::PlayerSpecificSettings_PlayerOptions>() {
  return ::TournamentAssistantShared::Models::PlayerSpecificSettings_PlayerOptions_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protobuf_2fModels_2fplayer_5fspecific_5fsettings_2eproto
