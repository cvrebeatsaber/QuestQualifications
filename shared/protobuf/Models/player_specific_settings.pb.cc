// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf/Models/player_specific_settings.proto

#include "protobuf/Models/player_specific_settings.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace TournamentAssistantShared {
namespace Models {
constexpr PlayerSpecificSettings::PlayerSpecificSettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_height_(0)
  , sfx_volume_(0)
  , saber_trail_intensity_(0)
  , note_jump_start_beat_offset_(0)
  , options_(0)
{}
struct PlayerSpecificSettingsDefaultTypeInternal {
  constexpr PlayerSpecificSettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlayerSpecificSettingsDefaultTypeInternal() {}
  union {
    PlayerSpecificSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlayerSpecificSettingsDefaultTypeInternal _PlayerSpecificSettings_default_instance_;
}  // namespace Models
}  // namespace TournamentAssistantShared
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_protobuf_2fModels_2fplayer_5fspecific_5fsettings_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_protobuf_2fModels_2fplayer_5fspecific_5fsettings_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_protobuf_2fModels_2fplayer_5fspecific_5fsettings_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_protobuf_2fModels_2fplayer_5fspecific_5fsettings_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::PlayerSpecificSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::PlayerSpecificSettings, player_height_),
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::PlayerSpecificSettings, sfx_volume_),
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::PlayerSpecificSettings, saber_trail_intensity_),
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::PlayerSpecificSettings, note_jump_start_beat_offset_),
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::PlayerSpecificSettings, options_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::TournamentAssistantShared::Models::PlayerSpecificSettings)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TournamentAssistantShared::Models::_PlayerSpecificSettings_default_instance_),
};

const char descriptor_table_protodef_protobuf_2fModels_2fplayer_5fspecific_5fsettings_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n.protobuf/Models/player_specific_settin"
  "gs.proto\022 TournamentAssistantShared.Mode"
  "ls\"\263\003\n\026PlayerSpecificSettings\022\025\n\rplayer_"
  "height\030\001 \001(\002\022\022\n\nsfx_volume\030\002 \001(\002\022\035\n\025sabe"
  "r_trail_intensity\030\003 \001(\002\022#\n\033note_jump_sta"
  "rt_beat_offset\030\004 \001(\002\022W\n\007options\030\005 \001(\0162F."
  "TournamentAssistantShared.Models.PlayerS"
  "pecificSettings.PlayerOptions\"\320\001\n\rPlayer"
  "Options\022\010\n\004None\020\000\022\016\n\nLeftHanded\020\001\022\020\n\014Sta"
  "ticLights\020\002\022\t\n\005NoHud\020\004\022\017\n\013AdvancedHud\020\010\022"
  "\020\n\014ReduceDebris\020\020\022\024\n\020AutoPlayerHeight\020 \022"
  "\021\n\rNoFailEffects\020@\022\020\n\013AutoRestart\020\200\001\022\030\n\023"
  "HideNoteSpawnEffect\020\200\002\022\020\n\013AdaptiveSfx\020\200\004"
  "B#\252\002 TournamentAssistantShared.Modelsb\006p"
  "roto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_protobuf_2fModels_2fplayer_5fspecific_5fsettings_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protobuf_2fModels_2fplayer_5fspecific_5fsettings_2eproto = {
  false, false, 565, descriptor_table_protodef_protobuf_2fModels_2fplayer_5fspecific_5fsettings_2eproto, "protobuf/Models/player_specific_settings.proto", 
  &descriptor_table_protobuf_2fModels_2fplayer_5fspecific_5fsettings_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_protobuf_2fModels_2fplayer_5fspecific_5fsettings_2eproto::offsets,
  file_level_metadata_protobuf_2fModels_2fplayer_5fspecific_5fsettings_2eproto, file_level_enum_descriptors_protobuf_2fModels_2fplayer_5fspecific_5fsettings_2eproto, file_level_service_descriptors_protobuf_2fModels_2fplayer_5fspecific_5fsettings_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_protobuf_2fModels_2fplayer_5fspecific_5fsettings_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protobuf_2fModels_2fplayer_5fspecific_5fsettings_2eproto);
  return descriptor_table_protobuf_2fModels_2fplayer_5fspecific_5fsettings_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_protobuf_2fModels_2fplayer_5fspecific_5fsettings_2eproto(&descriptor_table_protobuf_2fModels_2fplayer_5fspecific_5fsettings_2eproto);
namespace TournamentAssistantShared {
namespace Models {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayerSpecificSettings_PlayerOptions_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protobuf_2fModels_2fplayer_5fspecific_5fsettings_2eproto);
  return file_level_enum_descriptors_protobuf_2fModels_2fplayer_5fspecific_5fsettings_2eproto[0];
}
bool PlayerSpecificSettings_PlayerOptions_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PlayerSpecificSettings_PlayerOptions PlayerSpecificSettings::None;
constexpr PlayerSpecificSettings_PlayerOptions PlayerSpecificSettings::LeftHanded;
constexpr PlayerSpecificSettings_PlayerOptions PlayerSpecificSettings::StaticLights;
constexpr PlayerSpecificSettings_PlayerOptions PlayerSpecificSettings::NoHud;
constexpr PlayerSpecificSettings_PlayerOptions PlayerSpecificSettings::AdvancedHud;
constexpr PlayerSpecificSettings_PlayerOptions PlayerSpecificSettings::ReduceDebris;
constexpr PlayerSpecificSettings_PlayerOptions PlayerSpecificSettings::AutoPlayerHeight;
constexpr PlayerSpecificSettings_PlayerOptions PlayerSpecificSettings::NoFailEffects;
constexpr PlayerSpecificSettings_PlayerOptions PlayerSpecificSettings::AutoRestart;
constexpr PlayerSpecificSettings_PlayerOptions PlayerSpecificSettings::HideNoteSpawnEffect;
constexpr PlayerSpecificSettings_PlayerOptions PlayerSpecificSettings::AdaptiveSfx;
constexpr PlayerSpecificSettings_PlayerOptions PlayerSpecificSettings::PlayerOptions_MIN;
constexpr PlayerSpecificSettings_PlayerOptions PlayerSpecificSettings::PlayerOptions_MAX;
constexpr int PlayerSpecificSettings::PlayerOptions_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class PlayerSpecificSettings::_Internal {
 public:
};

PlayerSpecificSettings::PlayerSpecificSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TournamentAssistantShared.Models.PlayerSpecificSettings)
}
PlayerSpecificSettings::PlayerSpecificSettings(const PlayerSpecificSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_height_, &from.player_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&options_) -
    reinterpret_cast<char*>(&player_height_)) + sizeof(options_));
  // @@protoc_insertion_point(copy_constructor:TournamentAssistantShared.Models.PlayerSpecificSettings)
}

void PlayerSpecificSettings::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_height_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&options_) -
    reinterpret_cast<char*>(&player_height_)) + sizeof(options_));
}

PlayerSpecificSettings::~PlayerSpecificSettings() {
  // @@protoc_insertion_point(destructor:TournamentAssistantShared.Models.PlayerSpecificSettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerSpecificSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PlayerSpecificSettings::ArenaDtor(void* object) {
  PlayerSpecificSettings* _this = reinterpret_cast< PlayerSpecificSettings* >(object);
  (void)_this;
}
void PlayerSpecificSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerSpecificSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerSpecificSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:TournamentAssistantShared.Models.PlayerSpecificSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&player_height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&options_) -
      reinterpret_cast<char*>(&player_height_)) + sizeof(options_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerSpecificSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float player_height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          player_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float sfx_volume = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          sfx_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float saber_trail_intensity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          saber_trail_intensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float note_jump_start_beat_offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          note_jump_start_beat_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .TournamentAssistantShared.Models.PlayerSpecificSettings.PlayerOptions options = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_options(static_cast<::TournamentAssistantShared::Models::PlayerSpecificSettings_PlayerOptions>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerSpecificSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TournamentAssistantShared.Models.PlayerSpecificSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float player_height = 1;
  if (!(this->player_height() <= 0 && this->player_height() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_player_height(), target);
  }

  // float sfx_volume = 2;
  if (!(this->sfx_volume() <= 0 && this->sfx_volume() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_sfx_volume(), target);
  }

  // float saber_trail_intensity = 3;
  if (!(this->saber_trail_intensity() <= 0 && this->saber_trail_intensity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_saber_trail_intensity(), target);
  }

  // float note_jump_start_beat_offset = 4;
  if (!(this->note_jump_start_beat_offset() <= 0 && this->note_jump_start_beat_offset() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_note_jump_start_beat_offset(), target);
  }

  // .TournamentAssistantShared.Models.PlayerSpecificSettings.PlayerOptions options = 5;
  if (this->options() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_options(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TournamentAssistantShared.Models.PlayerSpecificSettings)
  return target;
}

size_t PlayerSpecificSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TournamentAssistantShared.Models.PlayerSpecificSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float player_height = 1;
  if (!(this->player_height() <= 0 && this->player_height() >= 0)) {
    total_size += 1 + 4;
  }

  // float sfx_volume = 2;
  if (!(this->sfx_volume() <= 0 && this->sfx_volume() >= 0)) {
    total_size += 1 + 4;
  }

  // float saber_trail_intensity = 3;
  if (!(this->saber_trail_intensity() <= 0 && this->saber_trail_intensity() >= 0)) {
    total_size += 1 + 4;
  }

  // float note_jump_start_beat_offset = 4;
  if (!(this->note_jump_start_beat_offset() <= 0 && this->note_jump_start_beat_offset() >= 0)) {
    total_size += 1 + 4;
  }

  // .TournamentAssistantShared.Models.PlayerSpecificSettings.PlayerOptions options = 5;
  if (this->options() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_options());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerSpecificSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TournamentAssistantShared.Models.PlayerSpecificSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerSpecificSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerSpecificSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TournamentAssistantShared.Models.PlayerSpecificSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TournamentAssistantShared.Models.PlayerSpecificSettings)
    MergeFrom(*source);
  }
}

void PlayerSpecificSettings::MergeFrom(const PlayerSpecificSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TournamentAssistantShared.Models.PlayerSpecificSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.player_height() <= 0 && from.player_height() >= 0)) {
    _internal_set_player_height(from._internal_player_height());
  }
  if (!(from.sfx_volume() <= 0 && from.sfx_volume() >= 0)) {
    _internal_set_sfx_volume(from._internal_sfx_volume());
  }
  if (!(from.saber_trail_intensity() <= 0 && from.saber_trail_intensity() >= 0)) {
    _internal_set_saber_trail_intensity(from._internal_saber_trail_intensity());
  }
  if (!(from.note_jump_start_beat_offset() <= 0 && from.note_jump_start_beat_offset() >= 0)) {
    _internal_set_note_jump_start_beat_offset(from._internal_note_jump_start_beat_offset());
  }
  if (from.options() != 0) {
    _internal_set_options(from._internal_options());
  }
}

void PlayerSpecificSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TournamentAssistantShared.Models.PlayerSpecificSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerSpecificSettings::CopyFrom(const PlayerSpecificSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TournamentAssistantShared.Models.PlayerSpecificSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerSpecificSettings::IsInitialized() const {
  return true;
}

void PlayerSpecificSettings::InternalSwap(PlayerSpecificSettings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerSpecificSettings, options_)
      + sizeof(PlayerSpecificSettings::options_)
      - PROTOBUF_FIELD_OFFSET(PlayerSpecificSettings, player_height_)>(
          reinterpret_cast<char*>(&player_height_),
          reinterpret_cast<char*>(&other->player_height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerSpecificSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Models
}  // namespace TournamentAssistantShared
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TournamentAssistantShared::Models::PlayerSpecificSettings* Arena::CreateMaybeMessage< ::TournamentAssistantShared::Models::PlayerSpecificSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TournamentAssistantShared::Models::PlayerSpecificSettings >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
