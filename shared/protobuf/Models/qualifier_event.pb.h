// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf/Models/qualifier_event.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protobuf_2fModels_2fqualifier_5fevent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protobuf_2fModels_2fqualifier_5fevent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "protobuf/Models/Discord/guild.pb.h"
#include "protobuf/Models/Discord/channel.pb.h"
#include "protobuf/Models/gameplay_parameters.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protobuf_2fModels_2fqualifier_5fevent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protobuf_2fModels_2fqualifier_5fevent_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protobuf_2fModels_2fqualifier_5fevent_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_protobuf_2fModels_2fqualifier_5fevent_2eproto_metadata_getter(int index);
namespace TournamentAssistantShared {
namespace Models {
class QualifierEvent;
struct QualifierEventDefaultTypeInternal;
extern QualifierEventDefaultTypeInternal _QualifierEvent_default_instance_;
}  // namespace Models
}  // namespace TournamentAssistantShared
PROTOBUF_NAMESPACE_OPEN
template<> ::TournamentAssistantShared::Models::QualifierEvent* Arena::CreateMaybeMessage<::TournamentAssistantShared::Models::QualifierEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TournamentAssistantShared {
namespace Models {

enum QualifierEvent_EventSettings : int {
  QualifierEvent_EventSettings_None = 0,
  QualifierEvent_EventSettings_HideScoresFromPlayers = 1,
  QualifierEvent_EventSettings_DisableScoresaberSubmission = 2,
  QualifierEvent_EventSettings_QualifierEvent_EventSettings_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  QualifierEvent_EventSettings_QualifierEvent_EventSettings_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool QualifierEvent_EventSettings_IsValid(int value);
constexpr QualifierEvent_EventSettings QualifierEvent_EventSettings_EventSettings_MIN = QualifierEvent_EventSettings_None;
constexpr QualifierEvent_EventSettings QualifierEvent_EventSettings_EventSettings_MAX = QualifierEvent_EventSettings_DisableScoresaberSubmission;
constexpr int QualifierEvent_EventSettings_EventSettings_ARRAYSIZE = QualifierEvent_EventSettings_EventSettings_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QualifierEvent_EventSettings_descriptor();
template<typename T>
inline const std::string& QualifierEvent_EventSettings_Name(T enum_t_value) {
  static_assert(::std::is_same<T, QualifierEvent_EventSettings>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function QualifierEvent_EventSettings_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    QualifierEvent_EventSettings_descriptor(), enum_t_value);
}
inline bool QualifierEvent_EventSettings_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, QualifierEvent_EventSettings* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<QualifierEvent_EventSettings>(
    QualifierEvent_EventSettings_descriptor(), name, value);
}
// ===================================================================

class QualifierEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TournamentAssistantShared.Models.QualifierEvent) */ {
 public:
  inline QualifierEvent() : QualifierEvent(nullptr) {}
  virtual ~QualifierEvent();
  explicit constexpr QualifierEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QualifierEvent(const QualifierEvent& from);
  QualifierEvent(QualifierEvent&& from) noexcept
    : QualifierEvent() {
    *this = ::std::move(from);
  }

  inline QualifierEvent& operator=(const QualifierEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline QualifierEvent& operator=(QualifierEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QualifierEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const QualifierEvent* internal_default_instance() {
    return reinterpret_cast<const QualifierEvent*>(
               &_QualifierEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QualifierEvent& a, QualifierEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(QualifierEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QualifierEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QualifierEvent* New() const final {
    return CreateMaybeMessage<QualifierEvent>(nullptr);
  }

  QualifierEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QualifierEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QualifierEvent& from);
  void MergeFrom(const QualifierEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QualifierEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TournamentAssistantShared.Models.QualifierEvent";
  }
  protected:
  explicit QualifierEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_protobuf_2fModels_2fqualifier_5fevent_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef QualifierEvent_EventSettings EventSettings;
  static constexpr EventSettings None =
    QualifierEvent_EventSettings_None;
  static constexpr EventSettings HideScoresFromPlayers =
    QualifierEvent_EventSettings_HideScoresFromPlayers;
  static constexpr EventSettings DisableScoresaberSubmission =
    QualifierEvent_EventSettings_DisableScoresaberSubmission;
  static inline bool EventSettings_IsValid(int value) {
    return QualifierEvent_EventSettings_IsValid(value);
  }
  static constexpr EventSettings EventSettings_MIN =
    QualifierEvent_EventSettings_EventSettings_MIN;
  static constexpr EventSettings EventSettings_MAX =
    QualifierEvent_EventSettings_EventSettings_MAX;
  static constexpr int EventSettings_ARRAYSIZE =
    QualifierEvent_EventSettings_EventSettings_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EventSettings_descriptor() {
    return QualifierEvent_EventSettings_descriptor();
  }
  template<typename T>
  static inline const std::string& EventSettings_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EventSettings>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EventSettings_Name.");
    return QualifierEvent_EventSettings_Name(enum_t_value);
  }
  static inline bool EventSettings_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EventSettings* value) {
    return QualifierEvent_EventSettings_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kQualifierMapsFieldNumber = 5,
    kEventIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kGuildFieldNumber = 3,
    kInfoChannelFieldNumber = 4,
    kSendScoresToInfoChannelFieldNumber = 6,
    kFlagsFieldNumber = 7,
  };
  // repeated .TournamentAssistantShared.Models.GameplayParameters qualifier_maps = 5;
  int qualifier_maps_size() const;
  private:
  int _internal_qualifier_maps_size() const;
  public:
  void clear_qualifier_maps();
  ::TournamentAssistantShared::Models::GameplayParameters* mutable_qualifier_maps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentAssistantShared::Models::GameplayParameters >*
      mutable_qualifier_maps();
  private:
  const ::TournamentAssistantShared::Models::GameplayParameters& _internal_qualifier_maps(int index) const;
  ::TournamentAssistantShared::Models::GameplayParameters* _internal_add_qualifier_maps();
  public:
  const ::TournamentAssistantShared::Models::GameplayParameters& qualifier_maps(int index) const;
  ::TournamentAssistantShared::Models::GameplayParameters* add_qualifier_maps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentAssistantShared::Models::GameplayParameters >&
      qualifier_maps() const;

  // string event_id = 1;
  void clear_event_id();
  const std::string& event_id() const;
  void set_event_id(const std::string& value);
  void set_event_id(std::string&& value);
  void set_event_id(const char* value);
  void set_event_id(const char* value, size_t size);
  std::string* mutable_event_id();
  std::string* release_event_id();
  void set_allocated_event_id(std::string* event_id);
  private:
  const std::string& _internal_event_id() const;
  void _internal_set_event_id(const std::string& value);
  std::string* _internal_mutable_event_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .TournamentAssistantShared.Models.Discord.Guild guild = 3;
  bool has_guild() const;
  private:
  bool _internal_has_guild() const;
  public:
  void clear_guild();
  const ::TournamentAssistantShared::Models::Discord::Guild& guild() const;
  ::TournamentAssistantShared::Models::Discord::Guild* release_guild();
  ::TournamentAssistantShared::Models::Discord::Guild* mutable_guild();
  void set_allocated_guild(::TournamentAssistantShared::Models::Discord::Guild* guild);
  private:
  const ::TournamentAssistantShared::Models::Discord::Guild& _internal_guild() const;
  ::TournamentAssistantShared::Models::Discord::Guild* _internal_mutable_guild();
  public:
  void unsafe_arena_set_allocated_guild(
      ::TournamentAssistantShared::Models::Discord::Guild* guild);
  ::TournamentAssistantShared::Models::Discord::Guild* unsafe_arena_release_guild();

  // .TournamentAssistantShared.Models.Discord.Channel info_channel = 4;
  bool has_info_channel() const;
  private:
  bool _internal_has_info_channel() const;
  public:
  void clear_info_channel();
  const ::TournamentAssistantShared::Models::Discord::Channel& info_channel() const;
  ::TournamentAssistantShared::Models::Discord::Channel* release_info_channel();
  ::TournamentAssistantShared::Models::Discord::Channel* mutable_info_channel();
  void set_allocated_info_channel(::TournamentAssistantShared::Models::Discord::Channel* info_channel);
  private:
  const ::TournamentAssistantShared::Models::Discord::Channel& _internal_info_channel() const;
  ::TournamentAssistantShared::Models::Discord::Channel* _internal_mutable_info_channel();
  public:
  void unsafe_arena_set_allocated_info_channel(
      ::TournamentAssistantShared::Models::Discord::Channel* info_channel);
  ::TournamentAssistantShared::Models::Discord::Channel* unsafe_arena_release_info_channel();

  // bool send_scores_to_info_channel = 6;
  void clear_send_scores_to_info_channel();
  bool send_scores_to_info_channel() const;
  void set_send_scores_to_info_channel(bool value);
  private:
  bool _internal_send_scores_to_info_channel() const;
  void _internal_set_send_scores_to_info_channel(bool value);
  public:

  // int32 flags = 7;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TournamentAssistantShared.Models.QualifierEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentAssistantShared::Models::GameplayParameters > qualifier_maps_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::TournamentAssistantShared::Models::Discord::Guild* guild_;
  ::TournamentAssistantShared::Models::Discord::Channel* info_channel_;
  bool send_scores_to_info_channel_;
  ::PROTOBUF_NAMESPACE_ID::int32 flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protobuf_2fModels_2fqualifier_5fevent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// QualifierEvent

// string event_id = 1;
inline void QualifierEvent::clear_event_id() {
  event_id_.ClearToEmpty();
}
inline const std::string& QualifierEvent::event_id() const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.QualifierEvent.event_id)
  return _internal_event_id();
}
inline void QualifierEvent::set_event_id(const std::string& value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:TournamentAssistantShared.Models.QualifierEvent.event_id)
}
inline std::string* QualifierEvent::mutable_event_id() {
  // @@protoc_insertion_point(field_mutable:TournamentAssistantShared.Models.QualifierEvent.event_id)
  return _internal_mutable_event_id();
}
inline const std::string& QualifierEvent::_internal_event_id() const {
  return event_id_.Get();
}
inline void QualifierEvent::_internal_set_event_id(const std::string& value) {
  
  event_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void QualifierEvent::set_event_id(std::string&& value) {
  
  event_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TournamentAssistantShared.Models.QualifierEvent.event_id)
}
inline void QualifierEvent::set_event_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  event_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TournamentAssistantShared.Models.QualifierEvent.event_id)
}
inline void QualifierEvent::set_event_id(const char* value,
    size_t size) {
  
  event_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TournamentAssistantShared.Models.QualifierEvent.event_id)
}
inline std::string* QualifierEvent::_internal_mutable_event_id() {
  
  return event_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* QualifierEvent::release_event_id() {
  // @@protoc_insertion_point(field_release:TournamentAssistantShared.Models.QualifierEvent.event_id)
  return event_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QualifierEvent::set_allocated_event_id(std::string* event_id) {
  if (event_id != nullptr) {
    
  } else {
    
  }
  event_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TournamentAssistantShared.Models.QualifierEvent.event_id)
}

// string name = 2;
inline void QualifierEvent::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& QualifierEvent::name() const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.QualifierEvent.name)
  return _internal_name();
}
inline void QualifierEvent::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:TournamentAssistantShared.Models.QualifierEvent.name)
}
inline std::string* QualifierEvent::mutable_name() {
  // @@protoc_insertion_point(field_mutable:TournamentAssistantShared.Models.QualifierEvent.name)
  return _internal_mutable_name();
}
inline const std::string& QualifierEvent::_internal_name() const {
  return name_.Get();
}
inline void QualifierEvent::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void QualifierEvent::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TournamentAssistantShared.Models.QualifierEvent.name)
}
inline void QualifierEvent::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TournamentAssistantShared.Models.QualifierEvent.name)
}
inline void QualifierEvent::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TournamentAssistantShared.Models.QualifierEvent.name)
}
inline std::string* QualifierEvent::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* QualifierEvent::release_name() {
  // @@protoc_insertion_point(field_release:TournamentAssistantShared.Models.QualifierEvent.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QualifierEvent::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TournamentAssistantShared.Models.QualifierEvent.name)
}

// .TournamentAssistantShared.Models.Discord.Guild guild = 3;
inline bool QualifierEvent::_internal_has_guild() const {
  return this != internal_default_instance() && guild_ != nullptr;
}
inline bool QualifierEvent::has_guild() const {
  return _internal_has_guild();
}
inline const ::TournamentAssistantShared::Models::Discord::Guild& QualifierEvent::_internal_guild() const {
  const ::TournamentAssistantShared::Models::Discord::Guild* p = guild_;
  return p != nullptr ? *p : reinterpret_cast<const ::TournamentAssistantShared::Models::Discord::Guild&>(
      ::TournamentAssistantShared::Models::Discord::_Guild_default_instance_);
}
inline const ::TournamentAssistantShared::Models::Discord::Guild& QualifierEvent::guild() const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.QualifierEvent.guild)
  return _internal_guild();
}
inline void QualifierEvent::unsafe_arena_set_allocated_guild(
    ::TournamentAssistantShared::Models::Discord::Guild* guild) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guild_);
  }
  guild_ = guild;
  if (guild) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TournamentAssistantShared.Models.QualifierEvent.guild)
}
inline ::TournamentAssistantShared::Models::Discord::Guild* QualifierEvent::release_guild() {
  
  ::TournamentAssistantShared::Models::Discord::Guild* temp = guild_;
  guild_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TournamentAssistantShared::Models::Discord::Guild* QualifierEvent::unsafe_arena_release_guild() {
  // @@protoc_insertion_point(field_release:TournamentAssistantShared.Models.QualifierEvent.guild)
  
  ::TournamentAssistantShared::Models::Discord::Guild* temp = guild_;
  guild_ = nullptr;
  return temp;
}
inline ::TournamentAssistantShared::Models::Discord::Guild* QualifierEvent::_internal_mutable_guild() {
  
  if (guild_ == nullptr) {
    auto* p = CreateMaybeMessage<::TournamentAssistantShared::Models::Discord::Guild>(GetArena());
    guild_ = p;
  }
  return guild_;
}
inline ::TournamentAssistantShared::Models::Discord::Guild* QualifierEvent::mutable_guild() {
  // @@protoc_insertion_point(field_mutable:TournamentAssistantShared.Models.QualifierEvent.guild)
  return _internal_mutable_guild();
}
inline void QualifierEvent::set_allocated_guild(::TournamentAssistantShared::Models::Discord::Guild* guild) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(guild_);
  }
  if (guild) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guild)->GetArena();
    if (message_arena != submessage_arena) {
      guild = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guild, submessage_arena);
    }
    
  } else {
    
  }
  guild_ = guild;
  // @@protoc_insertion_point(field_set_allocated:TournamentAssistantShared.Models.QualifierEvent.guild)
}

// .TournamentAssistantShared.Models.Discord.Channel info_channel = 4;
inline bool QualifierEvent::_internal_has_info_channel() const {
  return this != internal_default_instance() && info_channel_ != nullptr;
}
inline bool QualifierEvent::has_info_channel() const {
  return _internal_has_info_channel();
}
inline const ::TournamentAssistantShared::Models::Discord::Channel& QualifierEvent::_internal_info_channel() const {
  const ::TournamentAssistantShared::Models::Discord::Channel* p = info_channel_;
  return p != nullptr ? *p : reinterpret_cast<const ::TournamentAssistantShared::Models::Discord::Channel&>(
      ::TournamentAssistantShared::Models::Discord::_Channel_default_instance_);
}
inline const ::TournamentAssistantShared::Models::Discord::Channel& QualifierEvent::info_channel() const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.QualifierEvent.info_channel)
  return _internal_info_channel();
}
inline void QualifierEvent::unsafe_arena_set_allocated_info_channel(
    ::TournamentAssistantShared::Models::Discord::Channel* info_channel) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_channel_);
  }
  info_channel_ = info_channel;
  if (info_channel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TournamentAssistantShared.Models.QualifierEvent.info_channel)
}
inline ::TournamentAssistantShared::Models::Discord::Channel* QualifierEvent::release_info_channel() {
  
  ::TournamentAssistantShared::Models::Discord::Channel* temp = info_channel_;
  info_channel_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TournamentAssistantShared::Models::Discord::Channel* QualifierEvent::unsafe_arena_release_info_channel() {
  // @@protoc_insertion_point(field_release:TournamentAssistantShared.Models.QualifierEvent.info_channel)
  
  ::TournamentAssistantShared::Models::Discord::Channel* temp = info_channel_;
  info_channel_ = nullptr;
  return temp;
}
inline ::TournamentAssistantShared::Models::Discord::Channel* QualifierEvent::_internal_mutable_info_channel() {
  
  if (info_channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::TournamentAssistantShared::Models::Discord::Channel>(GetArena());
    info_channel_ = p;
  }
  return info_channel_;
}
inline ::TournamentAssistantShared::Models::Discord::Channel* QualifierEvent::mutable_info_channel() {
  // @@protoc_insertion_point(field_mutable:TournamentAssistantShared.Models.QualifierEvent.info_channel)
  return _internal_mutable_info_channel();
}
inline void QualifierEvent::set_allocated_info_channel(::TournamentAssistantShared::Models::Discord::Channel* info_channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_channel_);
  }
  if (info_channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_channel)->GetArena();
    if (message_arena != submessage_arena) {
      info_channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info_channel, submessage_arena);
    }
    
  } else {
    
  }
  info_channel_ = info_channel;
  // @@protoc_insertion_point(field_set_allocated:TournamentAssistantShared.Models.QualifierEvent.info_channel)
}

// repeated .TournamentAssistantShared.Models.GameplayParameters qualifier_maps = 5;
inline int QualifierEvent::_internal_qualifier_maps_size() const {
  return qualifier_maps_.size();
}
inline int QualifierEvent::qualifier_maps_size() const {
  return _internal_qualifier_maps_size();
}
inline ::TournamentAssistantShared::Models::GameplayParameters* QualifierEvent::mutable_qualifier_maps(int index) {
  // @@protoc_insertion_point(field_mutable:TournamentAssistantShared.Models.QualifierEvent.qualifier_maps)
  return qualifier_maps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentAssistantShared::Models::GameplayParameters >*
QualifierEvent::mutable_qualifier_maps() {
  // @@protoc_insertion_point(field_mutable_list:TournamentAssistantShared.Models.QualifierEvent.qualifier_maps)
  return &qualifier_maps_;
}
inline const ::TournamentAssistantShared::Models::GameplayParameters& QualifierEvent::_internal_qualifier_maps(int index) const {
  return qualifier_maps_.Get(index);
}
inline const ::TournamentAssistantShared::Models::GameplayParameters& QualifierEvent::qualifier_maps(int index) const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.QualifierEvent.qualifier_maps)
  return _internal_qualifier_maps(index);
}
inline ::TournamentAssistantShared::Models::GameplayParameters* QualifierEvent::_internal_add_qualifier_maps() {
  return qualifier_maps_.Add();
}
inline ::TournamentAssistantShared::Models::GameplayParameters* QualifierEvent::add_qualifier_maps() {
  // @@protoc_insertion_point(field_add:TournamentAssistantShared.Models.QualifierEvent.qualifier_maps)
  return _internal_add_qualifier_maps();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentAssistantShared::Models::GameplayParameters >&
QualifierEvent::qualifier_maps() const {
  // @@protoc_insertion_point(field_list:TournamentAssistantShared.Models.QualifierEvent.qualifier_maps)
  return qualifier_maps_;
}

// bool send_scores_to_info_channel = 6;
inline void QualifierEvent::clear_send_scores_to_info_channel() {
  send_scores_to_info_channel_ = false;
}
inline bool QualifierEvent::_internal_send_scores_to_info_channel() const {
  return send_scores_to_info_channel_;
}
inline bool QualifierEvent::send_scores_to_info_channel() const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.QualifierEvent.send_scores_to_info_channel)
  return _internal_send_scores_to_info_channel();
}
inline void QualifierEvent::_internal_set_send_scores_to_info_channel(bool value) {
  
  send_scores_to_info_channel_ = value;
}
inline void QualifierEvent::set_send_scores_to_info_channel(bool value) {
  _internal_set_send_scores_to_info_channel(value);
  // @@protoc_insertion_point(field_set:TournamentAssistantShared.Models.QualifierEvent.send_scores_to_info_channel)
}

// int32 flags = 7;
inline void QualifierEvent::clear_flags() {
  flags_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QualifierEvent::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QualifierEvent::flags() const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.QualifierEvent.flags)
  return _internal_flags();
}
inline void QualifierEvent::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  flags_ = value;
}
inline void QualifierEvent::set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:TournamentAssistantShared.Models.QualifierEvent.flags)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Models
}  // namespace TournamentAssistantShared

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TournamentAssistantShared::Models::QualifierEvent_EventSettings> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TournamentAssistantShared::Models::QualifierEvent_EventSettings>() {
  return ::TournamentAssistantShared::Models::QualifierEvent_EventSettings_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protobuf_2fModels_2fqualifier_5fevent_2eproto
