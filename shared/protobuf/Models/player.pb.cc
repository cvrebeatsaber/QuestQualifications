// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf/Models/player.proto

#include "protobuf/Models/player.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace TournamentAssistantShared {
namespace Models {
constexpr Player_Point::Player_Point(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0){}
struct Player_PointDefaultTypeInternal {
  constexpr Player_PointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Player_PointDefaultTypeInternal() {}
  union {
    Player_Point _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Player_PointDefaultTypeInternal _Player_Point_default_instance_;
constexpr Player::Player(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mod_list_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_(nullptr)
  , song_list_(nullptr)
  , stream_screen_coordinates_(nullptr)
  , play_state_(0)

  , download_state_(0)

  , score_(0)
  , combo_(0)
  , accuracy_(0)
  , song_position_(0)
  , stream_delay_ms_(PROTOBUF_LONGLONG(0))
  , stream_sync_start_ms_(PROTOBUF_LONGLONG(0)){}
struct PlayerDefaultTypeInternal {
  constexpr PlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlayerDefaultTypeInternal() {}
  union {
    Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlayerDefaultTypeInternal _Player_default_instance_;
}  // namespace Models
}  // namespace TournamentAssistantShared
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_protobuf_2fModels_2fplayer_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_protobuf_2fModels_2fplayer_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_protobuf_2fModels_2fplayer_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_protobuf_2fModels_2fplayer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::Player_Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::Player_Point, x_),
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::Player_Point, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::Player, id_),
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::Player, name_),
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::Player, user_id_),
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::Player, team_),
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::Player, play_state_),
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::Player, download_state_),
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::Player, score_),
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::Player, combo_),
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::Player, accuracy_),
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::Player, song_position_),
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::Player, song_list_),
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::Player, mod_list_),
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::Player, stream_screen_coordinates_),
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::Player, stream_delay_ms_),
  PROTOBUF_FIELD_OFFSET(::TournamentAssistantShared::Models::Player, stream_sync_start_ms_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::TournamentAssistantShared::Models::Player_Point)},
  { 7, -1, sizeof(::TournamentAssistantShared::Models::Player)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TournamentAssistantShared::Models::_Player_Point_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TournamentAssistantShared::Models::_Player_default_instance_),
};

const char descriptor_table_protodef_protobuf_2fModels_2fplayer_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034protobuf/Models/player.proto\022 Tourname"
  "ntAssistantShared.Models\032\032protobuf/Model"
  "s/team.proto\032\'protobuf/Models/Packets/so"
  "ng_list.proto\"\303\005\n\006Player\022\n\n\002id\030\001 \001(\t\022\014\n\004"
  "name\030\002 \001(\t\022\017\n\007user_id\030\003 \001(\t\0224\n\004team\030\004 \001("
  "\0132&.TournamentAssistantShared.Models.Tea"
  "m\022G\n\nplay_state\030\005 \001(\01623.TournamentAssist"
  "antShared.Models.Player.PlayStates\022O\n\016do"
  "wnload_state\030\006 \001(\01627.TournamentAssistant"
  "Shared.Models.Player.DownloadStates\022\r\n\005s"
  "core\030\007 \001(\005\022\r\n\005combo\030\010 \001(\005\022\020\n\010accuracy\030\t "
  "\001(\001\022\025\n\rsong_position\030\n \001(\001\022E\n\tsong_list\030"
  "\013 \001(\01322.TournamentAssistantShared.Models"
  ".Packets.SongList\022\020\n\010mod_list\030\014 \003(\t\022Q\n\031s"
  "tream_screen_coordinates\030\r \001(\0132..Tournam"
  "entAssistantShared.Models.Player.Point\022\027"
  "\n\017stream_delay_ms\030\016 \001(\003\022\034\n\024stream_sync_s"
  "tart_ms\030\017 \001(\003\032\035\n\005Point\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002"
  " \001(\005\"%\n\nPlayStates\022\013\n\007Waiting\020\000\022\n\n\006InGam"
  "e\020\001\"N\n\016DownloadStates\022\010\n\004None\020\000\022\017\n\013Downl"
  "oading\020\001\022\016\n\nDownloaded\020\002\022\021\n\rDownloadErro"
  "r\020\003B#\252\002 TournamentAssistantShared.Models"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_protobuf_2fModels_2fplayer_2eproto_deps[2] = {
  &::descriptor_table_protobuf_2fModels_2fPackets_2fsong_5flist_2eproto,
  &::descriptor_table_protobuf_2fModels_2fteam_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_protobuf_2fModels_2fplayer_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protobuf_2fModels_2fplayer_2eproto = {
  false, false, 888, descriptor_table_protodef_protobuf_2fModels_2fplayer_2eproto, "protobuf/Models/player.proto", 
  &descriptor_table_protobuf_2fModels_2fplayer_2eproto_once, descriptor_table_protobuf_2fModels_2fplayer_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_protobuf_2fModels_2fplayer_2eproto::offsets,
  file_level_metadata_protobuf_2fModels_2fplayer_2eproto, file_level_enum_descriptors_protobuf_2fModels_2fplayer_2eproto, file_level_service_descriptors_protobuf_2fModels_2fplayer_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_protobuf_2fModels_2fplayer_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protobuf_2fModels_2fplayer_2eproto);
  return descriptor_table_protobuf_2fModels_2fplayer_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_protobuf_2fModels_2fplayer_2eproto(&descriptor_table_protobuf_2fModels_2fplayer_2eproto);
namespace TournamentAssistantShared {
namespace Models {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Player_PlayStates_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protobuf_2fModels_2fplayer_2eproto);
  return file_level_enum_descriptors_protobuf_2fModels_2fplayer_2eproto[0];
}
bool Player_PlayStates_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Player_PlayStates Player::Waiting;
constexpr Player_PlayStates Player::InGame;
constexpr Player_PlayStates Player::PlayStates_MIN;
constexpr Player_PlayStates Player::PlayStates_MAX;
constexpr int Player::PlayStates_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Player_DownloadStates_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protobuf_2fModels_2fplayer_2eproto);
  return file_level_enum_descriptors_protobuf_2fModels_2fplayer_2eproto[1];
}
bool Player_DownloadStates_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Player_DownloadStates Player::None;
constexpr Player_DownloadStates Player::Downloading;
constexpr Player_DownloadStates Player::Downloaded;
constexpr Player_DownloadStates Player::DownloadError;
constexpr Player_DownloadStates Player::DownloadStates_MIN;
constexpr Player_DownloadStates Player::DownloadStates_MAX;
constexpr int Player::DownloadStates_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class Player_Point::_Internal {
 public:
};

Player_Point::Player_Point(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TournamentAssistantShared.Models.Player.Point)
}
Player_Point::Player_Point(const Player_Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:TournamentAssistantShared.Models.Player.Point)
}

void Player_Point::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Player_Point::~Player_Point() {
  // @@protoc_insertion_point(destructor:TournamentAssistantShared.Models.Player.Point)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Player_Point::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Player_Point::ArenaDtor(void* object) {
  Player_Point* _this = reinterpret_cast< Player_Point* >(object);
  (void)_this;
}
void Player_Point::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Player_Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Player_Point::Clear() {
// @@protoc_insertion_point(message_clear_start:TournamentAssistantShared.Models.Player.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Player_Point::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Player_Point::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TournamentAssistantShared.Models.Player.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TournamentAssistantShared.Models.Player.Point)
  return target;
}

size_t Player_Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TournamentAssistantShared.Models.Player.Point)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x());
  }

  // int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Player_Point::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TournamentAssistantShared.Models.Player.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Player_Point* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Player_Point>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TournamentAssistantShared.Models.Player.Point)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TournamentAssistantShared.Models.Player.Point)
    MergeFrom(*source);
  }
}

void Player_Point::MergeFrom(const Player_Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TournamentAssistantShared.Models.Player.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from.y() != 0) {
    _internal_set_y(from._internal_y());
  }
}

void Player_Point::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TournamentAssistantShared.Models.Player.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player_Point::CopyFrom(const Player_Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TournamentAssistantShared.Models.Player.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player_Point::IsInitialized() const {
  return true;
}

void Player_Point::InternalSwap(Player_Point* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Player_Point, y_)
      + sizeof(Player_Point::y_)
      - PROTOBUF_FIELD_OFFSET(Player_Point, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Player_Point::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Player::_Internal {
 public:
  static const ::TournamentAssistantShared::Models::Team& team(const Player* msg);
  static const ::TournamentAssistantShared::Models::Packets::SongList& song_list(const Player* msg);
  static const ::TournamentAssistantShared::Models::Player_Point& stream_screen_coordinates(const Player* msg);
};

const ::TournamentAssistantShared::Models::Team&
Player::_Internal::team(const Player* msg) {
  return *msg->team_;
}
const ::TournamentAssistantShared::Models::Packets::SongList&
Player::_Internal::song_list(const Player* msg) {
  return *msg->song_list_;
}
const ::TournamentAssistantShared::Models::Player_Point&
Player::_Internal::stream_screen_coordinates(const Player* msg) {
  return *msg->stream_screen_coordinates_;
}
void Player::clear_team() {
  if (GetArena() == nullptr && team_ != nullptr) {
    delete team_;
  }
  team_ = nullptr;
}
void Player::clear_song_list() {
  if (GetArena() == nullptr && song_list_ != nullptr) {
    delete song_list_;
  }
  song_list_ = nullptr;
}
Player::Player(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mod_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TournamentAssistantShared.Models.Player)
}
Player::Player(const Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mod_list_(from.mod_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArena());
  }
  if (from._internal_has_team()) {
    team_ = new ::TournamentAssistantShared::Models::Team(*from.team_);
  } else {
    team_ = nullptr;
  }
  if (from._internal_has_song_list()) {
    song_list_ = new ::TournamentAssistantShared::Models::Packets::SongList(*from.song_list_);
  } else {
    song_list_ = nullptr;
  }
  if (from._internal_has_stream_screen_coordinates()) {
    stream_screen_coordinates_ = new ::TournamentAssistantShared::Models::Player_Point(*from.stream_screen_coordinates_);
  } else {
    stream_screen_coordinates_ = nullptr;
  }
  ::memcpy(&play_state_, &from.play_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&stream_sync_start_ms_) -
    reinterpret_cast<char*>(&play_state_)) + sizeof(stream_sync_start_ms_));
  // @@protoc_insertion_point(copy_constructor:TournamentAssistantShared.Models.Player)
}

void Player::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&team_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stream_sync_start_ms_) -
    reinterpret_cast<char*>(&team_)) + sizeof(stream_sync_start_ms_));
}

Player::~Player() {
  // @@protoc_insertion_point(destructor:TournamentAssistantShared.Models.Player)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Player::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete team_;
  if (this != internal_default_instance()) delete song_list_;
  if (this != internal_default_instance()) delete stream_screen_coordinates_;
}

void Player::ArenaDtor(void* object) {
  Player* _this = reinterpret_cast< Player* >(object);
  (void)_this;
}
void Player::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Player::Clear() {
// @@protoc_insertion_point(message_clear_start:TournamentAssistantShared.Models.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mod_list_.Clear();
  id_.ClearToEmpty();
  name_.ClearToEmpty();
  user_id_.ClearToEmpty();
  if (GetArena() == nullptr && team_ != nullptr) {
    delete team_;
  }
  team_ = nullptr;
  if (GetArena() == nullptr && song_list_ != nullptr) {
    delete song_list_;
  }
  song_list_ = nullptr;
  if (GetArena() == nullptr && stream_screen_coordinates_ != nullptr) {
    delete stream_screen_coordinates_;
  }
  stream_screen_coordinates_ = nullptr;
  ::memset(&play_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stream_sync_start_ms_) -
      reinterpret_cast<char*>(&play_state_)) + sizeof(stream_sync_start_ms_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Player::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TournamentAssistantShared.Models.Player.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TournamentAssistantShared.Models.Player.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TournamentAssistantShared.Models.Player.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TournamentAssistantShared.Models.Team team = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_team(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TournamentAssistantShared.Models.Player.PlayStates play_state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_play_state(static_cast<::TournamentAssistantShared::Models::Player_PlayStates>(val));
        } else goto handle_unusual;
        continue;
      // .TournamentAssistantShared.Models.Player.DownloadStates download_state = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_download_state(static_cast<::TournamentAssistantShared::Models::Player_DownloadStates>(val));
        } else goto handle_unusual;
        continue;
      // int32 score = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 combo = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          combo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double accuracy = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          accuracy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double song_position = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          song_position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .TournamentAssistantShared.Models.Packets.SongList song_list = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_song_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string mod_list = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_mod_list();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TournamentAssistantShared.Models.Player.mod_list"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // .TournamentAssistantShared.Models.Player.Point stream_screen_coordinates = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_screen_coordinates(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 stream_delay_ms = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          stream_delay_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 stream_sync_start_ms = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          stream_sync_start_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Player::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TournamentAssistantShared.Models.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TournamentAssistantShared.Models.Player.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TournamentAssistantShared.Models.Player.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string user_id = 3;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TournamentAssistantShared.Models.Player.user_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user_id(), target);
  }

  // .TournamentAssistantShared.Models.Team team = 4;
  if (this->has_team()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::team(this), target, stream);
  }

  // .TournamentAssistantShared.Models.Player.PlayStates play_state = 5;
  if (this->play_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_play_state(), target);
  }

  // .TournamentAssistantShared.Models.Player.DownloadStates download_state = 6;
  if (this->download_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_download_state(), target);
  }

  // int32 score = 7;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_score(), target);
  }

  // int32 combo = 8;
  if (this->combo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_combo(), target);
  }

  // double accuracy = 9;
  if (!(this->accuracy() <= 0 && this->accuracy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_accuracy(), target);
  }

  // double song_position = 10;
  if (!(this->song_position() <= 0 && this->song_position() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_song_position(), target);
  }

  // .TournamentAssistantShared.Models.Packets.SongList song_list = 11;
  if (this->has_song_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::song_list(this), target, stream);
  }

  // repeated string mod_list = 12;
  for (int i = 0, n = this->_internal_mod_list_size(); i < n; i++) {
    const auto& s = this->_internal_mod_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TournamentAssistantShared.Models.Player.mod_list");
    target = stream->WriteString(12, s, target);
  }

  // .TournamentAssistantShared.Models.Player.Point stream_screen_coordinates = 13;
  if (this->has_stream_screen_coordinates()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::stream_screen_coordinates(this), target, stream);
  }

  // int64 stream_delay_ms = 14;
  if (this->stream_delay_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->_internal_stream_delay_ms(), target);
  }

  // int64 stream_sync_start_ms = 15;
  if (this->stream_sync_start_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->_internal_stream_sync_start_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TournamentAssistantShared.Models.Player)
  return target;
}

size_t Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TournamentAssistantShared.Models.Player)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string mod_list = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(mod_list_.size());
  for (int i = 0, n = mod_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      mod_list_.Get(i));
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string user_id = 3;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // .TournamentAssistantShared.Models.Team team = 4;
  if (this->has_team()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *team_);
  }

  // .TournamentAssistantShared.Models.Packets.SongList song_list = 11;
  if (this->has_song_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *song_list_);
  }

  // .TournamentAssistantShared.Models.Player.Point stream_screen_coordinates = 13;
  if (this->has_stream_screen_coordinates()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stream_screen_coordinates_);
  }

  // .TournamentAssistantShared.Models.Player.PlayStates play_state = 5;
  if (this->play_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_play_state());
  }

  // .TournamentAssistantShared.Models.Player.DownloadStates download_state = 6;
  if (this->download_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_download_state());
  }

  // int32 score = 7;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score());
  }

  // int32 combo = 8;
  if (this->combo() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_combo());
  }

  // double accuracy = 9;
  if (!(this->accuracy() <= 0 && this->accuracy() >= 0)) {
    total_size += 1 + 8;
  }

  // double song_position = 10;
  if (!(this->song_position() <= 0 && this->song_position() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 stream_delay_ms = 14;
  if (this->stream_delay_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_stream_delay_ms());
  }

  // int64 stream_sync_start_ms = 15;
  if (this->stream_sync_start_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_stream_sync_start_ms());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Player::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TournamentAssistantShared.Models.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const Player* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TournamentAssistantShared.Models.Player)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TournamentAssistantShared.Models.Player)
    MergeFrom(*source);
  }
}

void Player::MergeFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TournamentAssistantShared.Models.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mod_list_.MergeFrom(from.mod_list_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.has_team()) {
    _internal_mutable_team()->::TournamentAssistantShared::Models::Team::MergeFrom(from._internal_team());
  }
  if (from.has_song_list()) {
    _internal_mutable_song_list()->::TournamentAssistantShared::Models::Packets::SongList::MergeFrom(from._internal_song_list());
  }
  if (from.has_stream_screen_coordinates()) {
    _internal_mutable_stream_screen_coordinates()->::TournamentAssistantShared::Models::Player_Point::MergeFrom(from._internal_stream_screen_coordinates());
  }
  if (from.play_state() != 0) {
    _internal_set_play_state(from._internal_play_state());
  }
  if (from.download_state() != 0) {
    _internal_set_download_state(from._internal_download_state());
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from.combo() != 0) {
    _internal_set_combo(from._internal_combo());
  }
  if (!(from.accuracy() <= 0 && from.accuracy() >= 0)) {
    _internal_set_accuracy(from._internal_accuracy());
  }
  if (!(from.song_position() <= 0 && from.song_position() >= 0)) {
    _internal_set_song_position(from._internal_song_position());
  }
  if (from.stream_delay_ms() != 0) {
    _internal_set_stream_delay_ms(from._internal_stream_delay_ms());
  }
  if (from.stream_sync_start_ms() != 0) {
    _internal_set_stream_sync_start_ms(from._internal_stream_sync_start_ms());
  }
}

void Player::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TournamentAssistantShared.Models.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player::CopyFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TournamentAssistantShared.Models.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player::IsInitialized() const {
  return true;
}

void Player::InternalSwap(Player* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mod_list_.InternalSwap(&other->mod_list_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Player, stream_sync_start_ms_)
      + sizeof(Player::stream_sync_start_ms_)
      - PROTOBUF_FIELD_OFFSET(Player, team_)>(
          reinterpret_cast<char*>(&team_),
          reinterpret_cast<char*>(&other->team_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Player::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Models
}  // namespace TournamentAssistantShared
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TournamentAssistantShared::Models::Player_Point* Arena::CreateMaybeMessage< ::TournamentAssistantShared::Models::Player_Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TournamentAssistantShared::Models::Player_Point >(arena);
}
template<> PROTOBUF_NOINLINE ::TournamentAssistantShared::Models::Player* Arena::CreateMaybeMessage< ::TournamentAssistantShared::Models::Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TournamentAssistantShared::Models::Player >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
