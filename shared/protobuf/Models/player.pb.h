// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf/Models/player.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protobuf_2fModels_2fplayer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protobuf_2fModels_2fplayer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "protobuf/Models/team.pb.h"
#include "protobuf/Models/Packets/song_list.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protobuf_2fModels_2fplayer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protobuf_2fModels_2fplayer_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protobuf_2fModels_2fplayer_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_protobuf_2fModels_2fplayer_2eproto_metadata_getter(int index);
namespace TournamentAssistantShared {
namespace Models {
class Player;
struct PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
class Player_Point;
struct Player_PointDefaultTypeInternal;
extern Player_PointDefaultTypeInternal _Player_Point_default_instance_;
}  // namespace Models
}  // namespace TournamentAssistantShared
PROTOBUF_NAMESPACE_OPEN
template<> ::TournamentAssistantShared::Models::Player* Arena::CreateMaybeMessage<::TournamentAssistantShared::Models::Player>(Arena*);
template<> ::TournamentAssistantShared::Models::Player_Point* Arena::CreateMaybeMessage<::TournamentAssistantShared::Models::Player_Point>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TournamentAssistantShared {
namespace Models {

enum Player_PlayStates : int {
  Player_PlayStates_Waiting = 0,
  Player_PlayStates_InGame = 1,
  Player_PlayStates_Player_PlayStates_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Player_PlayStates_Player_PlayStates_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Player_PlayStates_IsValid(int value);
constexpr Player_PlayStates Player_PlayStates_PlayStates_MIN = Player_PlayStates_Waiting;
constexpr Player_PlayStates Player_PlayStates_PlayStates_MAX = Player_PlayStates_InGame;
constexpr int Player_PlayStates_PlayStates_ARRAYSIZE = Player_PlayStates_PlayStates_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Player_PlayStates_descriptor();
template<typename T>
inline const std::string& Player_PlayStates_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Player_PlayStates>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Player_PlayStates_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Player_PlayStates_descriptor(), enum_t_value);
}
inline bool Player_PlayStates_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Player_PlayStates* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Player_PlayStates>(
    Player_PlayStates_descriptor(), name, value);
}
enum Player_DownloadStates : int {
  Player_DownloadStates_None = 0,
  Player_DownloadStates_Downloading = 1,
  Player_DownloadStates_Downloaded = 2,
  Player_DownloadStates_DownloadError = 3,
  Player_DownloadStates_Player_DownloadStates_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Player_DownloadStates_Player_DownloadStates_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Player_DownloadStates_IsValid(int value);
constexpr Player_DownloadStates Player_DownloadStates_DownloadStates_MIN = Player_DownloadStates_None;
constexpr Player_DownloadStates Player_DownloadStates_DownloadStates_MAX = Player_DownloadStates_DownloadError;
constexpr int Player_DownloadStates_DownloadStates_ARRAYSIZE = Player_DownloadStates_DownloadStates_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Player_DownloadStates_descriptor();
template<typename T>
inline const std::string& Player_DownloadStates_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Player_DownloadStates>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Player_DownloadStates_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Player_DownloadStates_descriptor(), enum_t_value);
}
inline bool Player_DownloadStates_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Player_DownloadStates* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Player_DownloadStates>(
    Player_DownloadStates_descriptor(), name, value);
}
// ===================================================================

class Player_Point PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TournamentAssistantShared.Models.Player.Point) */ {
 public:
  inline Player_Point() : Player_Point(nullptr) {}
  virtual ~Player_Point();
  explicit constexpr Player_Point(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Player_Point(const Player_Point& from);
  Player_Point(Player_Point&& from) noexcept
    : Player_Point() {
    *this = ::std::move(from);
  }

  inline Player_Point& operator=(const Player_Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Player_Point& operator=(Player_Point&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Player_Point& default_instance() {
    return *internal_default_instance();
  }
  static inline const Player_Point* internal_default_instance() {
    return reinterpret_cast<const Player_Point*>(
               &_Player_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Player_Point& a, Player_Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Player_Point* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Player_Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Player_Point* New() const final {
    return CreateMaybeMessage<Player_Point>(nullptr);
  }

  Player_Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Player_Point>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Player_Point& from);
  void MergeFrom(const Player_Point& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Player_Point* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TournamentAssistantShared.Models.Player.Point";
  }
  protected:
  explicit Player_Point(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_protobuf_2fModels_2fplayer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // int32 x = 1;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 y = 2;
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TournamentAssistantShared.Models.Player.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protobuf_2fModels_2fplayer_2eproto;
};
// -------------------------------------------------------------------

class Player PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TournamentAssistantShared.Models.Player) */ {
 public:
  inline Player() : Player(nullptr) {}
  virtual ~Player();
  explicit constexpr Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Player(const Player& from);
  Player(Player&& from) noexcept
    : Player() {
    *this = ::std::move(from);
  }

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline Player& operator=(Player&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Player& a, Player& b) {
    a.Swap(&b);
  }
  inline void Swap(Player* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Player* New() const final {
    return CreateMaybeMessage<Player>(nullptr);
  }

  Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Player>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Player& from);
  void MergeFrom(const Player& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Player* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TournamentAssistantShared.Models.Player";
  }
  protected:
  explicit Player(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_protobuf_2fModels_2fplayer_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Player_Point Point;

  typedef Player_PlayStates PlayStates;
  static constexpr PlayStates Waiting =
    Player_PlayStates_Waiting;
  static constexpr PlayStates InGame =
    Player_PlayStates_InGame;
  static inline bool PlayStates_IsValid(int value) {
    return Player_PlayStates_IsValid(value);
  }
  static constexpr PlayStates PlayStates_MIN =
    Player_PlayStates_PlayStates_MIN;
  static constexpr PlayStates PlayStates_MAX =
    Player_PlayStates_PlayStates_MAX;
  static constexpr int PlayStates_ARRAYSIZE =
    Player_PlayStates_PlayStates_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PlayStates_descriptor() {
    return Player_PlayStates_descriptor();
  }
  template<typename T>
  static inline const std::string& PlayStates_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PlayStates>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PlayStates_Name.");
    return Player_PlayStates_Name(enum_t_value);
  }
  static inline bool PlayStates_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PlayStates* value) {
    return Player_PlayStates_Parse(name, value);
  }

  typedef Player_DownloadStates DownloadStates;
  static constexpr DownloadStates None =
    Player_DownloadStates_None;
  static constexpr DownloadStates Downloading =
    Player_DownloadStates_Downloading;
  static constexpr DownloadStates Downloaded =
    Player_DownloadStates_Downloaded;
  static constexpr DownloadStates DownloadError =
    Player_DownloadStates_DownloadError;
  static inline bool DownloadStates_IsValid(int value) {
    return Player_DownloadStates_IsValid(value);
  }
  static constexpr DownloadStates DownloadStates_MIN =
    Player_DownloadStates_DownloadStates_MIN;
  static constexpr DownloadStates DownloadStates_MAX =
    Player_DownloadStates_DownloadStates_MAX;
  static constexpr int DownloadStates_ARRAYSIZE =
    Player_DownloadStates_DownloadStates_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DownloadStates_descriptor() {
    return Player_DownloadStates_descriptor();
  }
  template<typename T>
  static inline const std::string& DownloadStates_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DownloadStates>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DownloadStates_Name.");
    return Player_DownloadStates_Name(enum_t_value);
  }
  static inline bool DownloadStates_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DownloadStates* value) {
    return Player_DownloadStates_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kModListFieldNumber = 12,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kUserIdFieldNumber = 3,
    kTeamFieldNumber = 4,
    kSongListFieldNumber = 11,
    kStreamScreenCoordinatesFieldNumber = 13,
    kPlayStateFieldNumber = 5,
    kDownloadStateFieldNumber = 6,
    kScoreFieldNumber = 7,
    kComboFieldNumber = 8,
    kAccuracyFieldNumber = 9,
    kSongPositionFieldNumber = 10,
    kStreamDelayMsFieldNumber = 14,
    kStreamSyncStartMsFieldNumber = 15,
  };
  // repeated string mod_list = 12;
  int mod_list_size() const;
  private:
  int _internal_mod_list_size() const;
  public:
  void clear_mod_list();
  const std::string& mod_list(int index) const;
  std::string* mutable_mod_list(int index);
  void set_mod_list(int index, const std::string& value);
  void set_mod_list(int index, std::string&& value);
  void set_mod_list(int index, const char* value);
  void set_mod_list(int index, const char* value, size_t size);
  std::string* add_mod_list();
  void add_mod_list(const std::string& value);
  void add_mod_list(std::string&& value);
  void add_mod_list(const char* value);
  void add_mod_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& mod_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_mod_list();
  private:
  const std::string& _internal_mod_list(int index) const;
  std::string* _internal_add_mod_list();
  public:

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string user_id = 3;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // .TournamentAssistantShared.Models.Team team = 4;
  bool has_team() const;
  private:
  bool _internal_has_team() const;
  public:
  void clear_team();
  const ::TournamentAssistantShared::Models::Team& team() const;
  ::TournamentAssistantShared::Models::Team* release_team();
  ::TournamentAssistantShared::Models::Team* mutable_team();
  void set_allocated_team(::TournamentAssistantShared::Models::Team* team);
  private:
  const ::TournamentAssistantShared::Models::Team& _internal_team() const;
  ::TournamentAssistantShared::Models::Team* _internal_mutable_team();
  public:
  void unsafe_arena_set_allocated_team(
      ::TournamentAssistantShared::Models::Team* team);
  ::TournamentAssistantShared::Models::Team* unsafe_arena_release_team();

  // .TournamentAssistantShared.Models.Packets.SongList song_list = 11;
  bool has_song_list() const;
  private:
  bool _internal_has_song_list() const;
  public:
  void clear_song_list();
  const ::TournamentAssistantShared::Models::Packets::SongList& song_list() const;
  ::TournamentAssistantShared::Models::Packets::SongList* release_song_list();
  ::TournamentAssistantShared::Models::Packets::SongList* mutable_song_list();
  void set_allocated_song_list(::TournamentAssistantShared::Models::Packets::SongList* song_list);
  private:
  const ::TournamentAssistantShared::Models::Packets::SongList& _internal_song_list() const;
  ::TournamentAssistantShared::Models::Packets::SongList* _internal_mutable_song_list();
  public:
  void unsafe_arena_set_allocated_song_list(
      ::TournamentAssistantShared::Models::Packets::SongList* song_list);
  ::TournamentAssistantShared::Models::Packets::SongList* unsafe_arena_release_song_list();

  // .TournamentAssistantShared.Models.Player.Point stream_screen_coordinates = 13;
  bool has_stream_screen_coordinates() const;
  private:
  bool _internal_has_stream_screen_coordinates() const;
  public:
  void clear_stream_screen_coordinates();
  const ::TournamentAssistantShared::Models::Player_Point& stream_screen_coordinates() const;
  ::TournamentAssistantShared::Models::Player_Point* release_stream_screen_coordinates();
  ::TournamentAssistantShared::Models::Player_Point* mutable_stream_screen_coordinates();
  void set_allocated_stream_screen_coordinates(::TournamentAssistantShared::Models::Player_Point* stream_screen_coordinates);
  private:
  const ::TournamentAssistantShared::Models::Player_Point& _internal_stream_screen_coordinates() const;
  ::TournamentAssistantShared::Models::Player_Point* _internal_mutable_stream_screen_coordinates();
  public:
  void unsafe_arena_set_allocated_stream_screen_coordinates(
      ::TournamentAssistantShared::Models::Player_Point* stream_screen_coordinates);
  ::TournamentAssistantShared::Models::Player_Point* unsafe_arena_release_stream_screen_coordinates();

  // .TournamentAssistantShared.Models.Player.PlayStates play_state = 5;
  void clear_play_state();
  ::TournamentAssistantShared::Models::Player_PlayStates play_state() const;
  void set_play_state(::TournamentAssistantShared::Models::Player_PlayStates value);
  private:
  ::TournamentAssistantShared::Models::Player_PlayStates _internal_play_state() const;
  void _internal_set_play_state(::TournamentAssistantShared::Models::Player_PlayStates value);
  public:

  // .TournamentAssistantShared.Models.Player.DownloadStates download_state = 6;
  void clear_download_state();
  ::TournamentAssistantShared::Models::Player_DownloadStates download_state() const;
  void set_download_state(::TournamentAssistantShared::Models::Player_DownloadStates value);
  private:
  ::TournamentAssistantShared::Models::Player_DownloadStates _internal_download_state() const;
  void _internal_set_download_state(::TournamentAssistantShared::Models::Player_DownloadStates value);
  public:

  // int32 score = 7;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 combo = 8;
  void clear_combo();
  ::PROTOBUF_NAMESPACE_ID::int32 combo() const;
  void set_combo(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_combo() const;
  void _internal_set_combo(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double accuracy = 9;
  void clear_accuracy();
  double accuracy() const;
  void set_accuracy(double value);
  private:
  double _internal_accuracy() const;
  void _internal_set_accuracy(double value);
  public:

  // double song_position = 10;
  void clear_song_position();
  double song_position() const;
  void set_song_position(double value);
  private:
  double _internal_song_position() const;
  void _internal_set_song_position(double value);
  public:

  // int64 stream_delay_ms = 14;
  void clear_stream_delay_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 stream_delay_ms() const;
  void set_stream_delay_ms(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_stream_delay_ms() const;
  void _internal_set_stream_delay_ms(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 stream_sync_start_ms = 15;
  void clear_stream_sync_start_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 stream_sync_start_ms() const;
  void set_stream_sync_start_ms(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_stream_sync_start_ms() const;
  void _internal_set_stream_sync_start_ms(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:TournamentAssistantShared.Models.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> mod_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::TournamentAssistantShared::Models::Team* team_;
  ::TournamentAssistantShared::Models::Packets::SongList* song_list_;
  ::TournamentAssistantShared::Models::Player_Point* stream_screen_coordinates_;
  int play_state_;
  int download_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 score_;
  ::PROTOBUF_NAMESPACE_ID::int32 combo_;
  double accuracy_;
  double song_position_;
  ::PROTOBUF_NAMESPACE_ID::int64 stream_delay_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 stream_sync_start_ms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protobuf_2fModels_2fplayer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Player_Point

// int32 x = 1;
inline void Player_Point::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player_Point::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player_Point::x() const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.Player.Point.x)
  return _internal_x();
}
inline void Player_Point::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_ = value;
}
inline void Player_Point::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:TournamentAssistantShared.Models.Player.Point.x)
}

// int32 y = 2;
inline void Player_Point::clear_y() {
  y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player_Point::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player_Point::y() const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.Player.Point.y)
  return _internal_y();
}
inline void Player_Point::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y_ = value;
}
inline void Player_Point::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:TournamentAssistantShared.Models.Player.Point.y)
}

// -------------------------------------------------------------------

// Player

// string id = 1;
inline void Player::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Player::id() const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.Player.id)
  return _internal_id();
}
inline void Player::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:TournamentAssistantShared.Models.Player.id)
}
inline std::string* Player::mutable_id() {
  // @@protoc_insertion_point(field_mutable:TournamentAssistantShared.Models.Player.id)
  return _internal_mutable_id();
}
inline const std::string& Player::_internal_id() const {
  return id_.Get();
}
inline void Player::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Player::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TournamentAssistantShared.Models.Player.id)
}
inline void Player::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TournamentAssistantShared.Models.Player.id)
}
inline void Player::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TournamentAssistantShared.Models.Player.id)
}
inline std::string* Player::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Player::release_id() {
  // @@protoc_insertion_point(field_release:TournamentAssistantShared.Models.Player.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Player::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TournamentAssistantShared.Models.Player.id)
}

// string name = 2;
inline void Player::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Player::name() const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.Player.name)
  return _internal_name();
}
inline void Player::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:TournamentAssistantShared.Models.Player.name)
}
inline std::string* Player::mutable_name() {
  // @@protoc_insertion_point(field_mutable:TournamentAssistantShared.Models.Player.name)
  return _internal_mutable_name();
}
inline const std::string& Player::_internal_name() const {
  return name_.Get();
}
inline void Player::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Player::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TournamentAssistantShared.Models.Player.name)
}
inline void Player::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TournamentAssistantShared.Models.Player.name)
}
inline void Player::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TournamentAssistantShared.Models.Player.name)
}
inline std::string* Player::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Player::release_name() {
  // @@protoc_insertion_point(field_release:TournamentAssistantShared.Models.Player.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Player::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TournamentAssistantShared.Models.Player.name)
}

// string user_id = 3;
inline void Player::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& Player::user_id() const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.Player.user_id)
  return _internal_user_id();
}
inline void Player::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:TournamentAssistantShared.Models.Player.user_id)
}
inline std::string* Player::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:TournamentAssistantShared.Models.Player.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& Player::_internal_user_id() const {
  return user_id_.Get();
}
inline void Player::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Player::set_user_id(std::string&& value) {
  
  user_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TournamentAssistantShared.Models.Player.user_id)
}
inline void Player::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TournamentAssistantShared.Models.Player.user_id)
}
inline void Player::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TournamentAssistantShared.Models.Player.user_id)
}
inline std::string* Player::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Player::release_user_id() {
  // @@protoc_insertion_point(field_release:TournamentAssistantShared.Models.Player.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Player::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TournamentAssistantShared.Models.Player.user_id)
}

// .TournamentAssistantShared.Models.Team team = 4;
inline bool Player::_internal_has_team() const {
  return this != internal_default_instance() && team_ != nullptr;
}
inline bool Player::has_team() const {
  return _internal_has_team();
}
inline const ::TournamentAssistantShared::Models::Team& Player::_internal_team() const {
  const ::TournamentAssistantShared::Models::Team* p = team_;
  return p != nullptr ? *p : reinterpret_cast<const ::TournamentAssistantShared::Models::Team&>(
      ::TournamentAssistantShared::Models::_Team_default_instance_);
}
inline const ::TournamentAssistantShared::Models::Team& Player::team() const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.Player.team)
  return _internal_team();
}
inline void Player::unsafe_arena_set_allocated_team(
    ::TournamentAssistantShared::Models::Team* team) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(team_);
  }
  team_ = team;
  if (team) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TournamentAssistantShared.Models.Player.team)
}
inline ::TournamentAssistantShared::Models::Team* Player::release_team() {
  
  ::TournamentAssistantShared::Models::Team* temp = team_;
  team_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TournamentAssistantShared::Models::Team* Player::unsafe_arena_release_team() {
  // @@protoc_insertion_point(field_release:TournamentAssistantShared.Models.Player.team)
  
  ::TournamentAssistantShared::Models::Team* temp = team_;
  team_ = nullptr;
  return temp;
}
inline ::TournamentAssistantShared::Models::Team* Player::_internal_mutable_team() {
  
  if (team_ == nullptr) {
    auto* p = CreateMaybeMessage<::TournamentAssistantShared::Models::Team>(GetArena());
    team_ = p;
  }
  return team_;
}
inline ::TournamentAssistantShared::Models::Team* Player::mutable_team() {
  // @@protoc_insertion_point(field_mutable:TournamentAssistantShared.Models.Player.team)
  return _internal_mutable_team();
}
inline void Player::set_allocated_team(::TournamentAssistantShared::Models::Team* team) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(team_);
  }
  if (team) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(team)->GetArena();
    if (message_arena != submessage_arena) {
      team = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, team, submessage_arena);
    }
    
  } else {
    
  }
  team_ = team;
  // @@protoc_insertion_point(field_set_allocated:TournamentAssistantShared.Models.Player.team)
}

// .TournamentAssistantShared.Models.Player.PlayStates play_state = 5;
inline void Player::clear_play_state() {
  play_state_ = 0;
}
inline ::TournamentAssistantShared::Models::Player_PlayStates Player::_internal_play_state() const {
  return static_cast< ::TournamentAssistantShared::Models::Player_PlayStates >(play_state_);
}
inline ::TournamentAssistantShared::Models::Player_PlayStates Player::play_state() const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.Player.play_state)
  return _internal_play_state();
}
inline void Player::_internal_set_play_state(::TournamentAssistantShared::Models::Player_PlayStates value) {
  
  play_state_ = value;
}
inline void Player::set_play_state(::TournamentAssistantShared::Models::Player_PlayStates value) {
  _internal_set_play_state(value);
  // @@protoc_insertion_point(field_set:TournamentAssistantShared.Models.Player.play_state)
}

// .TournamentAssistantShared.Models.Player.DownloadStates download_state = 6;
inline void Player::clear_download_state() {
  download_state_ = 0;
}
inline ::TournamentAssistantShared::Models::Player_DownloadStates Player::_internal_download_state() const {
  return static_cast< ::TournamentAssistantShared::Models::Player_DownloadStates >(download_state_);
}
inline ::TournamentAssistantShared::Models::Player_DownloadStates Player::download_state() const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.Player.download_state)
  return _internal_download_state();
}
inline void Player::_internal_set_download_state(::TournamentAssistantShared::Models::Player_DownloadStates value) {
  
  download_state_ = value;
}
inline void Player::set_download_state(::TournamentAssistantShared::Models::Player_DownloadStates value) {
  _internal_set_download_state(value);
  // @@protoc_insertion_point(field_set:TournamentAssistantShared.Models.Player.download_state)
}

// int32 score = 7;
inline void Player::clear_score() {
  score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::score() const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.Player.score)
  return _internal_score();
}
inline void Player::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  score_ = value;
}
inline void Player::set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:TournamentAssistantShared.Models.Player.score)
}

// int32 combo = 8;
inline void Player::clear_combo() {
  combo_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::_internal_combo() const {
  return combo_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::combo() const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.Player.combo)
  return _internal_combo();
}
inline void Player::_internal_set_combo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  combo_ = value;
}
inline void Player::set_combo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_combo(value);
  // @@protoc_insertion_point(field_set:TournamentAssistantShared.Models.Player.combo)
}

// double accuracy = 9;
inline void Player::clear_accuracy() {
  accuracy_ = 0;
}
inline double Player::_internal_accuracy() const {
  return accuracy_;
}
inline double Player::accuracy() const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.Player.accuracy)
  return _internal_accuracy();
}
inline void Player::_internal_set_accuracy(double value) {
  
  accuracy_ = value;
}
inline void Player::set_accuracy(double value) {
  _internal_set_accuracy(value);
  // @@protoc_insertion_point(field_set:TournamentAssistantShared.Models.Player.accuracy)
}

// double song_position = 10;
inline void Player::clear_song_position() {
  song_position_ = 0;
}
inline double Player::_internal_song_position() const {
  return song_position_;
}
inline double Player::song_position() const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.Player.song_position)
  return _internal_song_position();
}
inline void Player::_internal_set_song_position(double value) {
  
  song_position_ = value;
}
inline void Player::set_song_position(double value) {
  _internal_set_song_position(value);
  // @@protoc_insertion_point(field_set:TournamentAssistantShared.Models.Player.song_position)
}

// .TournamentAssistantShared.Models.Packets.SongList song_list = 11;
inline bool Player::_internal_has_song_list() const {
  return this != internal_default_instance() && song_list_ != nullptr;
}
inline bool Player::has_song_list() const {
  return _internal_has_song_list();
}
inline const ::TournamentAssistantShared::Models::Packets::SongList& Player::_internal_song_list() const {
  const ::TournamentAssistantShared::Models::Packets::SongList* p = song_list_;
  return p != nullptr ? *p : reinterpret_cast<const ::TournamentAssistantShared::Models::Packets::SongList&>(
      ::TournamentAssistantShared::Models::Packets::_SongList_default_instance_);
}
inline const ::TournamentAssistantShared::Models::Packets::SongList& Player::song_list() const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.Player.song_list)
  return _internal_song_list();
}
inline void Player::unsafe_arena_set_allocated_song_list(
    ::TournamentAssistantShared::Models::Packets::SongList* song_list) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(song_list_);
  }
  song_list_ = song_list;
  if (song_list) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TournamentAssistantShared.Models.Player.song_list)
}
inline ::TournamentAssistantShared::Models::Packets::SongList* Player::release_song_list() {
  
  ::TournamentAssistantShared::Models::Packets::SongList* temp = song_list_;
  song_list_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TournamentAssistantShared::Models::Packets::SongList* Player::unsafe_arena_release_song_list() {
  // @@protoc_insertion_point(field_release:TournamentAssistantShared.Models.Player.song_list)
  
  ::TournamentAssistantShared::Models::Packets::SongList* temp = song_list_;
  song_list_ = nullptr;
  return temp;
}
inline ::TournamentAssistantShared::Models::Packets::SongList* Player::_internal_mutable_song_list() {
  
  if (song_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::TournamentAssistantShared::Models::Packets::SongList>(GetArena());
    song_list_ = p;
  }
  return song_list_;
}
inline ::TournamentAssistantShared::Models::Packets::SongList* Player::mutable_song_list() {
  // @@protoc_insertion_point(field_mutable:TournamentAssistantShared.Models.Player.song_list)
  return _internal_mutable_song_list();
}
inline void Player::set_allocated_song_list(::TournamentAssistantShared::Models::Packets::SongList* song_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(song_list_);
  }
  if (song_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(song_list)->GetArena();
    if (message_arena != submessage_arena) {
      song_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, song_list, submessage_arena);
    }
    
  } else {
    
  }
  song_list_ = song_list;
  // @@protoc_insertion_point(field_set_allocated:TournamentAssistantShared.Models.Player.song_list)
}

// repeated string mod_list = 12;
inline int Player::_internal_mod_list_size() const {
  return mod_list_.size();
}
inline int Player::mod_list_size() const {
  return _internal_mod_list_size();
}
inline void Player::clear_mod_list() {
  mod_list_.Clear();
}
inline std::string* Player::add_mod_list() {
  // @@protoc_insertion_point(field_add_mutable:TournamentAssistantShared.Models.Player.mod_list)
  return _internal_add_mod_list();
}
inline const std::string& Player::_internal_mod_list(int index) const {
  return mod_list_.Get(index);
}
inline const std::string& Player::mod_list(int index) const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.Player.mod_list)
  return _internal_mod_list(index);
}
inline std::string* Player::mutable_mod_list(int index) {
  // @@protoc_insertion_point(field_mutable:TournamentAssistantShared.Models.Player.mod_list)
  return mod_list_.Mutable(index);
}
inline void Player::set_mod_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TournamentAssistantShared.Models.Player.mod_list)
  mod_list_.Mutable(index)->assign(value);
}
inline void Player::set_mod_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TournamentAssistantShared.Models.Player.mod_list)
  mod_list_.Mutable(index)->assign(std::move(value));
}
inline void Player::set_mod_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mod_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TournamentAssistantShared.Models.Player.mod_list)
}
inline void Player::set_mod_list(int index, const char* value, size_t size) {
  mod_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TournamentAssistantShared.Models.Player.mod_list)
}
inline std::string* Player::_internal_add_mod_list() {
  return mod_list_.Add();
}
inline void Player::add_mod_list(const std::string& value) {
  mod_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TournamentAssistantShared.Models.Player.mod_list)
}
inline void Player::add_mod_list(std::string&& value) {
  mod_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TournamentAssistantShared.Models.Player.mod_list)
}
inline void Player::add_mod_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mod_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TournamentAssistantShared.Models.Player.mod_list)
}
inline void Player::add_mod_list(const char* value, size_t size) {
  mod_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TournamentAssistantShared.Models.Player.mod_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Player::mod_list() const {
  // @@protoc_insertion_point(field_list:TournamentAssistantShared.Models.Player.mod_list)
  return mod_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Player::mutable_mod_list() {
  // @@protoc_insertion_point(field_mutable_list:TournamentAssistantShared.Models.Player.mod_list)
  return &mod_list_;
}

// .TournamentAssistantShared.Models.Player.Point stream_screen_coordinates = 13;
inline bool Player::_internal_has_stream_screen_coordinates() const {
  return this != internal_default_instance() && stream_screen_coordinates_ != nullptr;
}
inline bool Player::has_stream_screen_coordinates() const {
  return _internal_has_stream_screen_coordinates();
}
inline void Player::clear_stream_screen_coordinates() {
  if (GetArena() == nullptr && stream_screen_coordinates_ != nullptr) {
    delete stream_screen_coordinates_;
  }
  stream_screen_coordinates_ = nullptr;
}
inline const ::TournamentAssistantShared::Models::Player_Point& Player::_internal_stream_screen_coordinates() const {
  const ::TournamentAssistantShared::Models::Player_Point* p = stream_screen_coordinates_;
  return p != nullptr ? *p : reinterpret_cast<const ::TournamentAssistantShared::Models::Player_Point&>(
      ::TournamentAssistantShared::Models::_Player_Point_default_instance_);
}
inline const ::TournamentAssistantShared::Models::Player_Point& Player::stream_screen_coordinates() const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.Player.stream_screen_coordinates)
  return _internal_stream_screen_coordinates();
}
inline void Player::unsafe_arena_set_allocated_stream_screen_coordinates(
    ::TournamentAssistantShared::Models::Player_Point* stream_screen_coordinates) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_screen_coordinates_);
  }
  stream_screen_coordinates_ = stream_screen_coordinates;
  if (stream_screen_coordinates) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TournamentAssistantShared.Models.Player.stream_screen_coordinates)
}
inline ::TournamentAssistantShared::Models::Player_Point* Player::release_stream_screen_coordinates() {
  
  ::TournamentAssistantShared::Models::Player_Point* temp = stream_screen_coordinates_;
  stream_screen_coordinates_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TournamentAssistantShared::Models::Player_Point* Player::unsafe_arena_release_stream_screen_coordinates() {
  // @@protoc_insertion_point(field_release:TournamentAssistantShared.Models.Player.stream_screen_coordinates)
  
  ::TournamentAssistantShared::Models::Player_Point* temp = stream_screen_coordinates_;
  stream_screen_coordinates_ = nullptr;
  return temp;
}
inline ::TournamentAssistantShared::Models::Player_Point* Player::_internal_mutable_stream_screen_coordinates() {
  
  if (stream_screen_coordinates_ == nullptr) {
    auto* p = CreateMaybeMessage<::TournamentAssistantShared::Models::Player_Point>(GetArena());
    stream_screen_coordinates_ = p;
  }
  return stream_screen_coordinates_;
}
inline ::TournamentAssistantShared::Models::Player_Point* Player::mutable_stream_screen_coordinates() {
  // @@protoc_insertion_point(field_mutable:TournamentAssistantShared.Models.Player.stream_screen_coordinates)
  return _internal_mutable_stream_screen_coordinates();
}
inline void Player::set_allocated_stream_screen_coordinates(::TournamentAssistantShared::Models::Player_Point* stream_screen_coordinates) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete stream_screen_coordinates_;
  }
  if (stream_screen_coordinates) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stream_screen_coordinates);
    if (message_arena != submessage_arena) {
      stream_screen_coordinates = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_screen_coordinates, submessage_arena);
    }
    
  } else {
    
  }
  stream_screen_coordinates_ = stream_screen_coordinates;
  // @@protoc_insertion_point(field_set_allocated:TournamentAssistantShared.Models.Player.stream_screen_coordinates)
}

// int64 stream_delay_ms = 14;
inline void Player::clear_stream_delay_ms() {
  stream_delay_ms_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Player::_internal_stream_delay_ms() const {
  return stream_delay_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Player::stream_delay_ms() const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.Player.stream_delay_ms)
  return _internal_stream_delay_ms();
}
inline void Player::_internal_set_stream_delay_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  stream_delay_ms_ = value;
}
inline void Player::set_stream_delay_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_stream_delay_ms(value);
  // @@protoc_insertion_point(field_set:TournamentAssistantShared.Models.Player.stream_delay_ms)
}

// int64 stream_sync_start_ms = 15;
inline void Player::clear_stream_sync_start_ms() {
  stream_sync_start_ms_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Player::_internal_stream_sync_start_ms() const {
  return stream_sync_start_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Player::stream_sync_start_ms() const {
  // @@protoc_insertion_point(field_get:TournamentAssistantShared.Models.Player.stream_sync_start_ms)
  return _internal_stream_sync_start_ms();
}
inline void Player::_internal_set_stream_sync_start_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  stream_sync_start_ms_ = value;
}
inline void Player::set_stream_sync_start_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_stream_sync_start_ms(value);
  // @@protoc_insertion_point(field_set:TournamentAssistantShared.Models.Player.stream_sync_start_ms)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Models
}  // namespace TournamentAssistantShared

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TournamentAssistantShared::Models::Player_PlayStates> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TournamentAssistantShared::Models::Player_PlayStates>() {
  return ::TournamentAssistantShared::Models::Player_PlayStates_descriptor();
}
template <> struct is_proto_enum< ::TournamentAssistantShared::Models::Player_DownloadStates> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TournamentAssistantShared::Models::Player_DownloadStates>() {
  return ::TournamentAssistantShared::Models::Player_DownloadStates_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protobuf_2fModels_2fplayer_2eproto
